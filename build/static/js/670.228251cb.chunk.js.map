{"version":3,"file":"static/js/670.228251cb.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","pages/threads/Signature.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/Directory.tsx","pages/threads/History.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Typography from '@mui/material/Typography';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentPurpose,\r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread,\r\n    ThreadTags,\r\n    UserAccounts\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_PURPOSE,\r\n    GET_ALL_THREAD_TAGS,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    GET_TEMP_REF_NUM,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport { GET_USER_ACCOUNTS_BY_OFFICES } from '../../api/offices';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId: number[];\r\n    recipientUserId: string[];\r\n    docTypeId?: number;\r\n    purposeId?: number;\r\n    tagId: number | null;\r\n    attachments: boolean;\r\n    purposeNotes: string;\r\n    completed: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport function generateOfficeCode(officeCode?: string, sectionCode?: string) {\r\n    if (officeCode && sectionCode) return ` (${officeCode}-${sectionCode})`;\r\n    else if (officeCode) return ` (${officeCode})`\r\n    else return '';\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const theme = useTheme();\r\n  const { data: tempRefNum } = useQuery<{ getThreadRefNum: string }>(GET_TEMP_REF_NUM, { variables: { authorId: props.userId }});\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n  const { data: threadTags } = useQuery<{ getAllThreadTags: ThreadTags[] }>(GET_ALL_THREAD_TAGS);\r\n  const { data: threadOfficers, refetch: refetchOfficers } = useQuery<{ getAccountsByOffice: UserAccounts[] }>(GET_USER_ACCOUNTS_BY_OFFICES, { variables: { officeIds: [] } });\r\n  const [createThread] = useMutation<{ createThread: Thread[] }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [purposes, setPurposes] = React.useState<Queue>();\r\n  const [officers, setOfficers] = React.useState<{ [key: string]: string }>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    completed: false,\r\n    dateDue: new Date().toISOString(),\r\n    tagId: null,\r\n    recipientId: [],\r\n    recipientUserId: [],\r\n    purposeNotes: ''\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string,\r\n    purpose?: string\r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes && threadPurposes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            if (office.sectionName === \"default\") {\r\n                officeObject[office.sectionOffice.officeName + \" — All\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = -(office.sectionOffice.officeId);\r\n                officeObject[office.sectionOffice.officeName + \" — Admin\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            } else {\r\n                officeObject[office.sectionOffice.officeName + \" — \" + office.sectionName + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            }\r\n        })\r\n        \r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n\r\n        let purposesObject: Queue = {};\r\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\r\n            purposesObject[purpose.purposeName] = purpose.purposeId;\r\n        })\r\n        setPurposes(purposesObject);\r\n\r\n    }\r\n  }, [officeSections, threadTypes, threadPurposes]);\r\n\r\n  React.useEffect(() => {\r\n    if (threadOfficers) {\r\n        let officersObject: { [key: string]: string } = {};\r\n        threadOfficers.getAccountsByOffice.forEach(officer => {\r\n            officersObject[officer.firstName + \" \" + officer.lastName] = officer.accountId\r\n        })\r\n\r\n        setOfficers(officersObject);\r\n    }\r\n  }, [threadOfficers])\r\n\r\n  if (!offices || !types || !purposes || !officers) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\r\n\r\n  const handlePurposeNotesChange = (_: any, newValue: string) => setFormData({ ...formData, purposeNotes: newValue });\r\n\r\n  const handleTegChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(event.target.value, 10);\r\n    if (value === 0) setFormData({ ...formData, tagId: null });\r\n    else setFormData({ ...formData, tagId: value });\r\n  }\r\n\r\n  const handleRecipientChange = (_: any, newValue: string[]) => {\r\n    setFormData({ ...formData, recipientId: newValue.map(value => offices[value]) });\r\n    refetchOfficers({ officeIds: newValue.map(value => offices[value]).filter(id => id > 0) })\r\n  }\r\n\r\n  const handleOfficersChange = (_: any, newValue: string[]) => {\r\n    setFormData({ ...formData, recipientUserId: newValue.map(value => officers[value]) });\r\n  }\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.purposeId) {\r\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.name,\r\n                fileType: \"url\",\r\n                fileUrl: link.link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            for (let i = 0; i < threadResult.data.createThread.length; i++) {\r\n                const thread = threadResult.data.createThread[i]\r\n\r\n                await sendThreadMessage({ variables: { data: {\r\n                    message: messageData.message,\r\n                    files: messageFiles,\r\n                    senderId: props.userId,\r\n                    threadId: thread.refId\r\n                }}})\r\n            }\r\n\r\n            props.onCreateThread(threadResult.data.createThread[0].refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Stack spacing={3} sx={{ p: 2 }}>\r\n                <div>\r\n                    <Stack direction='row' justifyContent='space-between' alignItems='end'>\r\n                        <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                            <Button \r\n                                variant='contained' \r\n                                endIcon={<SendIcon />}\r\n                                onClick={handleCreateThread}\r\n                            >\r\n                                Send\r\n                            </Button>\r\n                            <Tooltip title='Discard'>\r\n                                <IconButton onClick={props.onDiscardThread}>\r\n                                    <DeleteOutlinedIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Stack>\r\n                        \r\n                        {tempRefNum && (\r\n                            <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                                {`${tempRefNum.getThreadRefNum}`}\r\n                            </Typography>\r\n                        )}\r\n                    </Stack>\r\n                    <Divider /> \r\n                </div>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        multiple\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(offices)}\r\n                        onChange={handleRecipientChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.recipient !== undefined}\r\n                                helperText={formError && formError.recipient}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Officers' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        multiple\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(officers)}\r\n                        onChange={handleOfficersChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard'\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField \r\n                        name='subject'\r\n                        variant='standard'\r\n                        value={formData.subject}\r\n                        onChange={handleSubjectTextChange}\r\n                        fullWidth\r\n                        error={formError?.subject !== undefined}\r\n                        helperText={formError && formError.subject}\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onInputChange={handlePurposeNotesChange}\r\n                        onChange={handleThreadPurposeChange}\r\n                        options={Object.keys(purposes)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.purpose !== undefined}\r\n                                helperText={formError && formError.purpose}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n                \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadTypeChange}\r\n                        options={Object.keys(types)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.type !== undefined}\r\n                                helperText={formError && formError.type}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Tag' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField\r\n                        fullWidth\r\n                        name='tagId'\r\n                        variant='standard'\r\n                        select\r\n                        value={formData.tagId ? formData.tagId : 0}\r\n                        onChange={handleTegChange}\r\n                    >\r\n                        <MenuItem value={0}>None</MenuItem>\r\n                        {threadTags && threadTags.getAllThreadTags.map(tag => (\r\n                            <MenuItem key={tag.tagId} value={tag.tagId}>{tag.tagName}</MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </Stack>\r\n\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DatePicker \r\n                        label=\"Date Due\"\r\n                        views={[\"year\", \"month\", \"day\"]}\r\n                        value={dayjs(formData.dateDue)} \r\n                        onChange={handleDateDueChange} \r\n                        format=\"MMMM DD, YYYY\"\r\n                    />\r\n                </LocalizationProvider>\r\n\r\n                <FormControlLabel \r\n                    control={\r\n                        <Checkbox \r\n                            checked={formData.attachments} \r\n                            onChange={handleToggleAttachments} \r\n                        />\r\n                    } \r\n                    label=\"Attachments Required\" \r\n                />\r\n\r\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                        {formError && formError.general}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}","import React, { useState } from 'react';\r\n// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Popover from '@mui/material/Popover';\r\n// icons\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [open, setOpen] = useState<Element | null>(null);\r\n\r\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setOpen(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleOpen}\r\n        sx={{\r\n          p: 0,\r\n          mx: 2,\r\n          ...(open && {\r\n            '&:before': {\r\n              zIndex: 1,\r\n              content: \"''\",\r\n              width: '100%',\r\n              height: '100%',\r\n              borderRadius: '50%',\r\n              position: 'absolute',\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n            },\r\n          }),\r\n        }}\r\n      >\r\n        <FilterListIcon />\r\n      </IconButton>\r\n\r\n      <Popover\r\n        open={Boolean(open)}\r\n        anchorEl={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        PaperProps={{\r\n          sx: {\r\n            p: 0,\r\n            mt: 1.5,\r\n            ml: 0.75,\r\n            width: 360,\r\n            '& .MuiMenuItem-root': {\r\n              typography: 'body2',\r\n              borderRadius: 0.75,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            <List\r\n                disablePadding\r\n                subheader={\r\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\r\n                        Thread Types\r\n                    </ListSubheader>\r\n                }\r\n            >\r\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\r\n                  All\r\n                </ListItemButton>\r\n                <Divider sx={{ borderStyle: 'dashed' }} />\r\n\r\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\r\n                  <React.Fragment key={thread.docId}>\r\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\r\n                      {thread.docType}\r\n                    </ListItemButton>\r\n                    <Divider sx={{ borderStyle: 'dashed' }} />\r\n                  </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n      </Popover>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport Chip from '@mui/material/Chip';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport FilterPopover from './FilterPopover';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  mode: string;\r\n  compose: boolean;\r\n  mails?: Thread[];\r\n  onRefresh: () => void;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  }\r\n}\r\n\r\nconst getTagColor = (tagName: string) => {\r\n  if (tagName === \"Top Priority\") return \"error\";\r\n  else if (tagName === \"Confidential\") return \"warning\";\r\n  return \"primary\"\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={props.mails === undefined} />\r\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n        {props.mode !== \"completed\" && (\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n        )}\r\n        \r\n        <IconButton onClick={props.onRefresh}>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\r\n      </Stack>\r\n      \r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 170px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {props.mails && props.mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\r\n            <React.Fragment key={msg.refId}>\r\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ mb: 2 }}>\r\n                        <Typography variant='body1' gutterBottom>\r\n                            {msg.subject}\r\n                        </Typography>\r\n                        <div>\r\n                          <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"subtitle2\"\r\n                            color=\"text.primary\"\r\n                          >\r\n                            {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\r\n                          </Typography>\r\n                          {` — ${msg.docType.docType} request For ${msg.purpose.purposeName}.`}\r\n                        </div>\r\n                    </Box>\r\n                  } \r\n                  secondary={\r\n                    <Box sx={{\r\n                      display: 'flex',\r\n                      flexDirection: 'row',\r\n                      justifyContent: 'space-between'\r\n                    }}>\r\n                      <div>\r\n                        <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\r\n                        \r\n                        {msg.threadTag && (\r\n                          <Chip color={getTagColor(msg.threadTag.tagName)} label={msg.threadTag.tagName} size='small' sx={{ fontSize: 10 }} />\r\n                        )}\r\n                      </div>\r\n                      <Typography variant='caption'>\r\n                        {`Due at ${formatInboxDate(msg.dateDue)}`}\r\n                      </Typography>\r\n                    </Box>\r\n                  }\r\n                />\r\n              </ListItemButton>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (name: string, link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [name, setName] = React.useState<string>(\"\");\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(name, link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"name\"\r\n                    label=\"File Name\"\r\n                    fullWidth\r\n                    value={name}\r\n                    onChange={(event) => setName(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: {\r\n        name: string;\r\n        link: string;\r\n    }[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links.map(link => link.name)))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (name: string, link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, { name, link } ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l.name === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l.name !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.name,\r\n            fileType: \"url\",\r\n            fileUrl: link.link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={4}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\n// mui\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport SignatureCanvas from 'react-signature-canvas';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\n// api \r\nimport axios from 'axios';\r\n\r\ninterface SignatureDialogProps {\r\n    open: boolean;\r\n    imageUrl: string | null;\r\n    onClose: () => void;\r\n    onSubmit: (url: string) => void;\r\n}\r\n\r\nexport default function SignatureDialog({ open, imageUrl, onSubmit, onClose }: SignatureDialogProps) {\r\n    const sigPad = React.useRef<SignatureCanvas | null>(null);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n\r\n    const handleSubmitSignature = () => {\r\n        if (sigPad.current) {\r\n            onSubmit(sigPad.current.getTrimmedCanvas().toDataURL('image/png'));\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        if (sigPad.current) {\r\n            sigPad.current.clear();\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    const handleUploadSignature = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            const form = new FormData();\r\n            form.append(\"files\", event.target.files[0])\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                onSubmit(result.data.files[0].fileUrl);\r\n                onClose();\r\n            } catch (err) {\r\n                setError((err as Error).message);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth='md'>\r\n            <DialogTitle>Add Signature</DialogTitle>\r\n            <DialogContent>\r\n                {error && (\r\n                    <Alert severity='error'>{error}</Alert> \r\n                )}\r\n\r\n                <SignatureCanvas \r\n                    penColor='black'\r\n                    ref={sigPad}\r\n                    canvasProps={{width: 500, height: 200 }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button component='label'>\r\n                    Upload Signature\r\n\r\n                    <input type='file' onChange={handleUploadSignature} hidden />\r\n                </Button>\r\n                <Button onClick={handleSubmitSignature}>Submit Signature</Button>\r\n                <Button color='error' onClick={handleCancel}>Cancel</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet,\r\n    Image\r\n} from '@react-pdf/renderer';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { Form2309Data } from '../../pages/threads/Form2309';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page size={[330.60, 525.60]} style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.purposeNotes ? thread.purposeNotes : thread.purpose.purposeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            {details.signatureUrl ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src={details.signatureUrl} />\r\n                                </View>\r\n                            ) : thread.author.signImage ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src={thread.author.signImage} />\r\n                                </View>\r\n                            ) : (\r\n                                <Text style={styles.emptyCell}></Text>\r\n                            )}\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>{thread.author.officeSection.sectionOffice.refNum}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBoldSmall}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    );\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 15,\r\n      paddingBottom: 15,\r\n      paddingHorizontal: 15,\r\n\r\n    },\r\n    table: { \r\n      width: \"auto\", \r\n      borderStyle: \"solid\", \r\n      borderWidth: 1,\r\n      padding: 2\r\n    },\r\n    tableRow: { \r\n      margin: \"auto\", \r\n      marginTop: 2,\r\n      flexDirection: \"row\" \r\n    }, \r\n    tableCol: { \r\n      width: \"50%\"\r\n    },\r\n    recipientCol: { \r\n      width: \"70%\"\r\n    },\r\n    dateCol: { \r\n      width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n      width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n      height: 30\r\n    },\r\n    tableCellLeftBold: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n  \ttableCellLeftBoldSmall: { \r\n      margin: 2,\r\n      fontSize: 6,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"right\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n  \tsignatureContainer: {\r\n    \tdisplay: \"flex\",\r\n      \tflexDirection: \"row\",\r\n      \tjustifyContent: \"center\"\r\n    },\r\n  \tsignatureImage: {\r\n    \twidth: 60,\r\n      \theight: 30\r\n    }\r\n});\r\n  ","import React from 'react';\r\nimport { Thread, UserAccounts } from '../../api/threads/types';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\n// project imports\r\nimport SignatureDialog from './Signature';\r\n// renderer\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\nimport axios from 'axios';\r\nimport { useMutation } from '@apollo/client';\r\nimport { UPLOAD_SIGNATURE } from '../../api/offices';\r\n\r\n\r\nexport interface Form2309Data {\r\n    subject: string;\r\n    remarks: string;\r\n    signatureUrl: string | null;\r\n}\r\n\r\nexport default function EditForm2309({ userId, thread, onGenerate }: { userId: string, thread: Thread, onGenerate: () => void }) {\r\n    const [uploadSignature, { error }] = useMutation<{ updateSignature: UserAccounts }>(UPLOAD_SIGNATURE);\r\n    const [formData, setFormData] = React.useState<Form2309Data>({\r\n        subject: '',\r\n        remarks: '',\r\n        signatureUrl: null\r\n    });\r\n    const [upload, setUpload] = React.useState<File | null>(null);\r\n    const [open, setOpen] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        setFormData(state => ({\r\n            ...state,\r\n            subject: thread.subject,\r\n            remarks: thread.messages[0].message\r\n        }))\r\n    }, [thread])\r\n\r\n    React.useEffect(() => {\r\n        const uploadForm = async () => {\r\n            if (upload) {\r\n                const form = new FormData();\r\n                form.append(\"form\", upload);\r\n                form.append(\"requestId\", thread.refId);\r\n\r\n                try {\r\n                    const result = await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                    window.open(result.data.fileUrl, \"_blank\");\r\n\r\n                    onGenerate();\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    return\r\n                }\r\n\r\n                setUpload(null);\r\n            }\r\n        }\r\n\r\n        uploadForm();\r\n    }, [upload, onGenerate, thread.refId]);\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const handleUploadForm = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) setUpload(event.target.files[0]);\r\n    }\r\n\r\n    const handleGenerateForm = async (blob: Blob | null, url: string | null) => {\r\n        if (url && blob) {\r\n            window.open(url, \"_blank\");\r\n\r\n            const file = new File([blob], `${thread.refSlipNum}.pdf`, {\r\n                type: \"application/pdf\",\r\n            });\r\n\r\n            const form = new FormData();\r\n            form.append(\"form\", file);\r\n            form.append(\"requestId\", thread.refId);\r\n\r\n            try {\r\n                await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                onGenerate();\r\n            } catch (err) {\r\n                console.log(err);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleToggleSignature = () => setOpen(!open);\r\n\r\n    const handleSubmitESignature = async (url: string) => {\r\n        setFormData({ ...formData, signatureUrl: url });\r\n        await uploadSignature({\r\n            variables: {\r\n                userId: userId,\r\n                signImage: url\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleRemoveSignature = async () => {\r\n        setFormData({ ...formData, signatureUrl: null });\r\n        await uploadSignature({\r\n            variables: {\r\n                userId: userId,\r\n                signImage: null\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n\r\n            {error && (\r\n                <Alert severity='error'>{error.message}</Alert> \r\n            )}\r\n\r\n\r\n            <Stack direction='row' spacing={1} justifyContent='flex-end' alignItems='center'>\r\n                <Button variant='outlined' onClick={handleToggleSignature}>Add Signature</Button>\r\n                {thread.author.signImage && (\r\n                    <Button variant='outlined' color='error' onClick={handleRemoveSignature}>Remove Signature</Button>\r\n                )}\r\n            </Stack>\r\n\r\n            <TextField\r\n                multiline\r\n                rows={2}\r\n                name='subject'\r\n                label='Subject'\r\n                value={formData.subject}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <TextField\r\n                multiline\r\n                rows={3}\r\n                name='remarks'\r\n                label='Remarks'\r\n                value={formData.remarks}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\r\n                {({ blob, url, loading, error }) => (\r\n                     <Button \r\n                        fullWidth \r\n                        onClick={() => handleGenerateForm(blob, url)}\r\n                        variant='contained'>\r\n                            Generate Form 2309\r\n                    </Button>\r\n                )}\r\n            </PDFDownloadLink>\r\n           \r\n            <Button \r\n                fullWidth \r\n                disabled={upload !== null}\r\n                component='label'\r\n                variant='outlined'>\r\n                    Upload Form 2309\r\n\r\n                    <input type='file' hidden onChange={handleUploadForm} />\r\n            </Button>\r\n\r\n            <SignatureDialog \r\n                open={open}\r\n                imageUrl={formData.signatureUrl}\r\n                onSubmit={handleSubmitESignature}\r\n                onClose={handleToggleSignature}\r\n            />\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\nimport Link from '@mui/material/Link';\r\n// types\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n\r\n\r\nexport default function ThreadDirectory(props: { messages: Messages[], reqForm?: string }) {\r\n    const [files, setFiles] = React.useState<MessageFiles[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        let msgFiles: MessageFiles[] = [];\r\n        props.messages.forEach(msg => {\r\n            msgFiles = msgFiles.concat(msg.files)\r\n        });\r\n        setFiles(msgFiles);\r\n\r\n    }, [props.messages])\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n             <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Shared Files\r\n            </Typography>\r\n            <List>\r\n              {props.reqForm && (\r\n                <>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={props.reqForm} target='_blank'>\r\n                                    Form 2309\r\n                                </Typography>\r\n                            }\r\n                            secondary='application/PDF'\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </>\r\n              )}\r\n\r\n              {files.map(file => (\r\n                <React.Fragment key={file.fileId}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={file.fileUrl} target='_blank'>\r\n                                    {file.fileName}\r\n                                </Typography>\r\n                            }\r\n                            secondary={file.fileType}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Stack from '@mui/material/Stack';\r\nimport Alert from '@mui/material/Alert';\r\nimport { ThreadHistory } from '../../api/threads/types';\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function History(props: { history: ThreadHistory[] }) {\r\n\r\n    const handleSeverity = (status: string | null) => {\r\n        if (status && status.includes(\"Closed\")) return \"success\";\r\n        else if (status && status.includes(\"Progress\")) return \"info\";\r\n        else if (status && status.includes(\"Approval\")) return \"warning\";\r\n        else return \"info\"\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n            <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Request History\r\n            </Typography>\r\n            <Stack spacing={2}>\r\n                {props.history.map((event, index) => (\r\n                    <Alert key={index} severity={handleSeverity(event.status ? event.status.statusLabel : null)}>\r\n                        {`${event.historyLabel} ${event.status ? `to ${event.status.statusLabel}`: ''} at ${formatInboxDate(event.dateCreated)}`}\r\n                    </Alert>\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport Form2309 from './Form2309';\r\nimport ReplyBox from './ReplyBox';\r\nimport ThreadDirectory from './Directory';\r\nimport ThreadHistory from './History';\r\nimport { DocumentStatus, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { \r\n    ARCHIVE_THREAD,\r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    RESTORE_THREAD, \r\n    SET_MESSAGE_AS_READ, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\n\r\ninterface TabPaneProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nexport function TabPanel(props: TabPaneProps) {\r\n    return (\r\n        <div>\r\n            {props.value === props.index && props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n  const [archiveThread] = useMutation(ARCHIVE_THREAD);\r\n  const [restoreThread] = useMutation(RESTORE_THREAD);\r\n\r\n  const [tabValue, setTableValue] = React.useState<number>(0);\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const handleArchiveThread = async () => {\r\n    await archiveThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleRestoreThread = async () => {\r\n    await restoreThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const reloadThread = () => refetch({ uid: threadId });\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, refSlipNum, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments, active, recipientUser } = threadData.getThreadById;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                        {`Ref # ${refSlipNum}`}\r\n                    </Typography>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {((userId === threadData.getThreadById.author.accountId && !threadData.getThreadById.purpose.purposeName.includes(\"Approval\")) || \r\n                           (userId !== threadData.getThreadById.author.accountId && threadData.getThreadById.purpose.purposeName.includes(\"Approval\"))) && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                \r\n                {active ? (\r\n                    <Alert \r\n                        severity={completed ? \"success\" : \"info\"}\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button color='error' onClick={handleArchiveThread}>\r\n                                Cancel\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                    </Alert>\r\n                ) : (\r\n                    <Alert \r\n                        severity='error'\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button onClick={handleRestoreThread}>\r\n                                Restore\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        Archived Request\r\n                    </Alert>\r\n                )}\r\n\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {recipientUser ? `${recipientUser.firstName} ${recipientUser.lastName} (${recipient.sectionOffice.refNum})` :\r\n                    `${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\r\n                <Tab label=\"Conversation\" />\r\n                <Tab label=\"Files\" />\r\n                <Tab label=\"History\" />\r\n                {threadData.getThreadById.author.accountId === userId && (\r\n                    <Tab label=\"Form 2309\" />\r\n                )}\r\n            </Tabs>\r\n           \r\n            <TabPanel index={0} value={tabValue}>\r\n                <Box sx={{ p: 2 }}>\r\n                    {messages.map(msg => (\r\n                        <Box \r\n                            key={msg.msgId} \r\n                            sx={{ \r\n                                my: 2, \r\n                                pl: msg.sender.accountId === userId ? 8 : 0,\r\n                                pr: msg.sender.accountId !== userId ? 8 : 0\r\n                            }}\r\n                        >\r\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ p: 2 }}>\r\n                    {!completed && (\r\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                    )}\r\n                </Box>\r\n            </TabPanel>\r\n\r\n            <TabPanel index={1} value={tabValue}>\r\n                <ThreadDirectory messages={threadData.getThreadById.messages} reqForm={threadData.getThreadById.reqForm} />\r\n            </TabPanel>\r\n\r\n            <TabPanel index={2} value={tabValue}>\r\n                <ThreadHistory history={threadData.getThreadById.history} />\r\n            </TabPanel>\r\n\r\n           {threadData.getThreadById.author.accountId === userId && (\r\n                <TabPanel index={3} value={tabValue}>\r\n                    <Form2309 userId={userId} thread={threadData.getThreadById} onGenerate={reloadThread} />\r\n                </TabPanel>\r\n           )}\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["generateOfficeCode","officeCode","sectionCode","concat","CreateThread","props","theme","useTheme","tempRefNum","useQuery","GET_TEMP_REF_NUM","variables","authorId","userId","data","officeSections","GET_BIR_OFFICES","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","threadTags","GET_ALL_THREAD_TAGS","_useQuery6","GET_USER_ACCOUNTS_BY_OFFICES","officeIds","threadOfficers","refetchOfficers","refetch","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","_React$useState8","officers","setOfficers","_React$useState9","subject","statusId","attachments","completed","dateDue","Date","toISOString","tagId","recipientId","recipientUserId","purposeNotes","_React$useState10","formData","setFormData","_React$useState11","message","files","links","_React$useState12","messageData","setMessageData","_React$useState13","_React$useState14","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","refNum","officeId","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","officersObject","getAccountsByOffice","officer","firstName","lastName","accountId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","i","thread","wrap","_context","prev","next","recipient","abrupt","docTypeId","length","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","name","fileType","fileUrl","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","justifyContent","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Typography","fontWeight","getThreadRefNum","Divider","Chip","label","Autocomplete","multiple","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","value","filter","id","renderInput","params","TextField","error","helperText","event","target","onInputChange","select","parseInt","MenuItem","getAllThreadTags","tag","tagName","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","emptyMessages","sub","getTagColor","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","display","flexDirection","FolderCopyIcon","color","fontSize","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","charAt","ListItemText","gutterBottom","component","status","statusLabel","size","threadTag","LinkDialog","setName","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","SignatureDialog","imageUrl","sigPad","setError","handleUploadSignature","_x","SignatureCanvas","penColor","ref","canvasProps","current","getTrimmedCanvas","toDataURL","clear","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","refSlipNum","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","signatureUrl","signatureContainer","Image","signatureImage","src","signImage","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","tableCellLeftBoldSmall","Font","register","family","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","EditForm2309","onGenerate","UPLOAD_SIGNATURE","_useMutation2","uploadSignature","upload","setUpload","state","messages","uploadForm","window","console","log","handleTextChange","_defineProperty","handleGenerateForm","_ref3","_callee2","blob","url","_context2","File","_x2","handleToggleSignature","handleSubmitESignature","_ref4","_callee3","_context3","_x3","handleRemoveSignature","_ref5","_callee4","_context4","PDFDownloadLink","document","_ref6","loading","ThreadDirectory","setFiles","msgFiles","reqForm","ListItem","ListItemIcon","FolderIcon","Link","History","history","index","includes","historyLabel","TabPanel","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","_useMutation5","ARCHIVE_THREAD","archiveThread","_useMutation7","RESTORE_THREAD","restoreThread","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","user","handleStatusChange","handleAttachmentChange","handleArchiveThread","handleRestoreThread","reloadThread","_threadData$getThread","dateUpdated","active","recipientUser","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","getAllThreadStatus","Tabs","e","Tab","pl","pr","msgId","ThreadHistory"],"sourceRoot":""}