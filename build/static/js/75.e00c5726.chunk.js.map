{"version":3,"file":"static/js/75.e00c5726.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","components/Form2309/index.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId?: number;\r\n    docTypeId?: number;\r\n    attachments: boolean;\r\n    completed: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    completed: false,\r\n    dateDue: new Date().toISOString()\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string \r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            officeObject[office.sectionName === \"default\" ?\r\n            office.sectionOffice.officeName :\r\n            office.sectionOffice.officeName + \" — \" + office.sectionName] = office.sectionId;\r\n        })\r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n    }\r\n  }, [officeSections, threadTypes])\r\n\r\n  if (!offices || !types) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.split('/').pop() as string,\r\n                fileType: \"\",\r\n                fileUrl: link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            await sendThreadMessage({ variables: { data: {\r\n                message: messageData.message,\r\n                files: messageFiles,\r\n                senderId: props.userId,\r\n                threadId: threadResult.data.createThread.refId\r\n            }}})\r\n\r\n            props.onCreateThread(threadResult.data.createThread.refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n            <div>\r\n                <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                    <Button \r\n                        variant='contained' \r\n                        endIcon={<SendIcon />}\r\n                        onClick={handleCreateThread}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                    <Tooltip title='Discard'>\r\n                        <IconButton onClick={props.onDiscardThread}>\r\n                            <DeleteOutlinedIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Stack>\r\n                <Divider />\r\n            </div>\r\n        \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                <Autocomplete\r\n                    freeSolo\r\n                    fullWidth\r\n                    options={Object.keys(offices)}\r\n                    onChange={handleRecipientChange}\r\n                    renderInput={(params) => \r\n                        <TextField \r\n                            {...params} \r\n                            variant='standard' \r\n                            error={formError?.recipient !== undefined}\r\n                            helperText={formError && formError.recipient}\r\n                        />\r\n                    }\r\n                />\r\n            </Stack>\r\n        \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                <TextField \r\n                    name='subject'\r\n                    variant='standard'\r\n                    value={formData.subject}\r\n                    onChange={handleSubjectTextChange}\r\n                    fullWidth\r\n                    error={formError?.subject !== undefined}\r\n                    helperText={formError && formError.subject}\r\n                />\r\n            </Stack>\r\n            \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                <Autocomplete\r\n                    freeSolo\r\n                    fullWidth\r\n                    onChange={handleThreadTypeChange}\r\n                    options={Object.keys(types)}\r\n                    renderInput={(params) => \r\n                        <TextField \r\n                            {...params} \r\n                            variant='standard' \r\n                            error={formError?.type !== undefined}\r\n                            helperText={formError && formError.type}\r\n                        />\r\n                    }\r\n                />\r\n            </Stack>\r\n\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                <DatePicker \r\n                    label=\"Date Due\"\r\n                    views={[\"year\", \"month\", \"day\"]}\r\n                    value={dayjs(formData.dateDue)} \r\n                    onChange={handleDateDueChange} \r\n                    format=\"MMMM DD, YYYY\"\r\n                />\r\n            </LocalizationProvider>\r\n\r\n            <FormControlLabel \r\n                control={\r\n                    <Checkbox \r\n                        checked={formData.attachments} \r\n                        onChange={handleToggleAttachments} \r\n                    />\r\n                } \r\n                label=\"Attachments Required\" \r\n            />\r\n\r\n            <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n            <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {formError && formError.general}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    </Paper>\r\n  )\r\n}","import React, { useState } from 'react';\r\n// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Popover from '@mui/material/Popover';\r\n// icons\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [open, setOpen] = useState<Element | null>(null);\r\n\r\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setOpen(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleOpen}\r\n        sx={{\r\n          p: 0,\r\n          mx: 2,\r\n          ...(open && {\r\n            '&:before': {\r\n              zIndex: 1,\r\n              content: \"''\",\r\n              width: '100%',\r\n              height: '100%',\r\n              borderRadius: '50%',\r\n              position: 'absolute',\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n            },\r\n          }),\r\n        }}\r\n      >\r\n        <FilterListIcon />\r\n      </IconButton>\r\n\r\n      <Popover\r\n        open={Boolean(open)}\r\n        anchorEl={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        PaperProps={{\r\n          sx: {\r\n            p: 0,\r\n            mt: 1.5,\r\n            ml: 0.75,\r\n            width: 360,\r\n            '& .MuiMenuItem-root': {\r\n              typography: 'body2',\r\n              borderRadius: 0.75,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            <List\r\n                disablePadding\r\n                subheader={\r\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\r\n                        Thread Types\r\n                    </ListSubheader>\r\n                }\r\n            >\r\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\r\n                  All\r\n                </ListItemButton>\r\n                <Divider sx={{ borderStyle: 'dashed' }} />\r\n\r\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\r\n                  <React.Fragment key={thread.docId}>\r\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\r\n                      {thread.docType}\r\n                    </ListItemButton>\r\n                    <Divider sx={{ borderStyle: 'dashed' }} />\r\n                  </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n      </Popover>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport Chip from '@mui/material/Chip';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport FilterPopover from './FilterPopover';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  mode: string;\r\n  compose: boolean;\r\n  mails?: Thread[];\r\n  onRefresh: () => void;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  },\r\n  \"completed\": {\r\n    title: \"It's time to work!\",\r\n    sub: \"You have no finished threads\"\r\n  },\r\n  \"regionInbox\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"No threads are created yet\"\r\n  }\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={props.mails === undefined} />\r\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n        {props.mode !== \"completed\" && (\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n        )}\r\n        \r\n        <IconButton onClick={props.onRefresh}>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\r\n      </Stack>\r\n      \r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 170px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {props.mails && props.mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\r\n            <React.Fragment key={msg.refId}>\r\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box>\r\n                        <Typography variant='body1' gutterBottom>\r\n                            {msg.subject}\r\n                        </Typography>\r\n                        <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\r\n                        <Typography variant='caption'>\r\n                          {` Due at ${formatInboxDate(msg.dateDue)}`}\r\n                        </Typography>\r\n                    </Box>\r\n                  } \r\n                  secondary={\r\n                    <React.Fragment>\r\n                      <Typography\r\n                        sx={{ display: 'inline' }}\r\n                        component=\"span\"\r\n                        variant=\"subtitle2\"\r\n                        color=\"text.primary\"\r\n                      >\r\n                        {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\r\n                      </Typography>\r\n                      {\" — \" + msg.docType.docType}\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              </ListItemButton>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 500 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: string[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, link ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.split('/').pop() as string,\r\n            fileType: \"\",\r\n            fileUrl: link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={6}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet\r\n} from '@react-pdf/renderer';\r\nimport { Thread } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread }: { thread: Thread }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>REFERENCE SLIP # 03-2020</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{thread.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.docType.docType}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBold}>OTHERS:</Text>\r\n                            <Text style={styles.tableCellLeft}>---</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{thread.messages[0].message}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            <Text style={styles.emptyCell}></Text>\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>Office Code: RR-6</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBold}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n);\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 35,\r\n      paddingBottom: 65,\r\n      paddingHorizontal: 35,\r\n    },\r\n    table: { \r\n      width: \"auto\", \r\n      borderStyle: \"solid\", \r\n      borderWidth: 1,\r\n      padding: 8\r\n    },\r\n    tableRow: { \r\n      margin: \"auto\", \r\n      marginTop: 2,\r\n      flexDirection: \"row\" \r\n    }, \r\n    tableCol: { \r\n      width: \"50%\"\r\n    },\r\n    recipientCol: { \r\n      width: \"70%\"\r\n    },\r\n    dateCol: { \r\n      width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n      width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n      margin: 2,\r\n      fontSize: 14,\r\n      textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n      height: 30\r\n    },\r\n    tableCellLeftBold: { \r\n      margin: 2,\r\n      fontSize: 14,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n      margin: 2,\r\n      fontSize: 14,\r\n      textAlign: \"right\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 2,\r\n        fontSize: 14,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 2,\r\n        fontSize: 12,\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n  ","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Link from '@mui/material/Link';\r\nimport Alert from '@mui/material/Alert';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport ReplyBox from './ReplyBox';\r\nimport { DocumentStatus, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { \r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    SET_MESSAGE_AS_READ, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n  }\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const reloadThread = () => refetch({ uid: threadId });\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, docType, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments } = threadData.getThreadById;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <PDFDownloadLink document={<Form2309 thread={threadData.getThreadById} />} fileName={`${threadData.getThreadById.subject}.pdf`}>\r\n                        {({ blob, url, loading, error }) => (\r\n                            <Link variant='subtitle2' href={url as string} target='_blank' sx={{ textDecoration: 'none', color: 'black' }}>\r\n                                {`${docType.docType} ${!loading && '(Download Form 2309)'}`}\r\n                            </Link>\r\n                        )}\r\n                    </PDFDownloadLink>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {userId === threadData.getThreadById.author.accountId && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                <Alert severity={completed ? \"success\" : \"info\"}>\r\n                    {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                </Alert>\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n           \r\n            <Box sx={{ p: 2 }}>\r\n                {messages.map(msg => (\r\n                    <Box \r\n                        key={msg.msgId} \r\n                        sx={{ \r\n                            my: 2, \r\n                            pl: msg.sender.accountId === userId ? 8 : 0,\r\n                            pr: msg.sender.accountId !== userId ? 8 : 0\r\n                        }}\r\n                    >\r\n                        <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                    </Box>\r\n                ))}\r\n            </Box>\r\n\r\n            <Box sx={{ p: 2 }}>\r\n                {!completed && (\r\n                    <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                )}\r\n            </Box>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["CreateThread","props","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState6","formData","setFormData","_React$useState7","message","files","links","_React$useState8","messageData","setMessageData","_React$useState9","_React$useState10","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","sectionId","typesObject","getAllThreadTypes","type","docType","docId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","split","pop","fileType","fileUrl","concat","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","children","_jsxs","Stack","spacing","sx","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","width","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","name","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","height","borderRadius","position","bgcolor","theme","alpha","palette","grey","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","Box","maxHeight","overflowY","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","thread","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","useTheme","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","id","background","secondary","main","primary","dark","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","filter","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","status","statusLabel","size","component","LinkDialog","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","overflowX","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","Form2309","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","messages","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","Font","register","family","src","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","loading","refetch","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","includes","_x","handleAttachmentChange","_ref3","_callee2","_context2","_x2","reloadThread","_threadData$getThread","dateUpdated","PDFDownloadLink","document","_ref4","blob","url","Link","textDecoration","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","pl","pr","msgId"],"sourceRoot":""}