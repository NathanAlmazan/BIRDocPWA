{"version":3,"file":"static/js/771.c6ed0b40.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/Directory.tsx","pages/threads/History.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentPurpose,\r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_PURPOSE,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId?: number;\r\n    docTypeId?: number;\r\n    purposeId?: number;\r\n    attachments: boolean;\r\n    completed: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport function generateOfficeCode(officeCode?: string, sectionCode?: string) {\r\n    if (officeCode && sectionCode) return ` (${officeCode}-${sectionCode})`;\r\n    else if (officeCode) return ` (${officeCode})`\r\n    else return '';\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const theme = useTheme();\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [purposes, setPurposes] = React.useState<Queue>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    completed: false,\r\n    dateDue: new Date().toISOString()\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string,\r\n    purpose?: string\r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes && threadPurposes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            if (office.sectionName === \"default\") {\r\n                officeObject[office.sectionOffice.officeName + \" — All\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = -(office.sectionOffice.officeId);\r\n                officeObject[office.sectionOffice.officeName + \" — Admin\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            } else {\r\n                officeObject[office.sectionOffice.officeName + \" — \" + office.sectionName + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            }\r\n        })\r\n        \r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n\r\n        let purposesObject: Queue = {};\r\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\r\n            purposesObject[purpose.purposeName] = purpose.purposeId;\r\n        })\r\n        setPurposes(purposesObject);\r\n\r\n    }\r\n  }, [officeSections, threadTypes, threadPurposes])\r\n\r\n  if (!offices || !types || !purposes) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\r\n\r\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.purposeId) {\r\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.name,\r\n                fileType: \"url\",\r\n                fileUrl: link.link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            await sendThreadMessage({ variables: { data: {\r\n                message: messageData.message,\r\n                files: messageFiles,\r\n                senderId: props.userId,\r\n                threadId: threadResult.data.createThread.refId\r\n            }}})\r\n\r\n            props.onCreateThread(threadResult.data.createThread.refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Stack spacing={3} sx={{ p: 2 }}>\r\n                <div>\r\n                    <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                        <Button \r\n                            variant='contained' \r\n                            endIcon={<SendIcon />}\r\n                            onClick={handleCreateThread}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                        <Tooltip title='Discard'>\r\n                            <IconButton onClick={props.onDiscardThread}>\r\n                                <DeleteOutlinedIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Stack>\r\n                    <Divider />\r\n                </div>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(offices)}\r\n                        onChange={handleRecipientChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.recipient !== undefined}\r\n                                helperText={formError && formError.recipient}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField \r\n                        name='subject'\r\n                        variant='standard'\r\n                        value={formData.subject}\r\n                        onChange={handleSubjectTextChange}\r\n                        fullWidth\r\n                        error={formError?.subject !== undefined}\r\n                        helperText={formError && formError.subject}\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadPurposeChange}\r\n                        options={Object.keys(purposes)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.purpose !== undefined}\r\n                                helperText={formError && formError.purpose}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n                \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadTypeChange}\r\n                        options={Object.keys(types)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.type !== undefined}\r\n                                helperText={formError && formError.type}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DatePicker \r\n                        label=\"Date Due\"\r\n                        views={[\"year\", \"month\", \"day\"]}\r\n                        value={dayjs(formData.dateDue)} \r\n                        onChange={handleDateDueChange} \r\n                        format=\"MMMM DD, YYYY\"\r\n                    />\r\n                </LocalizationProvider>\r\n\r\n                <FormControlLabel \r\n                    control={\r\n                        <Checkbox \r\n                            checked={formData.attachments} \r\n                            onChange={handleToggleAttachments} \r\n                        />\r\n                    } \r\n                    label=\"Attachments Required\" \r\n                />\r\n\r\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                        {formError && formError.general}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}","import React, { useState } from 'react';\r\n// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Popover from '@mui/material/Popover';\r\n// icons\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [open, setOpen] = useState<Element | null>(null);\r\n\r\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setOpen(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleOpen}\r\n        sx={{\r\n          p: 0,\r\n          mx: 2,\r\n          ...(open && {\r\n            '&:before': {\r\n              zIndex: 1,\r\n              content: \"''\",\r\n              width: '100%',\r\n              height: '100%',\r\n              borderRadius: '50%',\r\n              position: 'absolute',\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n            },\r\n          }),\r\n        }}\r\n      >\r\n        <FilterListIcon />\r\n      </IconButton>\r\n\r\n      <Popover\r\n        open={Boolean(open)}\r\n        anchorEl={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        PaperProps={{\r\n          sx: {\r\n            p: 0,\r\n            mt: 1.5,\r\n            ml: 0.75,\r\n            width: 360,\r\n            '& .MuiMenuItem-root': {\r\n              typography: 'body2',\r\n              borderRadius: 0.75,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            <List\r\n                disablePadding\r\n                subheader={\r\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\r\n                        Thread Types\r\n                    </ListSubheader>\r\n                }\r\n            >\r\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\r\n                  All\r\n                </ListItemButton>\r\n                <Divider sx={{ borderStyle: 'dashed' }} />\r\n\r\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\r\n                  <React.Fragment key={thread.docId}>\r\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\r\n                      {thread.docType}\r\n                    </ListItemButton>\r\n                    <Divider sx={{ borderStyle: 'dashed' }} />\r\n                  </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n      </Popover>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport Chip from '@mui/material/Chip';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport FilterPopover from './FilterPopover';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  mode: string;\r\n  compose: boolean;\r\n  mails?: Thread[];\r\n  onRefresh: () => void;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  }\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={props.mails === undefined} />\r\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n        {props.mode !== \"completed\" && (\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n        )}\r\n        \r\n        <IconButton onClick={props.onRefresh}>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\r\n      </Stack>\r\n      \r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 170px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {props.mails && props.mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\r\n            <React.Fragment key={msg.refId}>\r\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ mb: 2 }}>\r\n                        <Typography variant='body1' gutterBottom>\r\n                            {msg.subject}\r\n                        </Typography>\r\n                        <div>\r\n                          <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"subtitle2\"\r\n                            color=\"text.primary\"\r\n                          >\r\n                            {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\r\n                          </Typography>\r\n                          {` — ${msg.docType.docType} request For ${msg.purpose.purposeName}.`}\r\n                        </div>\r\n                    </Box>\r\n                  } \r\n                  secondary={\r\n                    <Box sx={{\r\n                      display: 'flex',\r\n                      flexDirection: 'row',\r\n                      justifyContent: 'space-between'\r\n                    }}>\r\n                      <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\r\n                      <Typography variant='caption'>\r\n                        {`Due at ${formatInboxDate(msg.dateDue)}`}\r\n                      </Typography>\r\n                    </Box>\r\n                  }\r\n                />\r\n              </ListItemButton>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (name: string, link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [name, setName] = React.useState<string>(\"\");\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(name, link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"name\"\r\n                    label=\"File Name\"\r\n                    fullWidth\r\n                    value={name}\r\n                    onChange={(event) => setName(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: {\r\n        name: string;\r\n        link: string;\r\n    }[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links.map(link => link.name)))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (name: string, link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, { name, link } ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l.name === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l.name !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.name,\r\n            fileType: \"url\",\r\n            fileUrl: link.link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={4}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet,\r\n    Image\r\n} from '@react-pdf/renderer';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { Form2309Data } from '../../pages/threads/Form2309';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page size={[345.60, 525.60]} style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.purpose.purposeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            {thread.author.signImage ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src=\"https://picsum.photos/200/300?random=1\" />\r\n                                </View>\r\n                            ) : (\r\n                                <Text style={styles.emptyCell}></Text>\r\n                            )}\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>{thread.author.officeSection.sectionOffice.refNum}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBoldSmall}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    );\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 15,\r\n      paddingBottom: 15,\r\n      paddingHorizontal: 15,\r\n\r\n    },\r\n    table: { \r\n      width: \"auto\", \r\n      borderStyle: \"solid\", \r\n      borderWidth: 1,\r\n      padding: 2\r\n    },\r\n    tableRow: { \r\n      margin: \"auto\", \r\n      marginTop: 2,\r\n      flexDirection: \"row\" \r\n    }, \r\n    tableCol: { \r\n      width: \"50%\"\r\n    },\r\n    recipientCol: { \r\n      width: \"70%\"\r\n    },\r\n    dateCol: { \r\n      width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n      width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n      height: 30\r\n    },\r\n    tableCellLeftBold: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n  \ttableCellLeftBoldSmall: { \r\n      margin: 2,\r\n      fontSize: 6,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"right\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n  \tsignatureContainer: {\r\n    \tdisplay: \"flex\",\r\n      \tflexDirection: \"row\",\r\n      \tjustifyContent: \"center\"\r\n    },\r\n  \tsignatureImage: {\r\n    \twidth: 60,\r\n      \theight: 30\r\n    }\r\n});\r\n  ","import React from 'react';\r\nimport { Thread } from '../../api/threads/types';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n// renderer\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\nimport axios from 'axios';\r\n\r\n\r\nexport interface Form2309Data {\r\n    subject: string;\r\n    remarks: string;\r\n}\r\n\r\nexport default function EditForm2309({ thread, onGenerate }: { thread: Thread, onGenerate: () => void }) {\r\n    const [formData, setFormData] = React.useState<Form2309Data>({\r\n        subject: '',\r\n        remarks: ''\r\n    });\r\n    const [upload, setUpload] = React.useState<File | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        setFormData(state => ({\r\n            ...state,\r\n            subject: thread.subject,\r\n            remarks: thread.messages[0].message\r\n        }))\r\n    }, [thread])\r\n\r\n    React.useEffect(() => {\r\n        const uploadForm = async () => {\r\n            if (upload) {\r\n                const form = new FormData();\r\n                form.append(\"form\", upload);\r\n                form.append(\"requestId\", thread.refId);\r\n\r\n                try {\r\n                    const result = await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                    window.open(result.data.fileUrl, \"_blank\");\r\n\r\n                    onGenerate();\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    return\r\n                }\r\n\r\n                setUpload(null);\r\n            }\r\n        }\r\n\r\n        uploadForm();\r\n    }, [upload, onGenerate, thread.refId]);\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const handleUploadForm = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) setUpload(event.target.files[0]);\r\n    }\r\n\r\n    const handleGenerateForm = async (blob: Blob | null, url: string | null) => {\r\n        if (url && blob) {\r\n            window.open(url, \"_blank\");\r\n\r\n            const file = new File([blob], `${thread.refSlipNum}.pdf`, {\r\n                type: \"application/pdf\",\r\n            });\r\n\r\n            const form = new FormData();\r\n            form.append(\"form\", file);\r\n            form.append(\"requestId\", thread.refId);\r\n\r\n            try {\r\n                await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                onGenerate();\r\n            } catch (err) {\r\n                console.log(err);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n            <TextField\r\n                multiline\r\n                rows={2}\r\n                name='subject'\r\n                label='Subject'\r\n                value={formData.subject}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <TextField\r\n                multiline\r\n                rows={3}\r\n                name='remarks'\r\n                label='Remarks'\r\n                value={formData.remarks}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\r\n                {({ blob, url, loading, error }) => (\r\n                     <Button \r\n                        fullWidth \r\n                        onClick={() => handleGenerateForm(blob, url)}\r\n                        variant='contained'>\r\n                            Generate Form 2309\r\n                    </Button>\r\n                )}\r\n            </PDFDownloadLink>\r\n           \r\n            <Button \r\n                fullWidth \r\n                disabled={upload !== null}\r\n                component='label'\r\n                variant='outlined'>\r\n                    Upload Form 2309\r\n\r\n                    <input type='file' hidden onChange={handleUploadForm} />\r\n            </Button>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\nimport Link from '@mui/material/Link';\r\n// types\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n\r\n\r\nexport default function ThreadDirectory(props: { messages: Messages[], reqForm?: string }) {\r\n    const [files, setFiles] = React.useState<MessageFiles[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        let msgFiles: MessageFiles[] = [];\r\n        props.messages.forEach(msg => {\r\n            msgFiles = msgFiles.concat(msg.files)\r\n        });\r\n        setFiles(msgFiles);\r\n\r\n    }, [props.messages])\r\n\r\n    console.log(files);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n             <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Shared Files\r\n            </Typography>\r\n            <List>\r\n              {props.reqForm && (\r\n                <>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={props.reqForm} target='_blank'>\r\n                                    Form 2309\r\n                                </Typography>\r\n                            }\r\n                            secondary='application/PDF'\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </>\r\n              )}\r\n\r\n              {files.map(file => (\r\n                <React.Fragment key={file.fileId}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={file.fileUrl} target='_blank'>\r\n                                    {file.fileName}\r\n                                </Typography>\r\n                            }\r\n                            secondary={file.fileType}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Stack from '@mui/material/Stack';\r\nimport Alert from '@mui/material/Alert';\r\nimport { ThreadHistory } from '../../api/threads/types';\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function History(props: { history: ThreadHistory[] }) {\r\n\r\n    const handleSeverity = (status: string | null) => {\r\n        if (status && status.includes(\"Closed\")) return \"success\";\r\n        else if (status && status.includes(\"Progress\")) return \"info\";\r\n        else if (status && status.includes(\"Approval\")) return \"warning\";\r\n        else return \"info\"\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n            <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Request History\r\n            </Typography>\r\n            <Stack spacing={2}>\r\n                {props.history.map(event => (\r\n                    <Alert severity={handleSeverity(event.status ? event.status.statusLabel : null)}>\r\n                        {`${event.historyLabel} ${event.status ? `to ${event.status.statusLabel}`: ''} at ${formatInboxDate(event.dateCreated)}`}\r\n                    </Alert>\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport Form2309 from './Form2309';\r\nimport ReplyBox from './ReplyBox';\r\nimport ThreadDirectory from './Directory';\r\nimport ThreadHistory from './History';\r\nimport { DocumentStatus, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { \r\n    ARCHIVE_THREAD,\r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    RESTORE_THREAD, \r\n    SET_MESSAGE_AS_READ, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\n\r\ninterface TabPaneProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nexport function TabPanel(props: TabPaneProps) {\r\n    return (\r\n        <div>\r\n            {props.value === props.index && props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n  const [archiveThread] = useMutation(ARCHIVE_THREAD);\r\n  const [restoreThread] = useMutation(RESTORE_THREAD);\r\n\r\n  const [tabValue, setTableValue] = React.useState<number>(0);\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const handleArchiveThread = async () => {\r\n    await archiveThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleRestoreThread = async () => {\r\n    await restoreThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const reloadThread = () => refetch({ uid: threadId });\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, refSlipNum, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments, active } = threadData.getThreadById;\r\n\r\n  console.log(active)\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                        {`Ref # ${refSlipNum}`}\r\n                    </Typography>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {((userId === threadData.getThreadById.author.accountId && !threadData.getThreadById.purpose.purposeName.includes(\"Approval\")) || \r\n                           (userId !== threadData.getThreadById.author.accountId && threadData.getThreadById.purpose.purposeName.includes(\"Approval\"))) && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                \r\n                {active ? (\r\n                    <Alert \r\n                        severity={completed ? \"success\" : \"info\"}\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button color='error' onClick={handleArchiveThread}>\r\n                                Cancel\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                    </Alert>\r\n                ) : (\r\n                    <Alert \r\n                        severity='error'\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button onClick={handleRestoreThread}>\r\n                                Restore\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        Archived Request\r\n                    </Alert>\r\n                )}\r\n\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\r\n                <Tab label=\"Conversation\" />\r\n                <Tab label=\"Files\" />\r\n                <Tab label=\"History\" />\r\n                {threadData.getThreadById.author.accountId === userId && (\r\n                    <Tab label=\"Form 2309\" />\r\n                )}\r\n            </Tabs>\r\n           \r\n            <TabPanel index={0} value={tabValue}>\r\n                <Box sx={{ p: 2 }}>\r\n                    {messages.map(msg => (\r\n                        <Box \r\n                            key={msg.msgId} \r\n                            sx={{ \r\n                                my: 2, \r\n                                pl: msg.sender.accountId === userId ? 8 : 0,\r\n                                pr: msg.sender.accountId !== userId ? 8 : 0\r\n                            }}\r\n                        >\r\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ p: 2 }}>\r\n                    {!completed && (\r\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                    )}\r\n                </Box>\r\n            </TabPanel>\r\n\r\n            <TabPanel index={1} value={tabValue}>\r\n                <ThreadDirectory messages={threadData.getThreadById.messages} reqForm={threadData.getThreadById.reqForm} />\r\n            </TabPanel>\r\n\r\n            <TabPanel index={2} value={tabValue}>\r\n                <ThreadHistory history={threadData.getThreadById.history} />\r\n            </TabPanel>\r\n\r\n           {threadData.getThreadById.author.accountId === userId && (\r\n                <TabPanel index={3} value={tabValue}>\r\n                    <Form2309 thread={threadData.getThreadById} onGenerate={reloadThread} />\r\n                </TabPanel>\r\n           )}\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["generateOfficeCode","officeCode","sectionCode","concat","CreateThread","props","theme","useTheme","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState8","formData","setFormData","_React$useState9","message","files","links","_React$useState10","messageData","setMessageData","_React$useState11","_React$useState12","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","refNum","officeId","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","name","fileType","fileUrl","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","thread","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","id","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","filter","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","component","status","statusLabel","size","LinkDialog","setName","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","refSlipNum","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","signImage","signatureContainer","Image","signatureImage","src","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","tableCellLeftBoldSmall","Font","register","family","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","EditForm2309","onGenerate","upload","setUpload","state","messages","uploadForm","window","console","log","handleTextChange","_defineProperty","handleGenerateForm","_ref3","_callee2","blob","url","_context2","File","_x","_x2","PDFDownloadLink","document","_ref4","loading","ThreadDirectory","setFiles","msgFiles","reqForm","ListItem","ListItemIcon","FolderIcon","Link","History","history","includes","historyLabel","TabPanel","index","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","refetch","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","_useMutation5","ARCHIVE_THREAD","archiveThread","_useMutation7","RESTORE_THREAD","restoreThread","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","handleAttachmentChange","handleArchiveThread","_callee3","_context3","handleRestoreThread","_ref5","_callee4","_context4","reloadThread","_threadData$getThread","dateUpdated","active","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","Tabs","e","Tab","pl","pr","msgId","ThreadHistory"],"sourceRoot":""}