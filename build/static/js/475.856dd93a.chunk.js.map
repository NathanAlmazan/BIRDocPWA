{"version":3,"file":"static/js/475.856dd93a.chunk.js","mappings":"0YA8Be,SAASA,EAAeC,GAAsC,IAAnCC,EAAQD,EAARC,SAChCC,GAAQC,EAAAA,EAAAA,KACNC,GAASC,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAA7CH,KACRI,EAAkCC,EAAAA,SAVtC,WACI,IAAMC,EAAU,IAAIC,KAGpB,OAFAD,EAAQE,QAAQF,EAAQG,UAAY,IAE7BH,CACX,CAK6DI,GAAoBC,eAAcC,GAAAC,EAAAA,EAAAA,GAAAT,EAAA,GAApFU,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAA8BX,EAAAA,UAAuB,IAAIE,MAAOI,eAAcM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvEE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAqCC,EAAAA,EAAAA,GAAkDC,EAAAA,GAA6B,CAChHC,UAAW,CACP1B,SAAUA,EACViB,UAAWA,EACXI,QAASA,EACTM,UAAWxB,EAAOA,EAAKwB,UAAY,QAL7BC,EAASL,EAAfM,KAAiBC,EAAOP,EAAPO,QAQXC,GAAgBP,EAAAA,EAAAA,GAAiDQ,EAAAA,IAAvEH,KACMI,GAAiBT,EAAAA,EAAAA,GAAmDU,EAAAA,IAA1EL,KAERM,EAAwC3B,EAAAA,WAAqB4B,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAtDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAAsC/B,EAAAA,SAGjC,IAAGgC,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAHDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAKlChC,EAAAA,WAAgB,WACZ,GAAIoB,GAAaG,GAAeE,EAAc,CAC1C,IAAQU,EAAY1C,EAAM2C,QAAQC,KAA1BF,QACFG,EAAU7C,EAAM2C,QAAQG,KAAK,KAC7BC,EAAU/C,EAAM2C,QAAQG,KAAK,KAEnCT,EAAgB,CACZW,MAAO,CACHC,GAAI,YACJC,SAAS,EACTC,QAAS,CACLC,MAAM,GAEVC,KAAM,CACFC,SAAS,IAGjBC,OAAQC,EACRC,WAAY,CACR,CACIC,WAAY,IACZC,QAAS,CACLC,OAAQ,CACJC,SAAU,SACVC,SAAU,GACVC,QAAS,MAKzBC,MAAO,CACHC,KAAM,WACNC,WAAYpC,EAAYqC,kBAAkBC,KAAI,SAAAH,GAAI,OAAIA,EAAKI,OAAO,IAClEC,OAAQ,CACJC,MAAO,CACHhB,OAAQ,CAACb,EAASA,EAASA,EAASA,EAASA,EAASA,EAASA,EAASA,EAASA,EAASA,EAASA,EAASA,GAC5G8B,SAAU,SAItBC,MAAO,CACHH,OAAQ,CACJC,MAAO,CACHhB,OAAQ,CAACb,MAIrBgC,KAAM,CACFC,YAAa9B,EACbO,MAAM,GAEVwB,QAAS,CACL5E,MAAO,SAEX6E,YAAa,CACTC,IAAK,CACDC,YAAY,EACZC,YAAa,QAGrBpB,OAAQ,CACJR,MAAM,EACNS,SAAU,MACVW,SAAU,OACVS,WAAW,uBACXnB,QAAS,GACTQ,OAAQ,CACJY,iBAAiB,EACjB3B,OAAQR,GAEZoC,QAAS,CACLC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GAEZC,WAAY,CACRR,WAAY,GACZS,SAAU,IAGlBC,KAAM,CACFxB,KAAM,SAEVyB,WAAY,CACRpC,SAAS,KASjBb,EAAeT,EAAa2D,mBAAmBvB,KAAI,SAAAwB,GAAM,MAAK,CAC1DC,KAAMD,EAAOE,YACblE,KAAME,EAAYqC,kBAAkBC,KAAI,SAAAH,GACpC,IAAMrC,EAAOD,EAAUoE,uBAAuBC,QAAO,SAAAC,GAAC,OAAIA,EAAEL,OAAOM,WAAaN,EAAOM,UAAYD,EAAE5B,QAAQ8B,QAAUlC,EAAKkC,KAAK,IAEjI,OAAIvE,EAAKwE,OAAS,EAAUxE,EAAKyE,QAAO,SAACC,EAAKC,GAAC,OAAKD,EAAMC,EAAEC,KAAK,GAAE,GAC5D,CACX,IACH,IACL,CACJ,GAAG,CAAC7E,EAAWG,EAAaE,EAAchC,IAwB1C,OACIyG,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACDC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPC,OACIL,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAAAJ,SAAA,EACAC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,KAAIN,SAAA,GAAAO,OACP,OAATvF,QAAS,IAATA,OAAS,EAATA,EAAWoE,uBAAuBM,QAAO,SAACC,EAAKa,GAAC,OAAKb,EAAMa,EAAEX,KAAK,GAAE,OAE5EI,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,QAAON,SAAC,uBAKpCS,QACIR,EAAAA,EAAAA,KAACS,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAaZ,UAC5CF,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAEf,SAAA,EAC1BC,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CACPC,MAAM,oBACNC,MAAO,CAAC,OAAQ,QAAS,OACzBC,MAAOC,IAAM/G,GACbgH,SA1CF,SAACC,GACvBA,IACAhH,EAAagH,EAAKpH,eAClBgB,EAAQ,CACJ9B,SAAUA,EACViB,UAAWiH,EAAKpH,cAChBO,QAASA,IAGrB,EAkCgC8G,OAAO,mBAEXtB,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CACPC,MAAM,kBACNC,MAAO,CAAC,OAAQ,QAAS,OACzBC,MAAOC,IAAM3G,GACb4G,SAtCJ,SAACC,GACrBA,IACA5G,EAAW4G,EAAKpH,eAChBgB,EAAQ,CACJ9B,SAAUA,EACViB,UAAWA,EACXI,QAAS6G,EAAKpH,gBAG1B,EA8BgCqH,OAAO,0BAM/BtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAW,CAAAxB,SACPvE,IACGwE,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CAACnE,KAAK,MAAMoB,OAAQ,IAAK1B,QAASvB,EAAciG,OAAQ7F,QAKlF,C,2CCxMM8F,GAAqBC,EAAAA,EAAAA,IAAO,MAAPA,EAAc,SAAAzI,GAAA,IAAGE,EAAKF,EAALE,MAAK,MAAQ,CACvDqF,OAJmB,IAKnBmD,UAAWxI,EAAM0H,QAAQ,GACzB,2BAA4B,CAAErC,OANX,KAOnB,4DAA6D,CAC3DoD,SAAU,WAEZ,uBAAwB,CACtBpD,OAVkB,GAWlBqD,aAAc,SACd7E,SAAU,sBACV8E,UAAU,aAADzB,OAAelH,EAAM2C,QAAQiG,SACtCC,IAAI,QAAD3B,OAAU4B,IAA4B,mBAE5C,IASc,SAASC,EAAgBC,GAAkD,IAA/CjJ,EAAQiJ,EAARjJ,SAAUkJ,EAASD,EAATC,UAC7CjJ,GAAQC,EAAAA,EAAAA,KACNC,GAASC,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAA7CH,KACM4B,GAAgBP,EAAAA,EAAAA,GAAiDQ,EAAAA,IAAvEH,KACMD,GAAcJ,EAAAA,EAAAA,GAA8C2H,EAAAA,GAA+B,CACvGzH,UAAW,CACT1B,SAAUA,EACVkJ,UAAWA,EACXvH,UAAWxB,EAAOA,EAAKwB,UAAY,QAJ/BE,KAORtB,EAAsCC,EAAAA,SAAyB,IAAGO,GAAAC,EAAAA,EAAAA,GAAAT,EAAA,GAA3D6I,EAAWrI,EAAA,GAAEsI,EAActI,EAAA,GAE5BsB,EAgDD,SAAkBuB,GACvB,IAAM3D,GAAQC,EAAAA,EAAAA,KAERoJ,EAAc,CAClBjG,MAAM,EACNwE,MAAO,QACP0B,MAAOtJ,EAAM2C,QAAQC,KAAK2G,UAC1B/E,SAAUxE,EAAMwJ,WAAWC,UAAUjF,SACrCkF,WAAY1J,EAAMwJ,WAAWC,UAAUC,WACvCC,WAAY3J,EAAMwJ,WAAWC,UAAUE,YAGnCC,EAAc,CAClB7F,QAAS,EACTuF,MAAOtJ,EAAM2C,QAAQC,KAAKF,QAC1B8B,SAAUxE,EAAMwJ,WAAWK,GAAGrF,SAC9BkF,WAAY1J,EAAMwJ,WAAWK,GAAGH,WAChCC,WAAY3J,EAAMwJ,WAAWK,GAAGF,YAG5BG,EAAc,CAElBvG,OAAQ,CACNvD,EAAM2C,QAAQD,QAAQqH,KACtB/J,EAAM2C,QAAQqH,QAAQD,KACtB/J,EAAM2C,QAAQsH,KAAKF,KACnB/J,EAAM2C,QAAQuH,MAAMH,KACpB/J,EAAM2C,QAAQwH,QAAQJ,KACtB/J,EAAM2C,QAAQqH,QAAQI,KACtBpK,EAAM2C,QAAQwH,QAAQJ,KACtB/J,EAAM2C,QAAQsH,KAAKG,KACnBpK,EAAM2C,QAAQsH,KAAKI,OAIrBrH,MAAO,CACLG,QAAS,CAAEC,MAAM,GACjBC,KAAM,CAAEC,SAAS,GAEjBgH,UAAWtK,EAAM2C,QAAQC,KAAK2H,SAC9BtF,WAAYjF,EAAMwJ,WAAWvE,YAI/BuF,OAAQ,CACNC,MAAO,CACLzE,OAAQ,CACN/B,KAAM,UACN6D,MAAO,MAGX4C,OAAQ,CACN1E,OAAQ,CACN/B,KAAM,SACN6D,MAAO,OAMbrC,KAAM,CACJkF,QAAS,EACTC,SAAU,CACR3G,KAAM,WACN4G,eAAgB,EAChBC,YAAa,GACbC,UAAW,EACXC,MAAO,CAAC,EAAG,OAKftF,WAAY,CAAEpC,SAAS,GAGvB2H,OAAQ,CACN7F,MAAO,EACP8F,MAAO,SACPC,QAAS,SAIXzG,KAAM,CACJ0G,gBAAiB,EACjBzG,YAAa3E,EAAM2C,QAAQiG,QAC3B5E,MAAO,CACLqH,MAAO,CACLjI,MAAM,KAMZY,MAAO,CACLsH,WAAY,CAAElI,MAAM,GACpBmI,UAAW,CAAEnI,MAAM,IAIrB+B,QAAS,CACPqG,KAAM,EACNC,aAAczL,EAAM2C,QAAQ+I,WAAWC,OAIzC/G,QAAS,CACPgH,EAAG,CACDxI,MAAM,IAKVQ,OAAQ,CACNR,MAAM,GAIRyB,YAAa,CAEXC,IAAK,CACH+G,aAAc,EACd7G,YAAa,MACb8G,wBAAyB,MACzBC,wBAAyB,QAI3BC,IAAK,CACHC,MAAO,CACL3H,OAAQ,CACNlB,MAAM,EACN0E,MAAO8B,EACPsC,MAAO7C,KAMb8C,UAAW,CACTC,MAAO,CACLC,YAAa,OACbX,YAAYY,EAAAA,EAAAA,IAAMtM,EAAM2C,QAAQG,KAAK,KAAM,MAE7C4C,WAAY,CACVoC,MAAO8B,EACPsC,MAAO7C,IAKXkD,MAAO,CACLC,SAAU,CACR/G,KAAM,CAAElC,OAAQ,CAAC,gBACjBkI,aAAczL,EAAM2C,QAAQiG,QAC5B6D,gBAAiBzM,EAAM2C,QAAQiG,UAKnC8D,UAAW,CACTC,MAAO,CACLC,YAAa5M,EAAM2C,QAAQiG,SAE7BiE,OAAQ,CACNJ,gBAAiBzM,EAAM2C,QAAQiG,WAMrCnF,WAAY,CACV,CAEEC,WAAY1D,EAAM8M,YAAYC,OAAOC,GACrCrJ,QAAS,CACPkB,YAAa,CAAEC,IAAK,CAAEE,YAAa,UAGvC,CAEEtB,WAAY1D,EAAM8M,YAAYC,OAAOE,GACrCtJ,QAAS,CACPkB,YAAa,CAAEC,IAAK,CAAEE,YAAa,YAM3C,OAAOkI,IAAMpD,EAAanG,EAC5B,CA7OuBwJ,CAAS,CAC5B5J,OAAQC,EACRc,OAAQxC,EAAcA,EAAYqC,kBAAkBC,KAAI,SAAAH,GAAI,OAAIA,EAAKI,OAAO,IAAI,GAChF4G,OAAQ,CAAE1H,OAAQ,CAACvD,EAAM2C,QAAQ+I,WAAWC,QAC5C/H,OAAQ,CAAEwJ,UAAU,EAAMC,gBAAiB,UAC3C3H,WAAY,CAAEpC,SAAS,EAAOgK,WAAY,CAAEhK,SAAS,IACrDsB,QAAS,CACP2I,iBAAiB,EACjBC,EAAG,CACDC,UAAW,SAACC,GAAkB,OAAKA,EAAWC,QAAQ,EAAE,EACxD7G,MAAO,CACL2G,UAAW,SAACC,GAAkB,SAAAxG,OAAQwG,EAAU,OAkBxD,OAZAnN,EAAAA,WAAgB,WACVoB,GAAaG,GAEfsH,EAAetH,EAAYqC,kBAAkBC,KAAI,SAAAH,GAC/C,IAAMrC,EAAOD,EAAUiM,mBAAmB5H,QAAO,SAAAO,GAAC,OAAIA,EAAElC,QAAQ8B,QAAUlC,EAAKkC,KAAK,IAEpF,OAAIvE,EAAKwE,OAAS,EAAUxE,EAAKyE,QAAO,SAACC,EAAKa,GAAC,OAAKb,EAAMa,EAAEX,KAAK,GAAE,GAC5D,CACT,IAEJ,GAAG,CAAC7E,EAAWG,KAGb2E,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,OACRF,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,KAAIN,SACrBsC,EAAY,sBAAwB,yBAK3CrC,EAAAA,EAAAA,KAAC0B,EAAkB,CAACuF,IAAI,MAAKlH,UAC3BC,EAAAA,EAAAA,KAACkH,EAAAA,EAAc,CAAC7J,KAAK,QAAQoE,OAAQc,EAAaxF,QAASvB,EAAciD,OAAQ,UAIzF,C,gEC1Ee,SAAS0I,EAASjO,GAA8B,IAA3BkO,EAAMlO,EAANkO,OAC1BC,GAAWC,EAAAA,EAAAA,MACHC,GAAU5M,EAAAA,EAAAA,GAAuC6M,EAAAA,GAAkB,CAC7E3M,UAAW,CACTuM,OAAQA,KAFNpM,KAMV,OACE6E,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,MAAM,gBAEhBL,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAACsH,GAAI,CAAEC,UAAW,IAAKC,UAAW,QAAS5H,SAAA,CACT,KAA5B,OAALwH,QAAK,IAALA,OAAK,EAALA,EAAOK,eAAepI,UAClBK,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAACsH,GAAI,CAAEI,QAAS,OAAQpJ,OAAQ,IAAKqJ,eAAgB,SAAUC,WAAY,SAAUC,cAAe,UAAWjI,SAAA,EAChHC,EAAAA,EAAAA,KAACiI,EAAAA,EAAW,CAACvF,MAAM,YAAY+E,GAAI,CAAE7J,SAAU,GAAIsK,GAAI,MACvDlI,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,YAAWN,SAAC,oBAGhCC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,QAAON,SAAC,oCAKpCC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACE,QAAS,EAAG2G,GAAI,CAAEU,EAAG,EAAGC,GAAI,GAAIrI,SAC7B,OAALwH,QAAK,IAALA,OAAK,EAALA,EAAOK,eAAepK,KAAI,SAAC6K,GAAI,OAC5BrI,EAAAA,EAAAA,KAACsI,EAAQ,CAAkBD,KAAMA,GAAlBA,EAAKE,MAAqB,UAKrDvI,EAAAA,EAAAA,KAACwI,EAAAA,EAAO,KAERxI,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACsH,GAAI,CAAEU,EAAG,EAAGM,UAAW,SAAU1I,UAClCC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAM,CAAC9D,KAAK,QAAQlC,MAAM,UAAUiG,SAAS3I,EAAAA,EAAAA,KAAC4I,EAAAA,EAAmB,IAAKC,QAAS,kBAAMxB,EAAS,aAAa,EAACtH,SAAC,iBAM1H,CAQA,IAAM+I,EAAkB,SAACzH,GAErB,OADe,IAAIxH,KAAKwH,GACV0H,wBAAmBC,EAAW,CAAEC,QAAS,QAASC,KAAM,UAAWC,MAAO,QAASC,IAAK,WAC1G,EAEA,SAASd,EAAQlG,GAA2B,IAAxBiG,EAAIjG,EAAJiG,KACVgB,EAA0ChB,EAA1CgB,QAASC,EAAiCjB,EAAjCiB,OAAQ7L,EAAyB4K,EAAzB5K,QAAS8L,EAAgBlB,EAAhBkB,YAElC,OACE1J,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACC,UAAU,MAAMkH,WAAW,SAASjH,QAAS,EAAEf,SAAA,EAClDC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAM,CAAC/B,GAAI,CAAEjJ,MAAO,GAAIC,OAAQ,IAAKsB,SAAA,GAAAO,OAC9BgJ,EAAOG,UAAUC,OAAO,IAAEpJ,OAAGgJ,EAAOK,SAASD,OAAO,OAG5D7J,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAACsH,GAAI,CAAEmC,SAAU,IAAKC,SAAU,GAAI9J,SAAA,EACpCC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACsC,MAAM,UAAUrC,QAAQ,YAAYyJ,QAAM,EAAA/J,SACjDsJ,KAGLrJ,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,QAAQoH,GAAI,CAAE/E,MAAO,kBAAoBoH,QAAM,EAAA/J,SAAA,GAAAO,OAC3DgJ,EAAOG,UAAS,KAAAnJ,OAAIgJ,EAAOK,SAAQ,YAAArJ,OAAM7C,EAAQA,eAIzDuC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,UAAUoH,GAAI,CAAEW,GAAI,EAAG2B,WAAY,EAAGrH,MAAO,kBAAmB3C,SAAA,cAAAO,OACjEwI,EAAgBS,QAI/C,CC5Fe,SAASS,IACpB,IAAAC,GAAwB1Q,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAApDyQ,EAAGD,EAAHC,IAAKC,EAAMF,EAANE,OAEb,OACItK,EAAAA,EAAAA,MAACuK,EAAAA,GAAI,CAACC,WAAS,EAACvJ,QAAS,EAAG2G,GAAI,CAAEC,UAAW,qBAAsBC,UAAW,OAAQ2C,GAAI,EAAGC,GAAI,GAAIxK,SAAA,EACjGC,EAAAA,EAAAA,KAACoK,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIpE,GAAI,GAAGtG,UACtBC,EAAAA,EAAAA,KAAC/G,EAAe,CAACE,SAAgB,OAANgR,QAAM,IAANA,OAAM,EAANA,EAAQO,eAEvC1K,EAAAA,EAAAA,KAACoK,EAAAA,GAAI,CAACI,MAAI,EAACnE,GAAI,GAAIsE,GAAI,EAAE5K,UACrBC,EAAAA,EAAAA,KAACmC,EAAgB,CACbhJ,SAAgB,OAANgR,QAAM,IAANA,OAAM,EAANA,EAAQO,UAClBrI,WAAW,OAGnBrC,EAAAA,EAAAA,KAACoK,EAAAA,GAAI,CAACI,MAAI,EAACnE,GAAI,GAAIsE,GAAI,EAAE5K,UACrBC,EAAAA,EAAAA,KAACmC,EAAgB,CACbhJ,SAAgB,OAANgR,QAAM,IAANA,OAAM,EAANA,EAAQO,UAClBrI,WAAW,OAGnBrC,EAAAA,EAAAA,KAACoK,EAAAA,GAAI,CAACI,MAAI,EAACnE,GAAI,GAAIsE,GAAI,EAAE5K,UACrBC,EAAAA,EAAAA,KAACmH,EAAS,CAACC,OAAQ8C,QAInC,CAEO,IAAMtN,EAAc,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,U","sources":["pages/dashboard/StatusReportBar.tsx","pages/dashboard/TypesReportDonut.tsx","pages/dashboard/UserTasks.tsx","pages/dashboard/index.tsx"],"sourcesContent":["import React from 'react';\n// mui\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport Stack from '@mui/material/Stack';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport Chart from 'react-apexcharts';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_DOCUMENT_TYPE_ANALYTICS } from '../../api/offices';\nimport { DocumentStatus, DocumentTypes, Analytics } from '../../api/threads/types';\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { chartColors } from '.';\nimport { useAppSelector } from '../../redux/hooks';\n\n\nfunction getWeekBeforeDate() {\n    const current = new Date();\n    current.setDate(current.getDate() - 30);\n\n    return current;\n}\n\nexport default function StatusReportBar({ officeId }: { officeId: number }) {\n    const theme = useTheme();\n    const { role } = useAppSelector((state) => state.auth);\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\n    const { data: analytics, refetch } = useQuery<{ getThreadTypeAnalytics: Analytics[] }>(GET_DOCUMENT_TYPE_ANALYTICS, {\n        variables: {\n            officeId: officeId,\n            startDate: startDate,\n            endDate: endDate,\n            superuser: role ? role.superuser : null\n        }\n    });\n    const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\n\n    const [chartOptions, setChartOptions] = React.useState<any>();\n    const [chartSeries, setChartSeries] = React.useState<{\n        name: string;\n        data: number[];\n    }[]>([])\n\n    React.useEffect(() => {\n        if (analytics && threadTypes && threadStatus) {\n            const { primary } = theme.palette.text;\n            const grey200 = theme.palette.grey[200];\n            const grey500 = theme.palette.grey[500];\n\n            setChartOptions({\n                chart: {\n                    id: 'bar-chart',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: true\n                    }\n                },\n                colors: chartColors,\n                responsive: [\n                    {\n                        breakpoint: 500,\n                        options: {\n                            legend: {\n                                position: 'bottom',\n                                offsetX: -10,\n                                offsetY: 0\n                            }\n                        }\n                    }\n                ],\n                xaxis: {\n                    type: 'category',\n                    categories: threadTypes.getAllThreadTypes.map(type => type.docType),\n                    labels: {\n                        style: {\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\n                            fontSize: '8px'\n                        }\n                    }\n                },\n                yaxis: {\n                    labels: {\n                        style: {\n                            colors: [primary]\n                        }\n                    }\n                },\n                grid: {\n                    borderColor: grey200,\n                    show: true\n                },\n                tooltip: {\n                    theme: 'light'\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: false,\n                        columnWidth: '50%'\n                    }\n                },\n                legend: {\n                    show: true,\n                    position: 'top',\n                    fontSize: '14px',\n                    fontFamily: `'Roboto', sans-serif`,\n                    offsetX: 20,\n                    labels: {\n                        useSeriesColors: false,\n                        colors: grey500\n                    },\n                    markers: {\n                        width: 16,\n                        height: 16,\n                        radius: 5\n                    },\n                    itemMargin: {\n                        horizontal: 15,\n                        vertical: 8\n                    },\n                },\n                fill: {\n                    type: 'solid'\n                },\n                dataLabels: {\n                    enabled: false\n                }\n            })\n\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\n            //     name: status.statusLabel,\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\n            // })))\n\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\n                name: status.statusLabel,\n                data: threadTypes.getAllThreadTypes.map(type => {\n                    const data = analytics.getThreadTypeAnalytics.filter(s => s.status.statusId === status.statusId && s.docType.docId === type.docId);\n\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\n                    return 0;\n                })\n            })))\n        }\n    }, [analytics, threadTypes, threadStatus, theme]);\n\n    const handleStartDateChange = (date: Dayjs | null) => {\n        if (date) {\n            setStartDate(date.toISOString());\n            refetch({\n                officeId: officeId,\n                startDate: date.toISOString(),\n                endDate: endDate\n            })\n        }\n    }\n\n    const handleEndDateChange = (date: Dayjs | null) => {\n        if (date) {\n            setEndDate(date.toISOString());\n            refetch({\n                officeId: officeId,\n                startDate: startDate,\n                endDate: date.toISOString()\n            })\n        }\n    }\n\n    return (\n        <Card>\n            <CardHeader \n                title={\n                    <Box>\n                        <Typography variant='h4'>\n                            {`${analytics?.getThreadTypeAnalytics.reduce((sum, a) => sum + a.count, 0)}`}\n                        </Typography>\n                        <Typography variant='body2'>\n                            Total Documents\n                        </Typography>\n                    </Box>\n                }\n                action={\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <Stack direction='row' spacing={1}>\n                                <DatePicker \n                                    label=\"Report Start Date\"\n                                    views={[\"year\", \"month\", \"day\"]}\n                                    value={dayjs(startDate)} \n                                    onChange={handleStartDateChange} \n                                    format=\"MMMM DD, YYYY\"\n                                />\n                                <DatePicker \n                                    label=\"Report End Date\"\n                                    views={[\"year\", \"month\", \"day\"]}\n                                    value={dayjs(endDate)} \n                                    onChange={handleEndDateChange} \n                                    format=\"MMMM DD, YYYY\"\n                                />\n                        </Stack>\n                    </LocalizationProvider>\n                }\n            />\n            <CardContent>\n                {chartOptions && (\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\n                )}\n            </CardContent>\n        </Card>\n    )\n}\n\n\n","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport merge from 'lodash/merge';\n// @mui\nimport { useTheme, styled, alpha } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport { Card, CardHeader } from '@mui/material';\n// api\nimport { useQuery } from '@apollo/client';\nimport { Analytics, DocumentTypes } from '../../api/threads/types';\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { GET_DOCUMENT_STATUS_ANALYTICS } from '../../api/offices';\nimport { chartColors } from '.';\nimport { useAppSelector } from '../../redux/hooks';\n\n// ----------------------------------------------------------------------\n\nconst CHART_HEIGHT = 350;\nconst LEGEND_HEIGHT = 72;\n\nconst StyledChartWrapper = styled('div')(({ theme }) => ({\n  height: CHART_HEIGHT,\n  marginTop: theme.spacing(5),\n  '& .apexcharts-canvas svg': { height: CHART_HEIGHT },\n  '& .apexcharts-canvas svg,.apexcharts-canvas foreignObject': {\n    overflow: 'visible',\n  },\n  '& .apexcharts-legend': {\n    height: LEGEND_HEIGHT,\n    alignContent: 'center',\n    position: 'relative !important',\n    borderTop: `solid 1px ${theme.palette.divider}`,\n    top: `calc(${CHART_HEIGHT - LEGEND_HEIGHT}px) !important`,\n  },\n}));\n\n// ----------------------------------------------------------------------\n\ninterface TypesReportDonutProps {\n    officeId: number;\n    completed: boolean;\n}\n\nexport default function TypesReportDonut({ officeId, completed }: TypesReportDonutProps) {\n  const theme = useTheme();\n  const { role } = useAppSelector((state) => state.auth);\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const { data: analytics } = useQuery<{ getStatusAnalytics: Analytics[] }>(GET_DOCUMENT_STATUS_ANALYTICS, {\n    variables: {\n      officeId: officeId,\n      completed: completed,\n      superuser: role ? role.superuser : null\n    }\n  });\n  const [chartValues, setChartValues] = React.useState<number[]>([]);\n\n  const chartOptions = useChart({\n    colors: chartColors,\n    labels: threadTypes ? threadTypes.getAllThreadTypes.map(type => type.docType) : [],\n    stroke: { colors: [theme.palette.background.paper] },\n    legend: { floating: true, horizontalAlign: 'center' },\n    dataLabels: { enabled: false, dropShadow: { enabled: false } },\n    tooltip: {\n      fillSeriesColor: false,\n      y: {\n        formatter: (seriesName: number) => seriesName.toFixed(2),\n        title: {\n          formatter: (seriesName: string) => `${seriesName}`,\n        },\n      },\n    }\n  });\n\n  React.useEffect(() => {\n    if (analytics && threadTypes) {\n      // setChartValues([35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]);\n      setChartValues(threadTypes.getAllThreadTypes.map(type => {\n        const data = analytics.getStatusAnalytics.filter(d => d.docType.docId === type.docId);\n\n        if (data.length > 0) return data.reduce((sum, a) => sum + a.count, 0);\n        return 0;\n      }))\n    }\n  }, [analytics, threadTypes])\n\n  return (\n    <Card>\n      <CardHeader title={\n          <Typography variant='h6'>\n            {completed ? \"Completed Documents\" : \"Pending Documents\"}\n          </Typography>\n        } \n      />\n\n      <StyledChartWrapper dir=\"ltr\">\n        <ReactApexChart type=\"donut\" series={chartValues} options={chartOptions} height={320} />\n      </StyledChartWrapper>\n    </Card>\n  );\n}\n\n\n// ----------------------------------------------------------------------\n\nexport function useChart(options: any) {\n  const theme = useTheme();\n\n  const LABEL_TOTAL = {\n    show: true,\n    label: 'Total',\n    color: theme.palette.text.secondary,\n    fontSize: theme.typography.subtitle2.fontSize,\n    fontWeight: theme.typography.subtitle2.fontWeight,\n    lineHeight: theme.typography.subtitle2.lineHeight,\n  };\n\n  const LABEL_VALUE = {\n    offsetY: 8,\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.h3.fontSize,\n    fontWeight: theme.typography.h3.fontWeight,\n    lineHeight: theme.typography.h3.lineHeight,\n  };\n\n  const baseOptions = {\n    // Colors\n    colors: [\n      theme.palette.primary.main,\n      theme.palette.warning.main,\n      theme.palette.info.main,\n      theme.palette.error.main,\n      theme.palette.success.main,\n      theme.palette.warning.dark,\n      theme.palette.success.main,\n      theme.palette.info.dark,\n      theme.palette.info.light,\n    ],\n\n    // Chart\n    chart: {\n      toolbar: { show: false },\n      zoom: { enabled: false },\n      // animations: { enabled: false },\n      foreColor: theme.palette.text.disabled,\n      fontFamily: theme.typography.fontFamily,\n    },\n\n    // States\n    states: {\n      hover: {\n        filter: {\n          type: 'lighten',\n          value: 0.04,\n        },\n      },\n      active: {\n        filter: {\n          type: 'darken',\n          value: 0.88,\n        },\n      },\n    },\n\n    // Fill\n    fill: {\n      opacity: 1,\n      gradient: {\n        type: 'vertical',\n        shadeIntensity: 0,\n        opacityFrom: 0.4,\n        opacityTo: 0,\n        stops: [0, 100],\n      },\n    },\n\n    // Datalabels\n    dataLabels: { enabled: false },\n\n    // Stroke\n    stroke: {\n      width: 3,\n      curve: 'smooth',\n      lineCap: 'round',\n    },\n\n    // Grid\n    grid: {\n      strokeDashArray: 3,\n      borderColor: theme.palette.divider,\n      xaxis: {\n        lines: {\n          show: false,\n        },\n      },\n    },\n\n    // Xaxis\n    xaxis: {\n      axisBorder: { show: false },\n      axisTicks: { show: false },\n    },\n\n    // Markers\n    markers: {\n      size: 0,\n      strokeColors: theme.palette.background.paper,\n    },\n\n    // Tooltip\n    tooltip: {\n      x: {\n        show: false,\n      },\n    },\n\n    // Legend\n    legend: {\n      show: false\n    },\n\n    // plotOptions\n    plotOptions: {\n      // Bar\n      bar: {\n        borderRadius: 4,\n        columnWidth: '28%',\n        borderRadiusApplication: 'end',\n        borderRadiusWhenStacked: 'last',\n      },\n\n      // Pie + Donut\n      pie: {\n        donut: {\n          labels: {\n            show: true,\n            value: LABEL_VALUE,\n            total: LABEL_TOTAL,\n          },\n        },\n      },\n\n      // Radialbar\n      radialBar: {\n        track: {\n          strokeWidth: '100%',\n          background: alpha(theme.palette.grey[500], 0.16),\n        },\n        dataLabels: {\n          value: LABEL_VALUE,\n          total: LABEL_TOTAL,\n        },\n      },\n\n      // Radar\n      radar: {\n        polygons: {\n          fill: { colors: ['transparent'] },\n          strokeColors: theme.palette.divider,\n          connectorColors: theme.palette.divider,\n        },\n      },\n\n      // polarArea\n      polarArea: {\n        rings: {\n          strokeColor: theme.palette.divider,\n        },\n        spokes: {\n          connectorColors: theme.palette.divider,\n        },\n      },\n    },\n\n    // Responsive\n    responsive: [\n      {\n        // sm\n        breakpoint: theme.breakpoints.values.sm,\n        options: {\n          plotOptions: { bar: { columnWidth: '40%' } },\n        },\n      },\n      {\n        // md\n        breakpoint: theme.breakpoints.values.md,\n        options: {\n          plotOptions: { bar: { columnWidth: '32%' } },\n        },\n      },\n    ],\n  };\n\n  return merge(baseOptions, options);\n}","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n// @mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Card from '@mui/material/Card';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport CardHeader from '@mui/material/CardHeader';\nimport Avatar from '@mui/material/Avatar';\nimport { Thread } from '../../api/threads/types';\n// icons\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport TaskAltIcon from '@mui/icons-material/TaskAlt';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_THREAD_INBOX } from '../../api/threads';\n\n// ----------------------------------------------------------------------\n\ninterface UserTasksProps {\n    userId: string;\n}\n\nexport default function UserTasks({ userId }: UserTasksProps) {\n    const navigate = useNavigate();\n    const { data: tasks } = useQuery<{ getThreadInbox: Thread[] }>(GET_THREAD_INBOX, {\n        variables: {\n          userId: userId\n        }\n    });\n\n  return (\n    <Card>\n      <CardHeader title='To-Do-List' />\n\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\n            {tasks?.getThreadInbox.length === 0 && (\n                 <Box sx={{ display: 'flex', height: 280, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n                    <TaskAltIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\n                    <Typography variant=\"subtitle1\">\n                        Job Well Done!\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        You have no recurring tasks\n                    </Typography>\n                </Box>\n            )}\n            <Stack spacing={3} sx={{ p: 3, pr: 0 }}>\n                {tasks?.getThreadInbox.map((task) => (\n                    <TaskItem key={task.refId} task={task} />\n                ))}\n            </Stack>\n        </Box>\n\n        <Divider />\n\n        <Box sx={{ p: 2, textAlign: 'right' }}>\n            <Button size=\"small\" color=\"inherit\" endIcon={<ArrowForwardIosIcon />} onClick={() => navigate('/app/inbox')}>\n                View all\n            </Button>\n        </Box>\n    </Card>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ninterface NewsItemProps {\n    task: Thread\n}\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nfunction TaskItem({ task }: NewsItemProps) {\n  const { subject, author, docType, dateUpdated } = task;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Avatar sx={{ width: 48, height: 48 }}>\n            {`${author.firstName.charAt(0)}${author.lastName.charAt(0)}`}\n        </Avatar>\n\n        <Box sx={{ minWidth: 240, flexGrow: 1 }}>\n            <Typography color=\"inherit\" variant=\"subtitle2\" noWrap>\n                {subject}\n            </Typography>\n\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\n                {`${author.firstName} ${author.lastName} — ${docType.docType}`}\n            </Typography>\n        </Box>\n\n            <Typography variant=\"caption\" sx={{ pr: 3, flexShrink: 0, color: 'text.secondary' }}>\n                {`Updated at ${formatInboxDate(dateUpdated)}`}\n            </Typography>\n    </Stack>\n  );\n}","import React from 'react';\n// mui\nimport Grid from '@mui/material/Grid';\n// project imports\nimport StatusReportBar from './StatusReportBar';\nimport TypesReportDonut from './TypesReportDonut';\nimport UserTasks from './UserTasks';\nimport { useAppSelector } from '../../redux/hooks';\n\n\nexport default function DashboardPage() {\n    const { uid, office } = useAppSelector((state) => state.auth);\n\n    return (\n        <Grid container spacing={2} sx={{ maxHeight: 'calc(100vh - 80px)', overflowY: 'auto', pb: 2, px: 2 }}>\n            <Grid item xs={12} md={12}>\n                <StatusReportBar officeId={office?.sectionId as number} />\n            </Grid>\n            <Grid item md={12} lg={3}>\n                <TypesReportDonut\n                    officeId={office?.sectionId as number}\n                    completed={true}\n                />\n            </Grid>\n            <Grid item md={12} lg={3}>\n                <TypesReportDonut\n                    officeId={office?.sectionId as number}\n                    completed={false}\n                />\n            </Grid>\n            <Grid item md={12} lg={6}>\n                <UserTasks userId={uid as string} />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport const chartColors = ['#9288F8', '#FFD2D7', '#461959', '#7A316F', '#CD6688', '#AED8CC', '#9A208C', '#E11299', '#35155D', '#512B81', '#4477CE', '#8CABFF', '#6F61C0', '#A084E8', '#8BE8E5', '#D5FFE4', '#4682A9', '#749BC2', '#91C8E4', '#F6F4EB', '#FFE7A0', '#322653', '#8062D6', '#FFEAEA', '#F5C6EC'];"],"names":["StatusReportBar","_ref","officeId","theme","useTheme","role","useAppSelector","state","auth","_React$useState","React","current","Date","setDate","getDate","getWeekBeforeDate","toISOString","_React$useState2","_slicedToArray","startDate","setStartDate","_React$useState3","_React$useState4","endDate","setEndDate","_useQuery","useQuery","GET_DOCUMENT_TYPE_ANALYTICS","variables","superuser","analytics","data","refetch","threadTypes","GET_ALL_THREAD_TYPES","threadStatus","GET_ALL_THREAD_STATUS","_React$useState5","_React$useState6","chartOptions","setChartOptions","_React$useState7","_React$useState8","chartSeries","setChartSeries","primary","palette","text","grey200","grey","grey500","chart","id","stacked","toolbar","show","zoom","enabled","colors","chartColors","responsive","breakpoint","options","legend","position","offsetX","offsetY","xaxis","type","categories","getAllThreadTypes","map","docType","labels","style","fontSize","yaxis","grid","borderColor","tooltip","plotOptions","bar","horizontal","columnWidth","fontFamily","useSeriesColors","markers","width","height","radius","itemMargin","vertical","fill","dataLabels","getAllThreadStatus","status","name","statusLabel","getThreadTypeAnalytics","filter","s","statusId","docId","length","reduce","sum","d","count","_jsxs","Card","children","_jsx","CardHeader","title","Box","Typography","variant","concat","a","action","LocalizationProvider","dateAdapter","AdapterDayjs","Stack","direction","spacing","DatePicker","label","views","value","dayjs","onChange","date","format","CardContent","Chart","series","StyledChartWrapper","styled","marginTop","overflow","alignContent","borderTop","divider","top","CHART_HEIGHT","TypesReportDonut","_ref2","completed","GET_DOCUMENT_STATUS_ANALYTICS","chartValues","setChartValues","LABEL_TOTAL","color","secondary","typography","subtitle2","fontWeight","lineHeight","LABEL_VALUE","h3","baseOptions","main","warning","info","error","success","dark","light","foreColor","disabled","states","hover","active","opacity","gradient","shadeIntensity","opacityFrom","opacityTo","stops","stroke","curve","lineCap","strokeDashArray","lines","axisBorder","axisTicks","size","strokeColors","background","paper","x","borderRadius","borderRadiusApplication","borderRadiusWhenStacked","pie","donut","total","radialBar","track","strokeWidth","alpha","radar","polygons","connectorColors","polarArea","rings","strokeColor","spokes","breakpoints","values","sm","md","merge","useChart","floating","horizontalAlign","dropShadow","fillSeriesColor","y","formatter","seriesName","toFixed","getStatusAnalytics","dir","ReactApexChart","UserTasks","userId","navigate","useNavigate","tasks","GET_THREAD_INBOX","sx","maxHeight","overflowY","getThreadInbox","display","justifyContent","alignItems","flexDirection","TaskAltIcon","mb","p","pr","task","TaskItem","refId","Divider","textAlign","Button","endIcon","ArrowForwardIosIcon","onClick","formatInboxDate","toLocaleDateString","undefined","weekday","year","month","day","subject","author","dateUpdated","Avatar","firstName","charAt","lastName","minWidth","flexGrow","noWrap","flexShrink","DashboardPage","_useAppSelector","uid","office","Grid","container","pb","px","item","xs","sectionId","lg"],"sourceRoot":""}