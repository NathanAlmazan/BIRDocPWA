{"version":3,"file":"static/js/889.7a2cb80a.chunk.js","mappings":"sQAae,SAASA,IACtB,IAAQC,GAAQC,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAA5CH,IACRI,EAAgCC,EAAAA,SAA8B,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5DI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,EAA8BL,EAAAA,UAAwB,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAsB,WAAH,OAASD,GAAYD,EAAS,EASvD,OACEG,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,WAAW,UAAUC,GAAI,CAAEC,OAAQ,OAAQC,SAAA,EACrEC,EAAAA,EAAAA,KAACP,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,EAAEH,UACfC,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CACRC,OAAQ3B,EACRY,QAASA,EACTgB,KAAK,YACLC,gBAAiBf,EACjBgB,cAfkB,SAACC,GAAU,OAAKtB,EAAYsB,EAAI,OAkBtDR,EAAAA,EAAAA,KAACP,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,EAAGL,GAAI,CAAEY,SAAU,YAAaV,SAC5CV,GACCW,EAAAA,EAAAA,KAACU,EAAAA,EAAY,CACXN,OAAQ3B,EACRkC,gBAAiBpB,EACjBqB,eArBiB,SAACJ,GAC1BtB,EAAYsB,GACZlB,GAAW,EACb,IAoBUL,GACFe,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CACTT,OAAQ3B,EACRQ,SAAUA,KAGZO,EAAAA,EAAAA,MAACsB,EAAAA,EAAG,CAACjB,GAAI,CAAEkB,QAAS,OAAQjB,OAAQ,OAAQkB,eAAgB,SAAUpB,WAAY,SAAUqB,cAAe,UAAWlB,SAAA,EACpHC,EAAAA,EAAAA,KAACkB,EAAAA,EAAgB,CAACC,MAAM,YAAYtB,GAAI,CAAEuB,SAAU,GAAIC,GAAI,MAC5DrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,YAAWxB,SAAC,4BAGhCC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,QAAOxB,SAAC,4BAQxC,C","sources":["pages/threads/Completed.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\n//icons\r\nimport MarkAsUnreadIcon from '@mui/icons-material/MarkAsUnread';\r\n// project imports\r\nimport EmailList from './EmailList';\r\nimport ThreadList from './ThreadList';\r\nimport CreateThread from './CreateThread';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\nexport default function EmailPage() {\r\n  const { uid } = useAppSelector((state) => state.auth);\r\n  const [threadId, setThreadId] = React.useState<string | null>(null);\r\n  const [compose, setCompose] = React.useState<boolean>(false);\r\n\r\n  const handleComposeThread = () => setCompose(!compose);\r\n\r\n  const handleThreadClick = (id: string) => setThreadId(id);\r\n\r\n  const handleCreateThread = (id: string) => {\r\n    setThreadId(id);\r\n    setCompose(false)\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3} alignItems=\"stretch\" sx={{ height: \"95%\" }}>\r\n      <Grid item md={4}>\r\n        <EmailList \r\n          userId={uid as string}\r\n          compose={compose}\r\n          mode=\"completed\"\r\n          onComposeThread={handleComposeThread}\r\n          onThreadClick={handleThreadClick}\r\n        />\r\n      </Grid>\r\n      <Grid item md={8} sx={{ position: 'relative' }}>\r\n        {compose ? (\r\n          <CreateThread \r\n            userId={uid as string}\r\n            onDiscardThread={handleComposeThread}\r\n            onCreateThread={handleCreateThread}\r\n          />\r\n        ) : threadId ? (\r\n          <ThreadList \r\n            userId={uid as string}\r\n            threadId={threadId}\r\n          />\r\n        ) : (\r\n          <Box sx={{ display: 'flex', height: '100%', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n            <MarkAsUnreadIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n            <Typography variant=\"subtitle1\">\r\n                Select an item to read\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n                No item selected\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}"],"names":["EmailPage","uid","useAppSelector","state","auth","_React$useState","React","_React$useState2","_slicedToArray","threadId","setThreadId","_React$useState3","_React$useState4","compose","setCompose","handleComposeThread","_jsxs","Grid","container","spacing","alignItems","sx","height","children","_jsx","item","md","EmailList","userId","mode","onComposeThread","onThreadClick","id","position","CreateThread","onDiscardThread","onCreateThread","ThreadList","Box","display","justifyContent","flexDirection","MarkAsUnreadIcon","color","fontSize","mb","Typography","variant"],"sourceRoot":""}