{"version":3,"file":"static/js/816.748d0d1f.chunk.js","mappings":"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","sources":["pages/dashboard/StatusReportBar.tsx","pages/dashboard/PurposeReportBar.tsx","pages/dashboard/TypesReportDonut.tsx","pages/dashboard/UserTasks.tsx","pages/dashboard/RequestSummaryTable.tsx","pages/dashboard/index.tsx"],"sourcesContent":["import React from 'react';\n// mui\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport Stack from '@mui/material/Stack';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport Chart from 'react-apexcharts';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_DOCUMENT_TYPE_ANALYTICS } from '../../api/offices';\nimport { DocumentStatus, DocumentTypes, Analytics } from '../../api/threads/types';\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { chartColors } from '.';\nimport { useAppSelector } from '../../redux/hooks';\n\n\nfunction getWeekBeforeDate() {\n    const current = new Date();\n    current.setDate(current.getDate() - 30);\n\n    return current;\n}\n\nexport default function StatusReportBar({ officeId }: { officeId: number }) {\n    const theme = useTheme();\n    const { role } = useAppSelector((state) => state.auth);\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\n    const { data: analytics, refetch } = useQuery<{ getThreadTypeAnalytics: Analytics[] }>(GET_DOCUMENT_TYPE_ANALYTICS, {\n        variables: {\n            officeId: officeId,\n            startDate: startDate,\n            endDate: endDate,\n            superuser: role ? role.superuser : null\n        }\n    });\n    const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\n\n    const [chartOptions, setChartOptions] = React.useState<any>();\n    const [chartSeries, setChartSeries] = React.useState<{\n        name: string;\n        data: number[];\n    }[]>([])\n\n    React.useEffect(() => {\n        if (analytics && threadTypes && threadStatus) {\n            const { primary } = theme.palette.text;\n            const grey200 = theme.palette.grey[200];\n            const grey500 = theme.palette.grey[500];\n\n            setChartOptions({\n                chart: {\n                    id: 'bar-chart',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: true\n                    }\n                },\n                colors: chartColors,\n                responsive: [\n                    {\n                        breakpoint: 500,\n                        options: {\n                            legend: {\n                                position: 'bottom',\n                                offsetX: -10,\n                                offsetY: 0\n                            }\n                        }\n                    }\n                ],\n                xaxis: {\n                    type: 'category',\n                    categories: threadTypes.getAllThreadTypes.map(type => type.docType),\n                    labels: {\n                        style: {\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\n                            fontSize: '8px'\n                        }\n                    }\n                },\n                yaxis: {\n                    labels: {\n                        style: {\n                            colors: [primary]\n                        }\n                    }\n                },\n                grid: {\n                    borderColor: grey200,\n                    show: true\n                },\n                tooltip: {\n                    theme: 'light'\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: false,\n                        columnWidth: '50%'\n                    }\n                },\n                legend: {\n                    show: true,\n                    position: 'top',\n                    fontSize: '14px',\n                    fontFamily: `'Roboto', sans-serif`,\n                    offsetX: 20,\n                    labels: {\n                        useSeriesColors: false,\n                        colors: grey500\n                    },\n                    markers: {\n                        width: 16,\n                        height: 16,\n                        radius: 5\n                    },\n                    itemMargin: {\n                        horizontal: 15,\n                        vertical: 8\n                    },\n                },\n                fill: {\n                    type: 'solid'\n                },\n                dataLabels: {\n                    enabled: false\n                }\n            })\n\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\n            //     name: status.statusLabel,\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\n            // })))\n\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\n                name: status.statusLabel,\n                data: threadTypes.getAllThreadTypes.map(type => {\n                    const data = analytics.getThreadTypeAnalytics.filter(s => s.status.statusId === status.statusId && s.docType.docId === type.docId);\n\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\n                    return 0;\n                })\n            })))\n        }\n    }, [analytics, threadTypes, threadStatus, theme]);\n\n    const handleStartDateChange = (date: Dayjs | null) => {\n        if (date) {\n            setStartDate(date.toISOString());\n            refetch({\n                officeId: officeId,\n                startDate: date.toISOString(),\n                endDate: endDate\n            })\n        }\n    }\n\n    const handleEndDateChange = (date: Dayjs | null) => {\n        if (date) {\n            setEndDate(date.toISOString());\n            refetch({\n                officeId: officeId,\n                startDate: startDate,\n                endDate: date.toISOString()\n            })\n        }\n    }\n\n    return (\n        <Card>\n            <CardHeader \n                title={\n                    <Box>\n                        <Typography variant='h6'>\n                            Document Types Tracker\n                        </Typography>\n                    </Box>\n                }\n                action={\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <Stack direction='row' spacing={1}>\n                                <DatePicker \n                                    label=\"Report Start Date\"\n                                    views={[\"year\", \"month\", \"day\"]}\n                                    value={dayjs(startDate)} \n                                    onChange={handleStartDateChange} \n                                    format=\"MMMM DD, YYYY\"\n                                />\n                                <DatePicker \n                                    label=\"Report End Date\"\n                                    views={[\"year\", \"month\", \"day\"]}\n                                    value={dayjs(endDate)} \n                                    onChange={handleEndDateChange} \n                                    format=\"MMMM DD, YYYY\"\n                                />\n                        </Stack>\n                    </LocalizationProvider>\n                }\n            />\n            <CardContent>\n                {chartOptions && (\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\n                )}\n            </CardContent>\n        </Card>\n    )\n}\n\n\n","import React from 'react';\n// mui\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport Stack from '@mui/material/Stack';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport Chart from 'react-apexcharts';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_DOCUMENT_PURPOSE_ANALYTICS } from '../../api/offices';\nimport { DocumentStatus, Analytics, DocumentPurpose } from '../../api/threads/types';\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_PURPOSE } from '../../api/threads';\nimport { chartColors } from '.';\nimport { useAppSelector } from '../../redux/hooks';\n\n\nfunction getWeekBeforeDate() {\n    const current = new Date();\n    current.setDate(current.getDate() - 30);\n\n    return current;\n}\n\nexport default function PurposeReportBar({ officeId }: { officeId: number }) {\n    const theme = useTheme();\n    const { role } = useAppSelector((state) => state.auth);\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\n    const { data: analytics, refetch } = useQuery<{ getThreadPurposeAnalytics: Analytics[] }>(GET_DOCUMENT_PURPOSE_ANALYTICS, {\n        variables: {\n            officeId: officeId,\n            startDate: startDate,\n            endDate: endDate,\n            superuser: role ? role.superuser : null\n        }\n    });\n    const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\n\n    const [chartOptions, setChartOptions] = React.useState<any>();\n    const [chartSeries, setChartSeries] = React.useState<{\n        name: string;\n        data: number[];\n    }[]>([])\n\n    React.useEffect(() => {\n        if (analytics && threadPurposes && threadStatus) {\n            const { primary } = theme.palette.text;\n            const grey200 = theme.palette.grey[200];\n            const grey500 = theme.palette.grey[500];\n\n            setChartOptions({\n                chart: {\n                    id: 'bar-chart',\n                    stacked: true,\n                    toolbar: {\n                        show: false\n                    },\n                    zoom: {\n                        enabled: true\n                    }\n                },\n                colors: chartColors,\n                responsive: [\n                    {\n                        breakpoint: 500,\n                        options: {\n                            legend: {\n                                position: 'bottom',\n                                offsetX: -10,\n                                offsetY: 0\n                            }\n                        }\n                    }\n                ],\n                xaxis: {\n                    type: 'category',\n                    categories: threadPurposes.getAllThreadPurpose.map(purpose => purpose.purposeName),\n                    labels: {\n                        style: {\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\n                            fontSize: '8px'\n                        }\n                    }\n                },\n                yaxis: {\n                    labels: {\n                        style: {\n                            colors: [primary]\n                        }\n                    }\n                },\n                grid: {\n                    borderColor: grey200,\n                    show: true\n                },\n                tooltip: {\n                    theme: 'light'\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: false,\n                        columnWidth: '50%'\n                    }\n                },\n                legend: {\n                    show: true,\n                    position: 'top',\n                    fontSize: '14px',\n                    fontFamily: `'Roboto', sans-serif`,\n                    offsetX: 20,\n                    labels: {\n                        useSeriesColors: false,\n                        colors: grey500\n                    },\n                    markers: {\n                        width: 16,\n                        height: 16,\n                        radius: 5\n                    },\n                    itemMargin: {\n                        horizontal: 15,\n                        vertical: 8\n                    },\n                },\n                fill: {\n                    type: 'solid'\n                },\n                dataLabels: {\n                    enabled: false\n                }\n            })\n\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\n            //     name: status.statusLabel,\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\n            // })))\n\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\n                name: status.statusLabel,\n                data: threadPurposes.getAllThreadPurpose.map(purpose => {\n                    const data = analytics.getThreadPurposeAnalytics.filter(s => s.status.statusId === status.statusId && s.purpose.purposeId === purpose.purposeId);\n\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\n                    return 0;\n                })\n            })))\n        }\n    }, [analytics, threadPurposes, threadStatus, theme]);\n\n    const handleStartDateChange = (date: Dayjs | null) => {\n        if (date) {\n            setStartDate(date.toISOString());\n            refetch({\n                officeId: officeId,\n                startDate: date.toISOString(),\n                endDate: endDate\n            })\n        }\n    }\n\n    const handleEndDateChange = (date: Dayjs | null) => {\n        if (date) {\n            setEndDate(date.toISOString());\n            refetch({\n                officeId: officeId,\n                startDate: startDate,\n                endDate: date.toISOString()\n            })\n        }\n    }\n\n    return (\n        <Card>\n            <CardHeader \n                title={\n                    <Box>\n                        <Typography variant='h6'>\n                            Document Purpose Tracker\n                        </Typography>\n                    </Box>\n                }\n                action={\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <Stack direction='row' spacing={1}>\n                                <DatePicker \n                                    label=\"Report Start Date\"\n                                    views={[\"year\", \"month\", \"day\"]}\n                                    value={dayjs(startDate)} \n                                    onChange={handleStartDateChange} \n                                    format=\"MMMM DD, YYYY\"\n                                />\n                                <DatePicker \n                                    label=\"Report End Date\"\n                                    views={[\"year\", \"month\", \"day\"]}\n                                    value={dayjs(endDate)} \n                                    onChange={handleEndDateChange} \n                                    format=\"MMMM DD, YYYY\"\n                                />\n                        </Stack>\n                    </LocalizationProvider>\n                }\n            />\n            <CardContent>\n                {chartOptions && (\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\n                )}\n            </CardContent>\n        </Card>\n    )\n}\n\n\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReactApexChart from 'react-apexcharts';\nimport merge from 'lodash/merge';\n// @mui\nimport { useTheme, styled, alpha } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport { Card, CardHeader, CardActions, CardContent, Button } from '@mui/material';\n// api\nimport { useQuery } from '@apollo/client';\nimport { Analytics, DocumentTypes } from '../../api/threads/types';\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { GET_DOCUMENT_STATUS_ANALYTICS } from '../../api/offices';\nimport { chartColors } from '.';\nimport { useAppSelector } from '../../redux/hooks';\n\n// ----------------------------------------------------------------------\n\nconst CHART_HEIGHT = 350;\nconst LEGEND_HEIGHT = 72;\n\nconst StyledChartWrapper = styled('div')(({ theme }) => ({\n  height: CHART_HEIGHT,\n  marginTop: theme.spacing(5),\n  '& .apexcharts-canvas svg': { height: CHART_HEIGHT },\n  '& .apexcharts-canvas svg,.apexcharts-canvas foreignObject': {\n    overflow: 'visible',\n  },\n  '& .apexcharts-legend': {\n    height: LEGEND_HEIGHT,\n    alignContent: 'center',\n    position: 'relative !important',\n    borderTop: `solid 1px ${theme.palette.divider}`,\n    top: `calc(${CHART_HEIGHT - LEGEND_HEIGHT}px) !important`,\n  },\n}));\n\n// ----------------------------------------------------------------------\n\ninterface TypesReportDonutProps {\n    officeId: number;\n    completed: boolean;\n}\n\nexport default function TypesReportDonut({ officeId, completed }: TypesReportDonutProps) {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { role } = useAppSelector((state) => state.auth);\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const { data: analytics } = useQuery<{ getStatusAnalytics: Analytics[] }>(GET_DOCUMENT_STATUS_ANALYTICS, {\n    variables: {\n      officeId: officeId,\n      completed: completed,\n      superuser: role ? role.superuser : null\n    }\n  });\n  const [chartValues, setChartValues] = React.useState<number[]>([]);\n\n  const chartOptions = useChart({\n    colors: chartColors,\n    labels: threadTypes ? threadTypes.getAllThreadTypes.map(type => type.docType) : [],\n    stroke: { colors: [theme.palette.background.paper] },\n    legend: { floating: true, horizontalAlign: 'center' },\n    dataLabels: { enabled: false, dropShadow: { enabled: false } },\n    tooltip: {\n      fillSeriesColor: false,\n      y: {\n        formatter: (seriesName: number) => seriesName.toFixed(2),\n        title: {\n          formatter: (seriesName: string) => `${seriesName}`,\n        },\n      },\n    }\n  });\n\n  React.useEffect(() => {\n    if (analytics && threadTypes) {\n      // setChartValues([35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]);\n      setChartValues(threadTypes.getAllThreadTypes.map(type => {\n        const data = analytics.getStatusAnalytics.filter(d => d.docType.docId === type.docId);\n\n        if (data.length > 0) return data.reduce((sum, a) => sum + a.count, 0);\n        return 0;\n      }))\n    }\n  }, [analytics, threadTypes])\n\n  const handleRedirect = () => {\n    if (completed) navigate('/app/inbox/finished');\n    else navigate('/app/inbox/tasks');\n  }\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardHeader title={\n          <Typography variant='h6'>\n            {completed ? \"Completed Documents\" : \"Pending Documents\"}\n          </Typography>\n        } \n      />\n\n     <CardContent>\n      <StyledChartWrapper dir=\"ltr\">\n          <ReactApexChart type=\"donut\" series={chartValues} options={chartOptions} height={380} />\n        </StyledChartWrapper>\n     </CardContent>\n\n      <CardActions>\n        <Button size=\"large\" onClick={handleRedirect} fullWidth>{completed ? \"See Completed Documents\" : \"See Pending Documents\"}</Button>\n      </CardActions>\n    </Card>\n  );\n}\n\n\n// ----------------------------------------------------------------------\n\nexport function useChart(options: any) {\n  const theme = useTheme();\n\n  const LABEL_TOTAL = {\n    show: true,\n    label: 'Total',\n    color: theme.palette.text.secondary,\n    fontSize: theme.typography.subtitle2.fontSize,\n    fontWeight: theme.typography.subtitle2.fontWeight,\n    lineHeight: theme.typography.subtitle2.lineHeight,\n  };\n\n  const LABEL_VALUE = {\n    offsetY: 8,\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.h3.fontSize,\n    fontWeight: theme.typography.h3.fontWeight,\n    lineHeight: theme.typography.h3.lineHeight,\n  };\n\n  const baseOptions = {\n    // Colors\n    colors: [\n      theme.palette.primary.main,\n      theme.palette.warning.main,\n      theme.palette.info.main,\n      theme.palette.error.main,\n      theme.palette.success.main,\n      theme.palette.warning.dark,\n      theme.palette.success.main,\n      theme.palette.info.dark,\n      theme.palette.info.light,\n    ],\n\n    // Chart\n    chart: {\n      toolbar: { show: false },\n      zoom: { enabled: false },\n      // animations: { enabled: false },\n      foreColor: theme.palette.text.disabled,\n      fontFamily: theme.typography.fontFamily,\n    },\n\n    // States\n    states: {\n      hover: {\n        filter: {\n          type: 'lighten',\n          value: 0.04,\n        },\n      },\n      active: {\n        filter: {\n          type: 'darken',\n          value: 0.88,\n        },\n      },\n    },\n\n    // Fill\n    fill: {\n      opacity: 1,\n      gradient: {\n        type: 'vertical',\n        shadeIntensity: 0,\n        opacityFrom: 0.4,\n        opacityTo: 0,\n        stops: [0, 100],\n      },\n    },\n\n    // Datalabels\n    dataLabels: { enabled: false },\n\n    // Stroke\n    stroke: {\n      width: 3,\n      curve: 'smooth',\n      lineCap: 'round',\n    },\n\n    // Grid\n    grid: {\n      strokeDashArray: 3,\n      borderColor: theme.palette.divider,\n      xaxis: {\n        lines: {\n          show: false,\n        },\n      },\n    },\n\n    // Xaxis\n    xaxis: {\n      axisBorder: { show: false },\n      axisTicks: { show: false },\n    },\n\n    // Markers\n    markers: {\n      size: 0,\n      strokeColors: theme.palette.background.paper,\n    },\n\n    // Tooltip\n    tooltip: {\n      x: {\n        show: false,\n      },\n    },\n\n    // Legend\n    legend: {\n      show: false\n    },\n\n    // plotOptions\n    plotOptions: {\n      // Bar\n      bar: {\n        borderRadius: 4,\n        columnWidth: '28%',\n        borderRadiusApplication: 'end',\n        borderRadiusWhenStacked: 'last',\n      },\n\n      // Pie + Donut\n      pie: {\n        donut: {\n          labels: {\n            show: true,\n            value: LABEL_VALUE,\n            total: LABEL_TOTAL,\n          },\n        },\n      },\n\n      // Radialbar\n      radialBar: {\n        track: {\n          strokeWidth: '100%',\n          background: alpha(theme.palette.grey[500], 0.16),\n        },\n        dataLabels: {\n          value: LABEL_VALUE,\n          total: LABEL_TOTAL,\n        },\n      },\n\n      // Radar\n      radar: {\n        polygons: {\n          fill: { colors: ['transparent'] },\n          strokeColors: theme.palette.divider,\n          connectorColors: theme.palette.divider,\n        },\n      },\n\n      // polarArea\n      polarArea: {\n        rings: {\n          strokeColor: theme.palette.divider,\n        },\n        spokes: {\n          connectorColors: theme.palette.divider,\n        },\n      },\n    },\n\n    // Responsive\n    responsive: [\n      {\n        // sm\n        breakpoint: theme.breakpoints.values.sm,\n        options: {\n          plotOptions: { bar: { columnWidth: '40%' } },\n        },\n      },\n      {\n        // md\n        breakpoint: theme.breakpoints.values.md,\n        options: {\n          plotOptions: { bar: { columnWidth: '32%' } },\n        },\n      },\n    ],\n  };\n\n  return merge(baseOptions, options);\n}","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n// @mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Card from '@mui/material/Card';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport CardHeader from '@mui/material/CardHeader';\nimport Avatar from '@mui/material/Avatar';\nimport { Thread } from '../../api/threads/types';\n// icons\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport TaskAltIcon from '@mui/icons-material/TaskAlt';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_THREAD_INBOX } from '../../api/threads';\n\n// ----------------------------------------------------------------------\n\ninterface UserTasksProps {\n    userId: string;\n}\n\nexport default function UserTasks({ userId }: UserTasksProps) {\n    const navigate = useNavigate();\n    const { data: tasks } = useQuery<{ getThreadInbox: Thread[] }>(GET_THREAD_INBOX, {\n        variables: {\n          userId: userId,\n          type: \"pending\"\n        }\n    });\n\n  return (\n    <Card>\n      <CardHeader title='To-Do-List' />\n\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\n            {tasks?.getThreadInbox.length === 0 && (\n                 <Box sx={{ display: 'flex', height: 280, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n                    <TaskAltIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\n                    <Typography variant=\"subtitle1\">\n                        Job Well Done!\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        You have no recurring tasks\n                    </Typography>\n                </Box>\n            )}\n            <Stack spacing={3} sx={{ p: 3, pr: 0 }}>\n                {tasks?.getThreadInbox.map((task) => (\n                    <TaskItem key={task.refId} task={task} />\n                ))}\n            </Stack>\n        </Box>\n\n        <Divider />\n\n        <Box sx={{ p: 2, textAlign: 'right' }}>\n            <Button size=\"small\" color=\"inherit\" endIcon={<ArrowForwardIosIcon />} onClick={() => navigate('/app/inbox')}>\n                View all\n            </Button>\n        </Box>\n    </Card>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ninterface NewsItemProps {\n    task: Thread\n}\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nfunction TaskItem({ task }: NewsItemProps) {\n  const { subject, author, docType, dateUpdated } = task;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Avatar sx={{ width: 48, height: 48 }}>\n            {`${author.firstName.charAt(0)}${author.lastName.charAt(0)}`}\n        </Avatar>\n\n        <Box sx={{ minWidth: 240, flexGrow: 1 }}>\n            <Typography color=\"inherit\" variant=\"subtitle2\" noWrap>\n                {subject}\n            </Typography>\n\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\n                {`${author.firstName} ${author.lastName} — ${docType.docType}`}\n            </Typography>\n        </Box>\n\n            <Typography variant=\"caption\" sx={{ pr: 3, flexShrink: 0, color: 'text.secondary' }}>\n                {`Updated at ${formatInboxDate(dateUpdated)}`}\n            </Typography>\n    </Stack>\n  );\n}","import React from 'react';\n// mui\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button'\nimport TableContainer from '@mui/material/TableContainer';\nimport Table from '@mui/material/Table';\nimport TableHead from '@mui/material/TableHead';\nimport TableBody from '@mui/material/TableBody';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport TablePagination from '@mui/material/TablePagination';\nimport Chip from '@mui/material/Chip';\n// csv\nimport { CSVLink } from 'react-csv';\n// icons\nimport IosShareIcon from '@mui/icons-material/IosShare';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_DOCUMENT_SUMMARY_ANALYTICS } from '../../api/offices';\nimport { Thread } from '../../api/threads/types';\nimport { useAppSelector } from '../../redux/hooks';\n\n\nfunction optionYears() {\n    const current = new Date().getFullYear();\n\n    return [current - 3, current - 2, current - 1, current]\n}\n\nconst formatSummaryDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function RequestSummaryTable() {\n    const { uid } = useAppSelector((state) => state.auth);\n    const { data: summary, refetch } = useQuery<{ getThreadSummary: Thread[] }>(GET_DOCUMENT_SUMMARY_ANALYTICS, {\n        variables: {\n           userId: uid,\n           dateCreated: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString()\n        }\n    });\n    const [month, setMonth] = React.useState<number>(new Date().getMonth());\n    const [year, setYear] = React.useState<number>(new Date().getFullYear())\n    const [page, setPage] = React.useState<number>(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState<number>(5);\n    const [emptyRows, setEmptyRows] = React.useState<number>(0);\n\n    React.useEffect(() => {\n        if (summary) {\n            setEmptyRows(page > 0 ? Math.max(0, (1 + page) * rowsPerPage - summary.getThreadSummary.length) : 0);\n        }\n    }, [summary, page, rowsPerPage])\n\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    const handleMonthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMonth(parseInt(event.target.value));\n        refetch({\n            userId: uid,\n            dateCreated: new Date(new Date().getFullYear(), parseInt(event.target.value), 1).toISOString()\n        })\n    }\n\n    const handleYearChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setYear(parseInt(event.target.value));\n        refetch({\n            userId: uid,\n            dateCreated: new Date(parseInt(event.target.value), new Date().getMonth(), 1).toISOString()\n        })\n    }\n\n    const handlePageChange = (event:  unknown, newPage: number) => {\n        setPage(newPage);\n    }\n\n    const handleRowPerPageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0);\n    }\n\n    return (\n        <Card>\n            <CardHeader \n                title='Requests Summary'\n                action={\n                    <Stack direction='row' spacing={2}>\n                        <TextField \n                            name='report-month'\n                            label=\"Month\"\n                            value={month}\n                            onChange={handleMonthChange}\n                            select\n                        >\n                            {months.map((month, index) => (\n                                <MenuItem key={month} value={index}>{month}</MenuItem>\n                            ))}\n                        </TextField>\n                        <TextField \n                            name='report-year'\n                            label='Year'\n                            value={year}\n                            onChange={handleYearChange}\n                            select\n                        >\n                            {optionYears().map(year => (\n                                <MenuItem key={year} value={year}>{year.toString()}</MenuItem>\n                            ))}\n                        </TextField>\n                        {summary && (\n                            <CSVLink filename={`${new Date(year, month, 1).toISOString().split('T')[0]}.csv`} data={[\n                                [\"Reference #\", \"Received From\", \"Office Concerned\", \"For\", \"Document Type\", \"Date Received\", \"Date Due\", \"Status\"],\n                                ...summary.getThreadSummary.map(thread => [\n                                    thread.refSlipNum,\n                                    `${thread.author.firstName} ${thread.author.lastName} (${thread.author.officeSection.sectionOffice.officeName})`,\n                                    `${thread.recipient.sectionOffice.officeName} ${thread.recipient.sectionName === \"default\" ? \"\" : thread.recipient.sectionName}`,\n                                    thread.purpose.purposeName,\n                                    thread.docType.docType,\n                                    formatSummaryDate(thread.dateCreated),\n                                    formatSummaryDate(thread.dateDue),\n                                    thread.status.statusLabel\n                                ])\n                            ]}>\n                                <Button\n                                    variant='contained'\n                                    startIcon={<IosShareIcon />}\n                                    sx={{ minHeight: 50 }}\n                                >\n                                    Export\n                                </Button>\n                            </CSVLink>\n                        )}\n                    </Stack>\n                }\n            />\n            <CardContent>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Reference #</TableCell>\n                                <TableCell>Sender</TableCell>\n                                <TableCell>Recipient</TableCell>\n                                <TableCell>Details</TableCell>\n                                <TableCell>Date Sent</TableCell>\n                                <TableCell>Date Due</TableCell>\n                                <TableCell>Status</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {summary && summary.getThreadSummary.slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            ).map(thread => (\n                                <TableRow key={thread.refId}>\n                                    <TableCell>\n                                        <Typography variant='body1' sx={{ fontWeight: 800 }}>\n                                            {thread.refSlipNum}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {thread.author.firstName + ' ' + thread.author.lastName}\n                                        </Typography>\n                                        <Typography variant='subtitle2'>\n                                            {thread.author.role.roleName}\n                                        </Typography>\n                                        <Typography variant='caption'>\n                                            {`${thread.author.officeSection.sectionOffice.officeName} ${thread.author.officeSection.sectionName === \"default\" ? \"\" : thread.author.officeSection.sectionName}`}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {thread.recipient.sectionOffice.officeName}\n                                        </Typography>\n                                        <Typography variant='caption'>\n                                            {`${thread.recipient.sectionName === \"default\" ? \"All Sections\" : thread.recipient.sectionName}`}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {`For ${thread.purpose.purposeName}`}\n                                        </Typography>\n                                        <Typography variant='caption'>\n                                            {thread.docType.docType}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>{formatSummaryDate(thread.dateCreated)}</TableCell>\n                                    <TableCell>{formatSummaryDate(thread.dateDue)}</TableCell>\n                                    <TableCell align=\"right\">\n                                        <Chip size=\"small\" label={thread.status.statusLabel} color={thread.completed ? \"success\" : \"info\"} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n\n                            {emptyRows > 0 && (\n                                <TableRow\n                                    style={{\n                                        height: 60 * emptyRows,\n                                    }}\n                                >\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination \n                    rowsPerPageOptions={[5, 10, 15]}\n                    component='div'\n                    count={summary ? summary.getThreadSummary.length : 0}\n                    page={page}\n                    rowsPerPage={rowsPerPage}\n                    onPageChange={handlePageChange}\n                    onRowsPerPageChange={handleRowPerPageChange}\n                />\n            </CardContent>\n        </Card>\n    )\n}","import React from 'react';\n// mui\nimport Grid from '@mui/material/Grid';\n// project imports\nimport StatusReportBar from './StatusReportBar';\nimport PurposeReportBar from './PurposeReportBar';\nimport TypesReportDonut from './TypesReportDonut';\nimport UserTasks from './UserTasks';\nimport RequestSummaryTable from './RequestSummaryTable';\nimport { useAppSelector } from '../../redux/hooks';\n\n\nexport default function DashboardPage() {\n    const { uid, office } = useAppSelector((state) => state.auth);\n\n    return (\n        <Grid container spacing={2} sx={{ maxHeight: 'calc(100vh - 80px)', overflowY: 'auto', pb: 2, px: 2 }}>\n            <Grid item md={12} lg={8}>\n                <StatusReportBar officeId={office?.sectionId as number} />\n            </Grid>\n            <Grid item md={6} lg={4}>\n                <TypesReportDonut\n                    officeId={office?.sectionId as number}\n                    completed={true}\n                />\n            </Grid>\n            <Grid item md={12} lg={8}>\n                <PurposeReportBar officeId={office?.sectionId as number} />\n            </Grid>\n            <Grid item md={6} lg={4}>\n                <TypesReportDonut\n                    officeId={office?.sectionId as number}\n                    completed={false}\n                />\n            </Grid>\n            <Grid item md={12} lg={12}>\n                <RequestSummaryTable />\n            </Grid>\n            <Grid item md={12} lg={8}>\n                <UserTasks userId={uid as string} />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport const chartColors = ['#9288F8', '#FFD2D7', '#461959', '#7A316F', '#CD6688', '#AED8CC', '#9A208C', '#E11299', '#35155D', '#512B81', '#4477CE', '#8CABFF', '#6F61C0', '#A084E8', '#8BE8E5', '#D5FFE4', '#4682A9', '#749BC2', '#91C8E4', '#F6F4EB', '#FFE7A0', '#322653', '#8062D6', '#FFEAEA', '#F5C6EC'];"],"names":["StatusReportBar","_ref","officeId","theme","useTheme","role","useAppSelector","state","auth","_React$useState","React","current","Date","setDate","getDate","getWeekBeforeDate","toISOString","_React$useState2","_slicedToArray","startDate","setStartDate","_React$useState3","_React$useState4","endDate","setEndDate","_useQuery","useQuery","GET_DOCUMENT_TYPE_ANALYTICS","variables","superuser","analytics","data","refetch","threadTypes","GET_ALL_THREAD_TYPES","threadStatus","GET_ALL_THREAD_STATUS","_React$useState5","_React$useState6","chartOptions","setChartOptions","_React$useState7","_React$useState8","chartSeries","setChartSeries","primary","palette","text","grey200","grey","grey500","chart","id","stacked","toolbar","show","zoom","enabled","colors","chartColors","responsive","breakpoint","options","legend","position","offsetX","offsetY","xaxis","type","categories","getAllThreadTypes","map","docType","labels","style","fontSize","yaxis","grid","borderColor","tooltip","plotOptions","bar","horizontal","columnWidth","fontFamily","useSeriesColors","markers","width","height","radius","itemMargin","vertical","fill","dataLabels","getAllThreadStatus","status","name","statusLabel","getThreadTypeAnalytics","filter","s","statusId","docId","length","reduce","sum","d","count","_jsxs","Card","children","_jsx","CardHeader","title","Box","Typography","variant","action","LocalizationProvider","dateAdapter","AdapterDayjs","Stack","direction","spacing","DatePicker","label","views","value","dayjs","onChange","date","format","CardContent","Chart","series","PurposeReportBar","GET_DOCUMENT_PURPOSE_ANALYTICS","threadPurposes","GET_ALL_THREAD_PURPOSE","getAllThreadPurpose","purpose","purposeName","getThreadPurposeAnalytics","purposeId","StyledChartWrapper","styled","marginTop","overflow","alignContent","borderTop","concat","divider","top","CHART_HEIGHT","TypesReportDonut","_ref2","completed","navigate","useNavigate","GET_DOCUMENT_STATUS_ANALYTICS","chartValues","setChartValues","LABEL_TOTAL","color","secondary","typography","subtitle2","fontWeight","lineHeight","LABEL_VALUE","h3","baseOptions","main","warning","info","error","success","dark","light","foreColor","disabled","states","hover","active","opacity","gradient","shadeIntensity","opacityFrom","opacityTo","stops","stroke","curve","lineCap","strokeDashArray","lines","axisBorder","axisTicks","size","strokeColors","background","paper","x","borderRadius","borderRadiusApplication","borderRadiusWhenStacked","pie","donut","total","radialBar","track","strokeWidth","alpha","radar","polygons","connectorColors","polarArea","rings","strokeColor","spokes","breakpoints","values","sm","md","merge","useChart","floating","horizontalAlign","dropShadow","fillSeriesColor","y","formatter","seriesName","toFixed","getStatusAnalytics","a","sx","dir","ReactApexChart","CardActions","Button","onClick","fullWidth","UserTasks","userId","tasks","GET_THREAD_INBOX","maxHeight","overflowY","getThreadInbox","display","justifyContent","alignItems","flexDirection","TaskAltIcon","mb","p","pr","task","TaskItem","refId","Divider","textAlign","endIcon","ArrowForwardIosIcon","formatInboxDate","toLocaleDateString","undefined","weekday","year","month","day","subject","author","dateUpdated","Avatar","firstName","charAt","lastName","minWidth","flexGrow","noWrap","flexShrink","optionYears","getFullYear","formatSummaryDate","RequestSummaryTable","uid","GET_DOCUMENT_SUMMARY_ANALYTICS","dateCreated","getMonth","summary","setMonth","setYear","page","setPage","rowsPerPage","setRowsPerPage","_React$useState9","_React$useState10","emptyRows","setEmptyRows","Math","max","getThreadSummary","TextField","event","parseInt","target","select","index","MenuItem","toString","CSVLink","filename","split","_toConsumableArray","thread","refSlipNum","officeSection","sectionOffice","officeName","recipient","sectionName","dateDue","startIcon","IosShareIcon","minHeight","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","roleName","align","Chip","colSpan","TablePagination","rowsPerPageOptions","component","onPageChange","newPage","onRowsPerPageChange","DashboardPage","_useAppSelector","office","Grid","container","pb","px","item","lg","sectionId"],"sourceRoot":""}