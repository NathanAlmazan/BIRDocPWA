{"version":3,"file":"static/js/771.7e43a154.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/Directory.tsx","pages/threads/History.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentPurpose,\r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_PURPOSE,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId?: number;\r\n    docTypeId?: number;\r\n    purposeId?: number;\r\n    attachments: boolean;\r\n    completed: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const theme = useTheme();\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [purposes, setPurposes] = React.useState<Queue>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    completed: false,\r\n    dateDue: new Date().toISOString()\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string,\r\n    purpose?: string\r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes && threadPurposes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            if (office.sectionName === \"default\") {\r\n                officeObject[office.sectionOffice.officeName + \" — All\"] = -(office.sectionOffice.officeId);\r\n                officeObject[office.sectionOffice.officeName + \" — Admin\"] = office.sectionId;\r\n            } else {\r\n                officeObject[office.sectionOffice.officeName + \" — \" + office.sectionName] = office.sectionId;\r\n            }\r\n        })\r\n        \r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n\r\n        let purposesObject: Queue = {};\r\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\r\n            purposesObject[purpose.purposeName] = purpose.purposeId;\r\n        })\r\n        setPurposes(purposesObject);\r\n\r\n    }\r\n  }, [officeSections, threadTypes, threadPurposes])\r\n\r\n  if (!offices || !types || !purposes) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\r\n\r\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.purposeId) {\r\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.name,\r\n                fileType: \"url\",\r\n                fileUrl: link.link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            await sendThreadMessage({ variables: { data: {\r\n                message: messageData.message,\r\n                files: messageFiles,\r\n                senderId: props.userId,\r\n                threadId: threadResult.data.createThread.refId\r\n            }}})\r\n\r\n            props.onCreateThread(threadResult.data.createThread.refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Stack spacing={3} sx={{ p: 2 }}>\r\n                <div>\r\n                    <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                        <Button \r\n                            variant='contained' \r\n                            endIcon={<SendIcon />}\r\n                            onClick={handleCreateThread}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                        <Tooltip title='Discard'>\r\n                            <IconButton onClick={props.onDiscardThread}>\r\n                                <DeleteOutlinedIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Stack>\r\n                    <Divider />\r\n                </div>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(offices)}\r\n                        onChange={handleRecipientChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.recipient !== undefined}\r\n                                helperText={formError && formError.recipient}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField \r\n                        name='subject'\r\n                        variant='standard'\r\n                        value={formData.subject}\r\n                        onChange={handleSubjectTextChange}\r\n                        fullWidth\r\n                        error={formError?.subject !== undefined}\r\n                        helperText={formError && formError.subject}\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadPurposeChange}\r\n                        options={Object.keys(purposes)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.purpose !== undefined}\r\n                                helperText={formError && formError.purpose}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n                \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadTypeChange}\r\n                        options={Object.keys(types)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.type !== undefined}\r\n                                helperText={formError && formError.type}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DatePicker \r\n                        label=\"Date Due\"\r\n                        views={[\"year\", \"month\", \"day\"]}\r\n                        value={dayjs(formData.dateDue)} \r\n                        onChange={handleDateDueChange} \r\n                        format=\"MMMM DD, YYYY\"\r\n                    />\r\n                </LocalizationProvider>\r\n\r\n                <FormControlLabel \r\n                    control={\r\n                        <Checkbox \r\n                            checked={formData.attachments} \r\n                            onChange={handleToggleAttachments} \r\n                        />\r\n                    } \r\n                    label=\"Attachments Required\" \r\n                />\r\n\r\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                        {formError && formError.general}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}","import React, { useState } from 'react';\r\n// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Popover from '@mui/material/Popover';\r\n// icons\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [open, setOpen] = useState<Element | null>(null);\r\n\r\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setOpen(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleOpen}\r\n        sx={{\r\n          p: 0,\r\n          mx: 2,\r\n          ...(open && {\r\n            '&:before': {\r\n              zIndex: 1,\r\n              content: \"''\",\r\n              width: '100%',\r\n              height: '100%',\r\n              borderRadius: '50%',\r\n              position: 'absolute',\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n            },\r\n          }),\r\n        }}\r\n      >\r\n        <FilterListIcon />\r\n      </IconButton>\r\n\r\n      <Popover\r\n        open={Boolean(open)}\r\n        anchorEl={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        PaperProps={{\r\n          sx: {\r\n            p: 0,\r\n            mt: 1.5,\r\n            ml: 0.75,\r\n            width: 360,\r\n            '& .MuiMenuItem-root': {\r\n              typography: 'body2',\r\n              borderRadius: 0.75,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            <List\r\n                disablePadding\r\n                subheader={\r\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\r\n                        Thread Types\r\n                    </ListSubheader>\r\n                }\r\n            >\r\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\r\n                  All\r\n                </ListItemButton>\r\n                <Divider sx={{ borderStyle: 'dashed' }} />\r\n\r\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\r\n                  <React.Fragment key={thread.docId}>\r\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\r\n                      {thread.docType}\r\n                    </ListItemButton>\r\n                    <Divider sx={{ borderStyle: 'dashed' }} />\r\n                  </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n      </Popover>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport Chip from '@mui/material/Chip';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport FilterPopover from './FilterPopover';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  mode: string;\r\n  compose: boolean;\r\n  mails?: Thread[];\r\n  onRefresh: () => void;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  }\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={props.mails === undefined} />\r\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n        {props.mode !== \"completed\" && (\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n        )}\r\n        \r\n        <IconButton onClick={props.onRefresh}>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\r\n      </Stack>\r\n      \r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 170px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {props.mails && props.mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\r\n            <React.Fragment key={msg.refId}>\r\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ mb: 2 }}>\r\n                        <Typography variant='body1' gutterBottom>\r\n                            {msg.subject}\r\n                        </Typography>\r\n                        <div>\r\n                          <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"subtitle2\"\r\n                            color=\"text.primary\"\r\n                          >\r\n                            {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\r\n                          </Typography>\r\n                          {` — ${msg.docType.docType} request For ${msg.purpose.purposeName}.`}\r\n                        </div>\r\n                    </Box>\r\n                  } \r\n                  secondary={\r\n                    <Box sx={{\r\n                      display: 'flex',\r\n                      flexDirection: 'row',\r\n                      justifyContent: 'space-between'\r\n                    }}>\r\n                      <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\r\n                      <Typography variant='caption'>\r\n                        {`Due at ${formatInboxDate(msg.dateDue)}`}\r\n                      </Typography>\r\n                    </Box>\r\n                  }\r\n                />\r\n              </ListItemButton>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (name: string, link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [name, setName] = React.useState<string>(\"\");\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(name, link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"name\"\r\n                    label=\"File Name\"\r\n                    fullWidth\r\n                    value={name}\r\n                    onChange={(event) => setName(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: {\r\n        name: string;\r\n        link: string;\r\n    }[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links.map(link => link.name)))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (name: string, link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, { name, link } ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l.name === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l.name !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.name,\r\n            fileType: \"url\",\r\n            fileUrl: link.link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={4}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet,\r\n    Image\r\n} from '@react-pdf/renderer';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { Form2309Data } from '../../pages/threads/Form2309';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.purpose.purposeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            {thread.author.signImage ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src=\"https://picsum.photos/200/300?random=1\" />\r\n                                </View>\r\n                            ) : (\r\n                                <Text style={styles.emptyCell}></Text>\r\n                            )}\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>{thread.author.officeSection.sectionOffice.refNum}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBoldSmall}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    );\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 35,\r\n      paddingBottom: 65,\r\n      paddingHorizontal: 35,\r\n    },\r\n    table: { \r\n      width: \"auto\", \r\n      borderStyle: \"solid\", \r\n      borderWidth: 1,\r\n      padding: 8\r\n    },\r\n    tableRow: { \r\n      margin: \"auto\", \r\n      marginTop: 2,\r\n      flexDirection: \"row\" \r\n    }, \r\n    tableCol: { \r\n      width: \"50%\"\r\n    },\r\n    recipientCol: { \r\n      width: \"70%\"\r\n    },\r\n    dateCol: { \r\n      width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n      width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n      margin: 3,\r\n      fontSize: 11,\r\n      textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n      height: 50\r\n    },\r\n    tableCellLeftBold: { \r\n      margin: 3,\r\n      fontSize: 11,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n  \ttableCellLeftBoldSmall: { \r\n      margin: 3,\r\n      fontSize: 9,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n      margin: 3,\r\n      fontSize: 11,\r\n      textAlign: \"right\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 3,\r\n        fontSize: 11,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 3,\r\n        fontSize: 10,\r\n        textAlign: \"center\"\r\n    },\r\n  \tsignatureContainer: {\r\n    \tdisplay: \"flex\",\r\n      \tflexDirection: \"row\",\r\n      \tjustifyContent: \"center\"\r\n    },\r\n  \tsignatureImage: {\r\n    \twidth: 90,\r\n      \theight: 50\r\n    }\r\n});\r\n  ","import React from 'react';\r\nimport { Thread } from '../../api/threads/types';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n// renderer\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\nimport axios from 'axios';\r\n\r\n\r\nexport interface Form2309Data {\r\n    subject: string;\r\n    remarks: string;\r\n}\r\n\r\nexport default function EditForm2309({ thread, onGenerate }: { thread: Thread, onGenerate: () => void }) {\r\n    const [formData, setFormData] = React.useState<Form2309Data>({\r\n        subject: '',\r\n        remarks: ''\r\n    });\r\n    const [upload, setUpload] = React.useState<File | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        setFormData(state => ({\r\n            ...state,\r\n            subject: thread.subject,\r\n            remarks: thread.messages[0].message\r\n        }))\r\n    }, [thread])\r\n\r\n    React.useEffect(() => {\r\n        const uploadForm = async () => {\r\n            if (upload) {\r\n                const form = new FormData();\r\n                form.append(\"form\", upload);\r\n                form.append(\"requestId\", thread.refId);\r\n\r\n                try {\r\n                    const result = await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                    window.open(result.data.fileUrl, \"_blank\");\r\n\r\n                    onGenerate();\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    return\r\n                }\r\n\r\n                setUpload(null);\r\n            }\r\n        }\r\n\r\n        uploadForm();\r\n    }, [upload, onGenerate, thread.refId]);\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const handleUploadForm = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) setUpload(event.target.files[0]);\r\n    }\r\n\r\n    const handleGenerateForm = async (blob: Blob | null, url: string | null) => {\r\n        if (url && blob) {\r\n            window.open(url, \"_blank\");\r\n\r\n            const file = new File([blob], `${thread.refSlipNum}.pdf`, {\r\n                type: \"application/pdf\",\r\n            });\r\n\r\n            const form = new FormData();\r\n            form.append(\"form\", file);\r\n            form.append(\"requestId\", thread.refId);\r\n\r\n            try {\r\n                await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                onGenerate();\r\n            } catch (err) {\r\n                console.log(err);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n            <TextField\r\n                multiline\r\n                rows={2}\r\n                name='subject'\r\n                label='Subject'\r\n                value={formData.subject}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <TextField\r\n                multiline\r\n                rows={3}\r\n                name='remarks'\r\n                label='Remarks'\r\n                value={formData.remarks}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\r\n                {({ blob, url, loading, error }) => (\r\n                     <Button \r\n                        fullWidth \r\n                        onClick={() => handleGenerateForm(blob, url)}\r\n                        variant='contained'>\r\n                            Generate Form 2309\r\n                    </Button>\r\n                )}\r\n            </PDFDownloadLink>\r\n           \r\n            <Button \r\n                fullWidth \r\n                disabled={upload !== null}\r\n                component='label'\r\n                variant='outlined'>\r\n                    Upload Form 2309\r\n\r\n                    <input type='file' hidden onChange={handleUploadForm} />\r\n            </Button>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\nimport Link from '@mui/material/Link';\r\n// types\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n\r\n\r\nexport default function ThreadDirectory(props: { messages: Messages[], reqForm?: string }) {\r\n    const [files, setFiles] = React.useState<MessageFiles[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        let msgFiles: MessageFiles[] = [];\r\n        props.messages.forEach(msg => {\r\n            msgFiles = msgFiles.concat(msg.files)\r\n        });\r\n        setFiles(msgFiles);\r\n\r\n    }, [props.messages])\r\n\r\n    console.log(files);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n             <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Shared Files\r\n            </Typography>\r\n            <List>\r\n              {props.reqForm && (\r\n                <>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={props.reqForm} target='_blank'>\r\n                                    Form 2309\r\n                                </Typography>\r\n                            }\r\n                            secondary='application/PDF'\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </>\r\n              )}\r\n\r\n              {files.map(file => (\r\n                <React.Fragment key={file.fileId}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={file.fileUrl} target='_blank'>\r\n                                    {file.fileName}\r\n                                </Typography>\r\n                            }\r\n                            secondary={file.fileType}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Stack from '@mui/material/Stack';\r\nimport Alert from '@mui/material/Alert';\r\nimport { ThreadHistory } from '../../api/threads/types';\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function History(props: { history: ThreadHistory[] }) {\r\n\r\n    const handleSeverity = (status: string | null) => {\r\n        if (status && status.includes(\"Closed\")) return \"success\";\r\n        else if (status && status.includes(\"Progress\")) return \"info\";\r\n        else if (status && status.includes(\"Approval\")) return \"warning\";\r\n        else return \"info\"\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n            <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Request History\r\n            </Typography>\r\n            <Stack spacing={2}>\r\n                {props.history.map(event => (\r\n                    <Alert severity={handleSeverity(event.status ? event.status.statusLabel : null)}>\r\n                        {`${event.historyLabel} ${event.status ? `to ${event.status.statusLabel}`: ''} at ${formatInboxDate(event.dateCreated)}`}\r\n                    </Alert>\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Alert from '@mui/material/Alert';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport Form2309 from './Form2309';\r\nimport ReplyBox from './ReplyBox';\r\nimport ThreadDirectory from './Directory';\r\nimport ThreadHistory from './History';\r\nimport { DocumentStatus, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { \r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    SET_MESSAGE_AS_READ, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\n\r\ninterface TabPaneProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nexport function TabPanel(props: TabPaneProps) {\r\n    return (\r\n        <div>\r\n            {props.value === props.index && props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n\r\n  const [tabValue, setTableValue] = React.useState<number>(0);\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const reloadThread = () => refetch({ uid: threadId });\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, refSlipNum, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments } = threadData.getThreadById;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                        {`Ref # ${refSlipNum}`}\r\n                    </Typography>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {((userId === threadData.getThreadById.author.accountId && !threadData.getThreadById.purpose.purposeName.includes(\"Approval\")) || \r\n                           (userId !== threadData.getThreadById.author.accountId && threadData.getThreadById.purpose.purposeName.includes(\"Approval\"))) && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                <Alert severity={completed ? \"success\" : \"info\"}>\r\n                    {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                </Alert>\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\r\n                <Tab label=\"Conversation\" />\r\n                <Tab label=\"Files\" />\r\n                <Tab label=\"History\" />\r\n                {threadData.getThreadById.author.accountId === userId && (\r\n                    <Tab label=\"Form 2309\" />\r\n                )}\r\n            </Tabs>\r\n           \r\n            <TabPanel index={0} value={tabValue}>\r\n                <Box sx={{ p: 2 }}>\r\n                    {messages.map(msg => (\r\n                        <Box \r\n                            key={msg.msgId} \r\n                            sx={{ \r\n                                my: 2, \r\n                                pl: msg.sender.accountId === userId ? 8 : 0,\r\n                                pr: msg.sender.accountId !== userId ? 8 : 0\r\n                            }}\r\n                        >\r\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ p: 2 }}>\r\n                    {!completed && (\r\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                    )}\r\n                </Box>\r\n            </TabPanel>\r\n\r\n            <TabPanel index={1} value={tabValue}>\r\n                <ThreadDirectory messages={threadData.getThreadById.messages} reqForm={threadData.getThreadById.reqForm} />\r\n            </TabPanel>\r\n\r\n            <TabPanel index={2} value={tabValue}>\r\n                <ThreadHistory history={threadData.getThreadById.history} />\r\n            </TabPanel>\r\n\r\n           {threadData.getThreadById.author.accountId === userId && (\r\n                <TabPanel index={3} value={tabValue}>\r\n                    <Form2309 thread={threadData.getThreadById} onGenerate={reloadThread} />\r\n                </TabPanel>\r\n           )}\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["CreateThread","props","theme","useTheme","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState8","formData","setFormData","_React$useState9","message","files","links","_React$useState10","messageData","setMessageData","_React$useState11","_React$useState12","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","officeId","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","name","fileType","fileUrl","concat","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","thread","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","id","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","filter","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","component","status","statusLabel","size","LinkDialog","setName","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","refSlipNum","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","signImage","signatureContainer","Image","signatureImage","src","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","refNum","tableCellLeftBoldSmall","Font","register","family","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","EditForm2309","onGenerate","upload","setUpload","state","messages","uploadForm","window","console","log","handleTextChange","_defineProperty","handleGenerateForm","_ref3","_callee2","blob","url","_context2","File","_x","_x2","PDFDownloadLink","document","_ref4","loading","ThreadDirectory","setFiles","msgFiles","reqForm","ListItem","ListItemIcon","FolderIcon","Link","History","history","includes","historyLabel","TabPanel","index","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","refetch","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","handleAttachmentChange","reloadThread","_threadData$getThread","dateUpdated","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","Tabs","e","Tab","pl","pr","msgId","ThreadHistory"],"sourceRoot":""}