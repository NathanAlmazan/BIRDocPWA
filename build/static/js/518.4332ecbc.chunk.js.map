{"version":3,"file":"static/js/518.4332ecbc.chunk.js","mappings":"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","sources":["pages/authentication/LoginUser.tsx"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from \"react-router-dom\"\n// material\nimport { styled } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport IconButton from '@mui/material/IconButton';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\n// icons\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\n// api\nimport { useMutation, useQuery } from '@apollo/client';\nimport { BirOffices, Roles, UserAccounts } from '../../api/threads/types';\nimport { GET_ALL_BIR_OFFICES, GET_ALL_ROLES, USER_LOGIN } from '../../api/offices';\n// redux\nimport { useAppDispatch } from '../../redux/hooks';\nimport { login } from '../../redux/slice/auth';\n\n// ----------------------------------------------------------------------\n\nconst ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 480,\n  margin: 'auto',\n  display: 'flex',\n  minHeight: '100vh',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport interface RegisterUserForm {\n    firstName: string;\n    lastName: string;\n    officeId: number;\n    roleId: number;\n    sectionId: number;\n    password: string;\n}\n\nexport const getFilteredOffices = (roleId: number, officeId: number): boolean => {\n    if (roleId === 1) return (officeId === 1);\n    else if (roleId === 2) return (officeId === 2);\n    else if (roleId === 3 || roleId === 4) return [11, 12, 13, 14, 15, 16, 17].includes(officeId);\n    else if (roleId === 5 || roleId === 6) return [3, 4, 5, 6, 7, 8, 9, 10].includes(officeId);\n    else return true;\n}\n\nexport default function LoginUser() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { data: offices } = useQuery<{ getAllBirOffices: BirOffices[] }>(GET_ALL_BIR_OFFICES);\n  const { data: roles } = useQuery<{ getAllRoles: Roles[] }>(GET_ALL_ROLES);\n  const [userLogin, { data: userAccount, error }] = useMutation<{ userLogin: UserAccounts }>(USER_LOGIN);\n  const [selectedOffice, setSelectedOffice] = React.useState<BirOffices>();\n  const [showSections, setShowSections] = React.useState<boolean>(true);\n  const [visible, setVisible] = React.useState<boolean>(false);\n  const [credentials, setCredentials] = React.useState<RegisterUserForm>({\n    firstName: \"\",\n    lastName: \"\",\n    officeId: 1,\n    sectionId: 1,\n    roleId: 9,\n    password: \"\"\n  })\n  const { firstName, lastName, officeId, sectionId, roleId, password } = credentials;\n\n  React.useEffect(() => {\n    if (offices) {\n        const selected = offices.getAllBirOffices.find(office => office.officeId === officeId);\n        setSelectedOffice(selected);\n\n        if (selected && [3, 4, 5, 6].includes(roleId)) {\n            setShowSections(false);\n            setCredentials(state => ({ ...state, sectionId: selected.officeSections[0].sectionId }));\n        }\n        else if (selected && selected.officeSections.length > 1) {\n            setShowSections(true);\n            setCredentials(state => ({ ...state, sectionId: selected.officeSections[1].sectionId }));\n        }\n        else if (selected) {\n            setShowSections(false);\n            setCredentials(state => ({ ...state, sectionId: selected.officeSections[0].sectionId }));\n        }\n    }\n  }, [officeId, offices, roleId]);\n\n  React.useEffect(() => {\n    if (roleId === 1) {\n        setShowSections(false);\n        setCredentials(state => ({ ...state, sectionId: 1, officeId: 1 }));\n    } else if (roleId === 2) {\n        setShowSections(false);\n        setCredentials(state => ({ ...state, sectionId: 2, officeId: 2 }));\n    } else if (offices) {\n        setCredentials(state => ({ ...state, officeId: offices.getAllBirOffices.filter(office => getFilteredOffices(roleId, office.officeId))[0].officeId }));\n    }\n  }, [roleId, offices])\n\n  React.useEffect(() => {\n    if (userAccount) {\n        dispatch(login({\n            uid: userAccount.userLogin.accountId,\n            username: userAccount.userLogin.firstName + \" \" + userAccount.userLogin.lastName,\n            role: userAccount.userLogin.role,\n            office: {\n                sectionId: userAccount.userLogin.officeSection.sectionId,\n                sectionName: userAccount.userLogin.officeSection.sectionName,\n                officers: [],\n                sectionOffice: {\n                    officeId: userAccount.userLogin.officeSection.sectionOffice.officeId,\n                    officeName: userAccount.userLogin.officeSection.sectionOffice.officeName,\n                    officeSections: []\n                }\n            }\n        }));\n        navigate(\"/app/dashboard\");\n    }\n  }, [userAccount, navigate, dispatch])\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCredentials({ ...credentials, [event.target.name]: event.target.value })\n  }\n\n  const handleRegisterUser = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n        await userLogin({\n            variables: {\n                data: {\n                    firstName: firstName,\n                    lastName: lastName,\n                    officeId: sectionId,\n                    password: password,\n                    roleId: roleId\n                }\n            }\n        })\n    } catch (err) {}\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <ContentStyle>\n        <Stack sx={{ mb: 5 }}>\n          <Typography variant=\"h4\" gutterBottom>\n              Sign In\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>Enter your credentials below.</Typography>\n        </Stack>\n\n        {error && (\n            <Alert severity='error' sx={{ my: 2 }}>{`${error.message}. `} <a href='/auth/reset'>Forgot Password?</a></Alert>\n        )}\n        \n        <Stack spacing={2} component='form' onSubmit={handleRegisterUser}>\n            <TextField \n                name='firstName'\n                label='First Name'\n                value={firstName}\n                onChange={handleTextChange}\n                fullWidth\n                required\n            />\n\n            <TextField \n                name='lastName'\n                label='Last Name'\n                value={lastName}\n                onChange={handleTextChange}\n                fullWidth\n                required\n            />\n\n            {roles && (\n                <TextField \n                    name='roleId'\n                    label='Position'\n                    value={roleId}\n                    onChange={handleTextChange}\n                    fullWidth\n                    required\n                    select\n                >\n                    {roles.getAllRoles.map(role => (\n                        <MenuItem key={role.roleId} value={role.roleId}>{role.roleName}</MenuItem>\n                    ))}\n                </TextField>\n            )}\n\n            {offices && (\n                <TextField \n                    name='officeId'\n                    label='Office'\n                    value={officeId}\n                    onChange={handleTextChange}\n                    fullWidth\n                    required\n                    select\n                >\n                    {offices.getAllBirOffices.filter(office => getFilteredOffices(roleId, office.officeId)).map(office => (\n                        <MenuItem key={office.officeId} value={office.officeId}>{office.officeName}</MenuItem>\n                    ))}\n                </TextField>\n            )}\n\n           {showSections && selectedOffice && selectedOffice.officeSections.length > 1 && (\n                <TextField \n                    name='sectionId'\n                    label='Section'\n                    value={sectionId}\n                    onChange={handleTextChange}\n                    fullWidth\n                    required\n                    select\n                >\n                    {selectedOffice.officeSections.filter(section => section.sectionName !== \"default\").map(section => (\n                        <MenuItem key={section.sectionId} value={section.sectionId}>{section.sectionName === \"default\" ? \"Main\" : section.sectionName}</MenuItem>\n                    ))}\n                </TextField>\n           )}\n\n            <TextField\n                fullWidth\n                type={visible ? 'text' : 'password'}\n                label=\"Password\"\n                name='password'\n                required\n                value={password}\n                onChange={handleTextChange}\n                InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton onClick={() => setVisible(!visible)} edge=\"end\">\n                            {visible ?  <VisibilityOffIcon /> : <VisibilityIcon />}\n                        </IconButton>\n                    </InputAdornment>\n                )\n                }}\n            />\n\n            <Button\n                type='submit'\n                variant='contained'\n                color='secondary'\n                fullWidth\n            >\n                Login\n            </Button>\n        </Stack>\n\n        <Typography variant=\"body2\" align=\"center\" sx={{ mt: 3 }}>\n          <Link variant=\"subtitle2\" onClick={() => navigate(\"/auth/register\")} sx={{ cursor: 'pointer' }}>\n            Register Account\n          </Link>\n        </Typography>\n      </ContentStyle>\n    </Container>\n  );\n}\n\n"],"names":["ContentStyle","styled","_ref","maxWidth","margin","display","minHeight","flexDirection","justifyContent","padding","theme","spacing","getFilteredOffices","roleId","officeId","includes","LoginUser","navigate","useNavigate","dispatch","useAppDispatch","offices","useQuery","GET_ALL_BIR_OFFICES","data","roles","GET_ALL_ROLES","_useMutation","useMutation","USER_LOGIN","_useMutation2","_slicedToArray","userLogin","_useMutation2$","userAccount","error","_React$useState","React","_React$useState2","selectedOffice","setSelectedOffice","_React$useState3","_React$useState4","showSections","setShowSections","_React$useState5","_React$useState6","visible","setVisible","_React$useState7","firstName","lastName","sectionId","password","_React$useState8","credentials","setCredentials","selected","getAllBirOffices","find","office","state","_objectSpread","officeSections","length","filter","login","uid","accountId","username","role","officeSection","sectionName","officers","sectionOffice","officeName","handleTextChange","event","_defineProperty","target","name","value","handleRegisterUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","preventDefault","variables","t0","stop","_x","apply","arguments","_jsx","Container","children","_jsxs","Stack","sx","mb","Typography","variant","gutterBottom","color","Alert","severity","my","concat","message","href","component","onSubmit","TextField","label","onChange","fullWidth","required","select","getAllRoles","map","MenuItem","roleName","section","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","VisibilityOffIcon","VisibilityIcon","Button","align","mt","Link","cursor"],"sourceRoot":""}