{"version":3,"file":"static/js/341.57a4a54e.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\n// mui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport Chip from '@mui/material/Chip';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n// icons\nimport SendIcon from '@mui/icons-material/Send';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n// api\nimport { useQuery, useMutation } from '@apollo/client';\nimport axios from 'axios';\nimport { \n    DocumentPurpose,\n    DocumentTypes, \n    MessageFiles, \n    Messages, \n    OfficeSections, \n    Thread\n} from '../../api/threads/types';\nimport { \n    CREATE_THREAD,\n    GET_ALL_THREAD_PURPOSE,\n    GET_ALL_THREAD_TYPES, \n    GET_BIR_OFFICES,\n    SEND_THREAD_MESSAGE\n} from '../../api/threads';\n// project imports\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\nimport { LoadOverlay } from '../../components/Loaders';\n\n\ninterface ThreadInput {\n    subject: string;\n    authorId: string;\n    statusId: number;\n    recipientId?: number;\n    docTypeId?: number;\n    purposeId?: number;\n    attachments: boolean;\n    completed: boolean;\n    dateDue: string;\n}\n\ninterface Queue {\n    [key: string]: number\n}\n\ninterface CreateThreadProps {\n    userId: string;\n    onDiscardThread: () => void;\n    onCreateThread: (threadId: string) => void;\n}\n\nexport default function CreateThread(props: CreateThreadProps) {\n  const theme = useTheme();\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\n  const [offices, setOffices] = React.useState<Queue>();\n  const [types, setTypes] = React.useState<Queue>();\n  const [purposes, setPurposes] = React.useState<Queue>();\n  const [formData, setFormData] = React.useState<ThreadInput>({\n    subject: \"\",\n    authorId: props.userId,\n    statusId: 2,\n    attachments: true,\n    completed: false,\n    dateDue: new Date().toISOString()\n  })\n  const [messageData, setMessageData] = React.useState<MessageInput>({\n    message: \"\",\n    files: [],\n    links: []\n  })\n  const [formError, setFormError] = React.useState<{ \n    recipient?: string, \n    subject?: string, \n    type?: string, \n    general?: string,\n    purpose?: string\n  }>();\n\n  React.useEffect(() => {\n    if (officeSections && threadTypes && threadPurposes) {\n        let officeObject: Queue = {};\n        officeSections.getAllOfficeSections.forEach(office => {\n            officeObject[office.sectionName === \"default\" ?\n            office.sectionOffice.officeName :\n            office.sectionOffice.officeName + \" — \" + office.sectionName] = office.sectionId;\n        })\n        setOffices(officeObject);\n\n        let typesObject: Queue = {};\n        threadTypes.getAllThreadTypes.forEach(type => {\n            typesObject[type.docType] = type.docId;\n        })\n        setTypes(typesObject);\n\n        let purposesObject: Queue = {};\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\n            purposesObject[purpose.purposeName] = purpose.purposeId;\n        })\n        setPurposes(purposesObject);\n\n    }\n  }, [officeSections, threadTypes, threadPurposes])\n\n  console.log(formData.purposeId);\n  console.log(purposes)\n\n  if (!offices || !types || !purposes) return <LoadOverlay open={true} />\n\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\n\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\n\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\n\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\n\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\n\n  const handleDateDueChange = (date: Dayjs | null) => {\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\n  }\n\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\n\n  const handleCreateThread = async () => {\n    // validation\n    if (!formData.recipientId) {\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\n        return\n    }\n\n    if (!formData.purposeId) {\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\n        return\n    }\n\n    if (!formData.docTypeId) {\n        setFormError({ ...formError, type: \"Type is required.\" });\n        return\n    }\n\n    if (formData.subject.length === 0) {\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\n        return\n    }\n\n    // create thread\n    try {\n        const threadResult = await createThread({ variables: { data: formData }});\n\n        if (!threadResult.data) {\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\n            return\n        }\n\n         // create initial message\n        let uploadedFiles: MessageFiles[] = [];\n        let insertedLinks: MessageFiles[] = [];\n\n        // upload files if any\n        if (messageData.files.length > 0) {\n            const form = new FormData();\n            messageData.files.forEach((file) => {\n                form.append(\"files\", file);\n            })\n\n            try {\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n                uploadedFiles = result.data.files;\n            } catch (err) {\n                setFormError({ ...formError, general: (err as Error).message });\n                return\n            }\n        }\n\n        // arrange links if any\n        if (messageData.links.length > 0) {\n            insertedLinks = messageData.links.map(link => ({\n                fileName: link.split('/').pop() as string,\n                fileType: \"\",\n                fileUrl: link\n            }))\n        }\n\n        // combine link array\n        const messageFiles = uploadedFiles.concat(insertedLinks);\n\n        // send first message\n        try {\n            await sendThreadMessage({ variables: { data: {\n                message: messageData.message,\n                files: messageFiles,\n                senderId: props.userId,\n                threadId: threadResult.data.createThread.refId\n            }}})\n\n            props.onCreateThread(threadResult.data.createThread.refId);\n        } catch (err) {\n            setFormError({ ...formError, general: (err as Error).message });\n            return\n        }\n\n    } catch (err) {\n        setFormError({ ...formError, general: (err as Error).message });\n        return\n    }\n  }\n\n  return (\n    <Paper sx={{ width: '100%' }}>\n        <Box \n            sx={{ \n                width: '100%', \n                maxHeight: 'calc(100vh - 105px)', \n                overflowY: 'auto',\n                overflowX: 'hidden',\n                \"::-webkit-scrollbar\": {\n                    height: \"8px\",\n                    width: \"8px\"\n                },\n\n                /* Track */\n                \"::-webkit-scrollbar-track\": {\n                    background: theme.palette.grey[300] \n                },\n                \n                /* Handle */\n                \"::-webkit-scrollbar-thumb\": {\n                    background: theme.palette.secondary.main\n                },\n                \n                /* Handle on hover */\n                \"::-webkit-scrollbar-thumb:hover\": {\n                    background: theme.palette.primary.dark\n                }\n            }}\n        >\n            <Stack spacing={3} sx={{ p: 2 }}>\n                <div>\n                    <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\n                        <Button \n                            variant='contained' \n                            endIcon={<SendIcon />}\n                            onClick={handleCreateThread}\n                        >\n                            Send\n                        </Button>\n                        <Tooltip title='Discard'>\n                            <IconButton onClick={props.onDiscardThread}>\n                                <DeleteOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Stack>\n                    <Divider />\n                </div>\n            \n                <Stack direction='row' spacing={2}>\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\n                    <Autocomplete\n                        freeSolo\n                        fullWidth\n                        options={Object.keys(offices)}\n                        onChange={handleRecipientChange}\n                        renderInput={(params) => \n                            <TextField \n                                {...params} \n                                variant='standard' \n                                error={formError?.recipient !== undefined}\n                                helperText={formError && formError.recipient}\n                            />\n                        }\n                    />\n                </Stack>\n            \n                <Stack direction='row' spacing={2}>\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\n                    <TextField \n                        name='subject'\n                        variant='standard'\n                        value={formData.subject}\n                        onChange={handleSubjectTextChange}\n                        fullWidth\n                        error={formError?.subject !== undefined}\n                        helperText={formError && formError.subject}\n                    />\n                </Stack>\n\n                <Stack direction='row' spacing={2}>\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\n                    <Autocomplete\n                        freeSolo\n                        fullWidth\n                        onChange={handleThreadPurposeChange}\n                        options={Object.keys(purposes)}\n                        renderInput={(params) => \n                            <TextField \n                                {...params} \n                                variant='standard' \n                                error={formError?.purpose !== undefined}\n                                helperText={formError && formError.purpose}\n                            />\n                        }\n                    />\n                </Stack>\n                \n                <Stack direction='row' spacing={2}>\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\n                    <Autocomplete\n                        freeSolo\n                        fullWidth\n                        onChange={handleThreadTypeChange}\n                        options={Object.keys(types)}\n                        renderInput={(params) => \n                            <TextField \n                                {...params} \n                                variant='standard' \n                                error={formError?.type !== undefined}\n                                helperText={formError && formError.type}\n                            />\n                        }\n                    />\n                </Stack>\n\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                    <DatePicker \n                        label=\"Date Due\"\n                        views={[\"year\", \"month\", \"day\"]}\n                        value={dayjs(formData.dateDue)} \n                        onChange={handleDateDueChange} \n                        format=\"MMMM DD, YYYY\"\n                    />\n                </LocalizationProvider>\n\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            checked={formData.attachments} \n                            onChange={handleToggleAttachments} \n                        />\n                    } \n                    label=\"Attachments Required\" \n                />\n\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\n\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                        {formError && formError.general}\n                    </Alert>\n                </Snackbar>\n            </Stack>\n        </Box>\n    </Paper>\n  )\n}","import React, { useState } from 'react';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Popover from '@mui/material/Popover';\n// icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { DocumentTypes } from '../../api/threads/types';\n\n// ----------------------------------------------------------------------\n\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const [open, setOpen] = useState<Element | null>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setOpen(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setOpen(null);\n  };\n\n  return (\n    <>\n      <IconButton\n        onClick={handleOpen}\n        sx={{\n          p: 0,\n          mx: 2,\n          ...(open && {\n            '&:before': {\n              zIndex: 1,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              borderRadius: '50%',\n              position: 'absolute',\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\n            },\n          }),\n        }}\n      >\n        <FilterListIcon />\n      </IconButton>\n\n      <Popover\n        open={Boolean(open)}\n        anchorEl={open}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        PaperProps={{\n          sx: {\n            p: 0,\n            mt: 1.5,\n            ml: 0.75,\n            width: 360,\n            '& .MuiMenuItem-root': {\n              typography: 'body2',\n              borderRadius: 0.75,\n            },\n          },\n        }}\n      >\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\n            <List\n                disablePadding\n                subheader={\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\n                        Thread Types\n                    </ListSubheader>\n                }\n            >\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\n                  All\n                </ListItemButton>\n                <Divider sx={{ borderStyle: 'dashed' }} />\n\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\n                  <React.Fragment key={thread.docId}>\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\n                      {thread.docType}\n                    </ListItemButton>\n                    <Divider sx={{ borderStyle: 'dashed' }} />\n                  </React.Fragment>\n                ))}\n            </List>\n        </Box>\n      </Popover>\n    </>\n  );\n}","import React from 'react';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Divider from '@mui/material/Divider';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\n// icons\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddIcon from '@mui/icons-material/Add';\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\n// project imports\nimport FilterPopover from './FilterPopover';\nimport { Thread } from '../../api/threads/types';\nimport { LoadOverlay } from '../../components/Loaders';\n\n\ninterface EmailListProps {\n  mode: string;\n  compose: boolean;\n  mails?: Thread[];\n  onRefresh: () => void;\n  onComposeThread: () => void;\n  onThreadClick: (threadId: string) => void;\n}\n\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\n  \"inbox\": {\n    title: \"Job Well Done!\",\n    sub: \"You have no active threads\"\n  },\n  \"sent\": {\n    title: \"Compose a thread\",\n    sub: \"You have no created threads\"\n  },\n  \"completed\": {\n    title: \"It's time to work!\",\n    sub: \"You have no finished threads\"\n  },\n  \"regionInbox\": {\n    title: \"Compose a thread\",\n    sub: \"No threads are created yet\"\n  }\n}\n\nconst formatInboxDate = (date: string | Date) => {\n  const target = new Date(date);\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function EmailList(props: EmailListProps) {\n  const theme = useTheme();\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\n\n  return (\n    <React.Fragment>\n      <LoadOverlay open={props.mails === undefined} />\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\n        {props.mode !== \"completed\" && (\n          <Button \n            variant='contained' \n            endIcon={<AddIcon />} \n            disabled={props.compose}\n            onClick={props.onComposeThread}\n          >\n              Compose\n          </Button>\n        )}\n        \n        <IconButton onClick={props.onRefresh}>\n          <RefreshIcon />\n        </IconButton>\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\n      </Stack>\n      \n      <Paper sx={{ width: '100%' }}>\n        <List \n          sx={{ \n            width: '100%', \n            maxHeight: 'calc(100vh - 170px)', \n            overflowY: 'auto',\n            \"::-webkit-scrollbar\": {\n              height: \"8px\",\n              width: \"8px\"\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n                background: theme.palette.grey[300] \n            },\n            \n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n                background: theme.palette.secondary.main\n            },\n            \n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n                background: theme.palette.primary.dark\n            }\n          }}>\n\n          {props.mails && props.mails.length === 0 && (\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\n              <Typography variant=\"subtitle1\">\n                  {emptyMessages[props.mode].title}\n              </Typography>\n              <Typography variant=\"body1\">\n                {emptyMessages[props.mode].sub}\n              </Typography>\n            </Box>\n          )}\n          \n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\n            <React.Fragment key={msg.refId}>\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\n\n                <ListItemAvatar>\n                  <Avatar>\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={\n                    <Box>\n                        <Typography variant='body1' gutterBottom>\n                            {msg.subject}\n                        </Typography>\n                        <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\n                        <Typography variant='caption'>\n                          {` Due at ${formatInboxDate(msg.dateDue)}`}\n                        </Typography>\n                    </Box>\n                  } \n                  secondary={\n                    <React.Fragment>\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component=\"span\"\n                        variant=\"subtitle2\"\n                        color=\"text.primary\"\n                      >\n                        {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\n                      </Typography>\n                      {\" — \" + msg.docType.docType}\n                    </React.Fragment>\n                  }\n                />\n              </ListItemButton>\n              <Divider variant=\"inset\" component=\"li\" />\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n\ninterface LinkDialogProps {\n    open: boolean;\n    onClose: () => void;\n    onSubmit: (link: string) => void;\n}\n\nexport default function LinkDialog(props: LinkDialogProps) {\n  const [link, setLink] = React.useState<string>(\"\");\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    props.onSubmit(link);\n    setLink(\"\");\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\n        <form onSubmit={handleSubmit} >\n            <DialogTitle>Add Link</DialogTitle>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    name=\"link\"\n                    label=\"File Link\"\n                    type=\"url\"\n                    fullWidth\n                    value={link}\n                    onChange={(event) => setLink(event.target.value)}\n                    variant=\"standard\"\n                    sx={{ minWidth: 500 }}\n                    required\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button type='submit'>Add Link</Button>\n            </DialogActions>\n        </form>\n    </Dialog>\n  );\n}\n","import React from 'react'\n// mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport Chip from '@mui/material/Chip';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n// icons\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport ReplyIcon from '@mui/icons-material/Reply';\n// project imports\nimport LinkDialog from './AddLinkDialog';\nimport { MessageFiles, Messages } from '../../api/threads/types';\n// api\nimport { useMutation } from '@apollo/client';\nimport axios from 'axios';\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\n\n\nexport interface MessageInput {\n    message: string;\n    files: File[];\n    links: string[];\n}\n\nexport interface MessageCreateInput {\n    message: string;\n    senderId: string;\n    threadId: string;\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\n}\n\ninterface ReplyBoxProps {\n    userId: string;\n    threadId?: string;\n    attached?: boolean;\n    onChange?: (data: MessageInput) => void;\n    onSubmit?: () => void;\n}\n\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [attachments, setAttachments] = React.useState<string[]>([]);\n  const [formData, setFormData] = React.useState<MessageInput>({\n    message: \"\",\n    files: [],\n    links: []\n  })\n  const [formError, setFormError] = React.useState<string>();\n\n  React.useEffect(() => {\n    const fileNames = formData.files.map(file => file.name);\n    setAttachments(fileNames.concat(formData.links))\n  }, [formData, onChange]);\n\n  React.useEffect(() => {\n    if (onChange) onChange(formData);\n  }, [formData, onChange])\n\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\n\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) \n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\n  }\n\n  const handleAddLink = (link: string) => {\n    setFormData({ ...formData, links: [ ...formData.links, link ] });\n    setOpen(false);\n  }\n\n  const handleDelete = (name: string) => {\n    const link = formData.links.find(l => l === name);\n    const file = formData.files.find(f => f.name === name);\n\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l !== name) });\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\n  }\n\n  const handleCloseSnackbar = () => setFormError(undefined);\n\n  const handleSendThreadMessage = async () => {\n    // validation\n    if (!threadId) return\n\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\n        setFormError(\"Attached file is required.\");\n        return\n    }\n\n    // create initial message\n    let uploadedFiles: MessageFiles[] = [];\n    let insertedLinks: MessageFiles[] = [];\n\n    // upload files if any\n    if (formData.files.length > 0) {\n        const form = new FormData();\n        formData.files.forEach((file) => {\n            form.append(\"files\", file);\n        })\n\n        try {\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n            uploadedFiles = result.data.files;\n        } catch (err) {\n            setFormError((err as Error).message);\n            return\n        }\n    }\n\n    // arrange links if any\n    if (formData.links.length > 0) {\n        insertedLinks = formData.links.map(link => ({\n            fileName: link.split('/').pop() as string,\n            fileType: \"\",\n            fileUrl: link\n        }))\n    }\n\n    // combine link array\n    const messageFiles = uploadedFiles.concat(insertedLinks);\n\n    // send first message\n    try {\n        await sendThreadMessage({ variables: { data: {\n            message: formData.message,\n            files: messageFiles,\n            senderId: userId,\n            threadId: threadId\n        }}})\n\n        // reset form\n        setFormData({\n            message: \"\",\n            files: [],\n            links: []\n        })\n\n        if (onSubmit) onSubmit();\n    } catch (err) {\n        setFormError((err as Error).message);\n        return\n    }\n  }\n\n\n  return (\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\n        <TextField \n            name='message'\n            value={formData.message}\n            onChange={handleMessageTextChange}\n            multiline\n            rows={6}\n            fullWidth\n        />\n        <Stack \n            direction='row' \n            justifyContent='space-between' \n            alignItems='center' \n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\n        >\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n                <Tooltip title='Upload File'>\n                    <IconButton component=\"label\">\n                        <FileUploadIcon />\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title='Insert Link'>\n                    <IconButton onClick={() => setOpen(true)}>\n                        <InsertLinkIcon />\n                    </IconButton>\n                </Tooltip>\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\n                    {attachments.map(name => (\n                        <Chip\n                            key={name}\n                            label={name}\n                            sx={{ mx: 1 }}\n                            onDelete={() => handleDelete(name)}\n                        />\n                    ))}\n                </Box>\n            </Box>\n\n            {threadId && (\n                <Button \n                    variant='contained' \n                    size='large' \n                    endIcon={<ReplyIcon />}\n                    onClick={handleSendThreadMessage}\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\n                >\n                    Reply\n                </Button>\n            )}\n        </Stack>\n\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\n\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                {formError && formError}\n            </Alert>\n        </Snackbar>\n    </Box>\n  )\n}","import React from 'react';\nimport Card from '@mui/material/Card';\nimport Box from '@mui/material/Box';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n// types\nimport { Messages } from '../../api/threads/types';\n\n\nconst formatInboxDate = (date: string | Date) => {\n  const target = new Date(date);\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\n  if (sender) return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ backgroundColor: 'red' }}>\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\n          </Avatar>\n        }\n        title={content.sender.firstName + ' ' + content.sender.lastName}\n        subheader={content.sender.role.roleName}\n        action={\n          <Typography variant='body2'>\n            {formatInboxDate(content.dateSent)}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {content.message}\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\n          {content.files.map(file => (\n            <Chip \n              key={file.fileId} \n              label={file.fileName} \n              variant=\"outlined\" \n              component=\"a\" \n              href={file.fileUrl} \n              target='_blank' \n              clickable \n            />\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\n          </Avatar>\n        }\n        title={content.sender.firstName + ' ' + content.sender.lastName}\n        subheader={content.sender.role.roleName}\n        action={\n          <Typography variant='body2'>\n            {formatInboxDate(content.dateSent)}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {content.message}\n        </Typography>\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\n            {content.files.map(file => (\n              <Chip \n                key={file.fileId} \n                label={file.fileName} \n                variant=\"outlined\" \n                component=\"a\" \n                href={file.fileUrl} \n                target='_blank' \n                clickable \n              />\n            ))}\n        </Stack>\n      </CardContent>\n    </Box>\n  );\n}\n","import {\n    Document,\n    Page,\n    View,\n    Text,\n    Font,\n    StyleSheet\n} from '@react-pdf/renderer';\nimport { Thread } from '../../api/threads/types';\nimport { Form2309Data } from '../../pages/threads/Form2309';\n\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nFont.register({\n    family: 'Oswald',\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\n});\n\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \n    \n    return (\n        <Document>\n            <Page style={styles.body}>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.tableCol}>\n                            <Text style={styles.tableCellLeft}>BIR</Text>\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\n                        </View>\n                        <View style={styles.tableCol}>\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\n                        </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                    <View style={styles.purposeCol}>\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\n                    </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\n                            <Text style={styles.tableCellLeft}>{thread.purpose.purposeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                    <View style={styles.purposeCol}>\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\n                    </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\n                            <Text style={styles.emptyCell}></Text>\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>Office Code: RR-6</Text>\n                        </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.purposeCol}>\n                            <Text style={styles.tableCellLeftBold}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\n                        </View>\n                    </View>\n                </View>\n            </Page>\n        </Document>\n);\n}\n  \nconst styles = StyleSheet.create({\n    body: {\n      paddingTop: 35,\n      paddingBottom: 65,\n      paddingHorizontal: 35,\n    },\n    table: { \n      width: \"auto\", \n      borderStyle: \"solid\", \n      borderWidth: 1,\n      padding: 8\n    },\n    tableRow: { \n      margin: \"auto\", \n      marginTop: 2,\n      flexDirection: \"row\" \n    }, \n    tableCol: { \n      width: \"50%\"\n    },\n    recipientCol: { \n      width: \"70%\"\n    },\n    dateCol: { \n      width: \"30%\"\n    },\n    purposeCol: { \n      width: \"100%\"\n    },\n    tableCellLeft: { \n      margin: 3,\n      fontSize: 11,\n      textAlign: \"left\"\n    },\n    emptyCell: { \n      height: 30\n    },\n    tableCellLeftBold: { \n      margin: 3,\n      fontSize: 11,\n      textAlign: \"left\",\n      fontWeight: \"bold\"\n    },\n    tableCellRight: { \n      margin: 3,\n      fontSize: 11,\n      textAlign: \"right\"\n    },\n    tableCellCenter: { \n        margin: 3,\n        fontSize: 11,\n        textAlign: \"center\"\n    },\n    tableCellCenterSmall: { \n        margin: 3,\n        fontSize: 10,\n        textAlign: \"center\"\n    }\n});\n  ","import React from 'react';\nimport { Thread } from '../../api/threads/types';\n// mui\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n// renderer\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport Form2309 from '../../components/Form2309';\n\n\nexport interface Form2309Data {\n    subject: string;\n    remarks: string;\n}\n\nexport default function EditForm2309({ thread }: { thread: Thread }) {\n    const [formData, setFormData] = React.useState<Form2309Data>({\n        subject: '',\n        remarks: ''\n    })\n\n    React.useEffect(() => {\n        setFormData(state => ({\n            ...state,\n            subject: thread.subject,\n            remarks: thread.messages[0].message\n        }))\n    }, [thread])\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({ ...formData, [event.target.name]: event.target.value })\n    }\n\n    return (\n        <Stack spacing={3} sx={{ p: 2 }}>\n            <TextField\n                multiline\n                rows={2}\n                name='subject'\n                label='Subject'\n                value={formData.subject}\n                onChange={handleTextChange}\n            />\n\n            <TextField\n                multiline\n                rows={3}\n                name='remarks'\n                label='Remarks'\n                value={formData.remarks}\n                onChange={handleTextChange}\n            />\n\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\n                {({ blob, url, loading, error }) => (\n                     <Button \n                        fullWidth \n                        component='a'\n                        href={url as string}\n                        target='_blank'\n                        variant='contained'>\n                            Generate Form 2309\n                    </Button>\n                )}\n            </PDFDownloadLink>\n        </Stack>\n    );\n}","import React from 'react';\n// mui\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Alert from '@mui/material/Alert';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport { useTheme } from '@mui/material/styles';\n// icons\nimport TuneIcon from '@mui/icons-material/Tune';\nimport CloseIcon from '@mui/icons-material/Close';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n// project imports\nimport { LoadOverlay } from '../../components/Loaders';\nimport MessageCard from './MessageCard';\nimport Form2309 from './Form2309';\nimport ReplyBox from './ReplyBox';\nimport { DocumentStatus, Thread } from '../../api/threads/types';\n// api\nimport { useQuery, useMutation } from '@apollo/client';\nimport { \n    GET_ALL_THREAD_STATUS, \n    GET_THREAD_BY_ID, \n    SET_MESSAGE_AS_READ, \n    UPDATE_THREAD_STATUS\n} from '../../api/threads';\n\ninterface TabPaneProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nexport function TabPanel(props: TabPaneProps) {\n    return (\n        <div>\n            {props.value === props.index && props.children}\n        </div>\n    )\n}\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n  }\n\ninterface ThreadListProps {\n    userId: string;\n    threadId: string;\n}\n\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\n  const theme = useTheme();\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\n    variables: { uid: threadId }\n  });\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\n\n  const [tabValue, setTableValue] = React.useState<number>(0);\n  const [expanded, setExpanded] = React.useState<boolean>(false);\n  const [statusId, setStatusId] = React.useState<number>(2);\n  const [attach, setAttach] = React.useState<string>('true');\n  const [completed, setCompleted] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (threadData) {\n        setStatusId(threadData.getThreadById.status.statusId);\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\n        setCompleted(threadData.getThreadById.completed);\n    }\n  }, [threadData])\n\n  React.useEffect(() => {\n    if (threadData) {\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\n            setMessageAsRead({\n                variables: {\n                    threadId: threadData.getThreadById.refId,\n                    userId: user.sender.accountId\n                }\n            })\n        })\n    }\n  }, [threadData, userId, setMessageAsRead])\n\n  React.useEffect(() => {\n    refetch({ uid: threadId });\n  }, [threadId, refetch])\n\n  const handleExpand = () => setExpanded(!expanded);\n\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    await updateThreadStatus({ variables: {\n        uid: threadId,\n        attachments: attach === 'true' ? true : false,\n        statusId: parseInt(event.target.value)\n    }})\n\n    // check if completed\n    const completedId = [1, 3];\n    setCompleted(completedId.includes(parseInt(event.target.value)));\n\n    setStatusId(parseInt(event.target.value));\n    refetch({ uid: threadId });\n  }\n\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    await updateThreadStatus({ variables: {\n        uid: threadId,\n        attachments: event.target.value === 'true' ? true : false,\n        statusId\n    }})\n\n    setAttach(event.target.value);\n  }\n\n  const reloadThread = () => refetch({ uid: threadId });\n\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\n\n  const { subject, author, docType, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments } = threadData.getThreadById;\n\n  return (\n    <Paper sx={{ width: '100%' }}>\n        <Box \n            sx={{ \n                width: '100%', \n                maxHeight: 'calc(100vh - 105px)', \n                overflowY: 'auto',\n                overflowX: 'hidden',\n                \"::-webkit-scrollbar\": {\n                    height: \"8px\",\n                    width: \"8px\"\n                },\n\n                /* Track */\n                \"::-webkit-scrollbar-track\": {\n                    background: theme.palette.grey[300] \n                },\n                \n                /* Handle */\n                \"::-webkit-scrollbar-thumb\": {\n                    background: theme.palette.secondary.main\n                },\n                \n                /* Handle on hover */\n                \"::-webkit-scrollbar-thumb:hover\": {\n                    background: theme.palette.primary.dark\n                }\n            }}\n        >\n            <Box sx={{ width: '100%', p: 2 }}>\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\n                        {docType.docType}\n                    </Typography>\n        \n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\n                        {userId === threadData.getThreadById.author.accountId && (\n                            <IconButton onClick={handleExpand}>\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\n                            </IconButton>\n                        )}\n                         <IconButton onClick={reloadThread}>\n                            <RefreshIcon />\n                        </IconButton>\n                    </Box>\n                </Stack>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\n                        <TextField\n                            name='status'\n                            label='Status'\n                            select\n                            sx={{ width: 200 }}\n                            value={statusId}\n                            onChange={handleStatusChange}\n                        >\n                            {threadStatus.getAllThreadStatus.map(status => (\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\n                            ))}\n                        \n                        </TextField>\n                        <TextField\n                            name='attachments'\n                            label='Attachments'\n                            select\n                            sx={{ width: 200 }}\n                            value={attach}\n                            onChange={handleAttachmentChange}\n                        >\n                            <MenuItem value='true'>Required</MenuItem>\n                            <MenuItem value='false'>Not Required</MenuItem> \n                        </TextField>\n                    </Stack>\n                </Collapse>\n                <Divider sx={{ mb: 1 }} />\n                <Alert severity={completed ? \"success\" : \"info\"}>\n                    {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\n                </Alert>\n            </Box>\n\n            <Box sx={{ px: 2 }}>\n                <Typography variant='body1' color='secondary'>\n                    {author.firstName + ' ' + author.lastName} \n                    <span style={{ color: 'black' }}>{' to '}</span> \n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\n                </Typography>\n                <Typography variant='h4'>\n                    {subject}\n                </Typography>\n            </Box>\n\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\n                <Tab label=\"Conversation\" />\n                <Tab label=\"Form 2309\" />\n            </Tabs>\n           \n            <TabPanel index={0} value={tabValue}>\n                <Box sx={{ p: 2 }}>\n                    {messages.map(msg => (\n                        <Box \n                            key={msg.msgId} \n                            sx={{ \n                                my: 2, \n                                pl: msg.sender.accountId === userId ? 8 : 0,\n                                pr: msg.sender.accountId !== userId ? 8 : 0\n                            }}\n                        >\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\n                        </Box>\n                    ))}\n                </Box>\n\n                <Box sx={{ p: 2 }}>\n                    {!completed && (\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\n                    )}\n                </Box>\n            </TabPanel>\n\n            <TabPanel index={1} value={tabValue}>\n                <Form2309 thread={threadData.getThreadById} />\n            </TabPanel>\n        </Box>\n    </Paper>\n  )\n}"],"names":["CreateThread","props","theme","useTheme","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState8","formData","setFormData","_React$useState9","message","files","links","_React$useState10","messageData","setMessageData","_React$useState11","_React$useState12","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","console","log","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","split","pop","fileType","fileUrl","concat","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","name","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","thread","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","id","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","filter","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","status","statusLabel","size","component","LinkDialog","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","refSlipNum","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","Font","register","family","src","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","EditForm2309","state","messages","handleTextChange","_defineProperty","PDFDownloadLink","document","blob","url","loading","TabPanel","index","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","refetch","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","includes","_x","handleAttachmentChange","_ref3","_callee2","_context2","_x2","reloadThread","_threadData$getThread","dateUpdated","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","Tabs","e","Tab","pl","pr","msgId"],"sourceRoot":""}