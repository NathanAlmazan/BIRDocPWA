{"version":3,"file":"static/js/891.63d239cc.chunk.js","mappings":"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","sources":["api/settings/index.tsx","pages/settings/AddTypeDialog.tsx","pages/settings/DeleteTypeDialog.tsx","pages/settings/DocumentTypeList.tsx","pages/settings/AddStatusDialog.tsx","pages/settings/DeleteStatusDialog.tsx","pages/settings/DocumentStatusList.tsx","pages/settings/index.tsx"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\n// ========================= Queries =========================== //\r\nexport const GET_ALL_THREAD_TYPES = gql`\r\n    query GetAllThreadTypes {\r\n        getAllThreadTypes {\r\n            docId\r\n            docType\r\n            threadCount\r\n        }\r\n    }\r\n`\r\nexport const GET_ALL_THREAD_STATUS = gql`\r\n    query GetAllThreadStatus {\r\n        getAllThreadStatus {\r\n            statusId\r\n            statusLabel\r\n            threadCount\r\n        }\r\n    }\r\n`\r\n\r\n// ====================== Mutations ============================ //\r\nexport const CREATE_DOCUMENT_TYPE = gql`\r\n    mutation AddThreadType($label: String!) {\r\n        addThreadType(label: $label) {\r\n            docId\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_DOCUMENT_TYPE = gql`\r\n    mutation DeleteThreadType($typeId: Int!) {\r\n        deleteThreadType(id: $typeId) {\r\n            docId\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_DOCUMENT_STATUS = gql`\r\n    mutation AddThreadStatus($label: String!) {\r\n        addThreadStatus(label: $label) {\r\n            statusId\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_DOCUMENT_STATUS = gql`\r\n    mutation DeleteThreadStatus($statusId: Int!) {\r\n        deleteThreadStatus(id: $statusId) {\r\n            statusId\r\n        }\r\n    }\r\n`","import React from 'react';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\nimport { CREATE_DOCUMENT_TYPE } from '../../api/settings';\r\n\r\ninterface AddTypeDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: () => void;\r\n}\r\n\r\nexport default function AddTypeDialog(props: AddTypeDialogProps) {\r\n    const [addDocumentType, { loading }] = useMutation<{ addThreadType: DocumentTypes }, { label: string }>(CREATE_DOCUMENT_TYPE);\r\n\r\n    const [label, setLabel] = React.useState<string>(\"\");\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setLabel(event.target.value);\r\n    \r\n    const handleSubmitType = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        await addDocumentType({\r\n            variables: {\r\n                label: label\r\n            }\r\n        })\r\n\r\n        setLabel(\"\");\r\n        props.onSubmit();\r\n        props.onClose();\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <LoadOverlay open={loading} />\r\n            <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n                <form onSubmit={handleSubmitType}>\r\n                    <DialogTitle>Add Document Type</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            name=\"label\"\r\n                            label=\"Label\"\r\n                            value={label}\r\n                            onChange={handleTextChange}\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            required\r\n                            sx={{ width: 400 }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={props.onClose}>Cancel</Button>\r\n                        <Button type=\"submit\">Add</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n// project imports\r\nimport { useMutation } from '@apollo/client';\r\nimport { DELETE_DOCUMENT_TYPE } from '../../api/settings';\r\n\r\ninterface DeleteTypeDialogProps {\r\n    open: boolean;\r\n    docType: DocumentTypes\r\n    onClose: () => void;\r\n    onDelete: () => void;\r\n}\r\n\r\nexport default function DeleteTypeDialog(props: DeleteTypeDialogProps) {\r\n    const [deleteType] = useMutation(DELETE_DOCUMENT_TYPE);\r\n\r\n    const handleDeleteType = async () => {\r\n        await deleteType({\r\n            variables: {\r\n                typeId: props.docType.docId\r\n            }\r\n        })\r\n\r\n        props.onDelete();\r\n        props.onClose();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.open}\r\n            onClose={props.onClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {props.docType.threadCount && props.docType.threadCount > 0 ? \"Invalid Action\" : `Are you sure you want to delete ${props.docType.docType}?`}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {props.docType.threadCount && props.docType.threadCount > 0 ? \"You cannot delete this type because it has active threads.\" : \"Please keep in mind that this action cannot be undone.\"}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            {props.docType.threadCount !== undefined && props.docType.threadCount === 0 ? (\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose}>Cancel</Button>\r\n                    <Button color=\"error\" onClick={handleDeleteType} autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            ) : (\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose}>Okay</Button>\r\n                </DialogActions>\r\n            )}\r\n        </Dialog>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Paper from '@mui/material/Paper';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/settings';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport AddTypeDialog from './AddTypeDialog';\r\nimport DeleteTypeDialog from './DeleteTypeDialog';\r\n\r\n\r\nexport default function ThreadTypeList() {\r\n    const theme = useTheme();\r\n    const { data: docTypes, refetch } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES); \r\n    const [add, setAdd] = React.useState<boolean>(false);\r\n    const [selected, setSelected] = React.useState<DocumentTypes | null>(null);\r\n\r\n    const handleToggleDialog = () => setAdd(!add);\r\n\r\n    const handleRefresh = () => refetch();\r\n    \r\n    const handleConfirmDelete = (type: DocumentTypes) => setSelected(type); \r\n\r\n    if (!docTypes) return <LoadOverlay open={true} /> \r\n\r\n    return (\r\n        <Paper sx={{ width: \"100%\", height: '100%' }}>\r\n            <Box \r\n                sx={{ \r\n                    p: 2, \r\n                    display: 'flex', \r\n                    flexDirection: 'row', \r\n                    justifyContent: 'space-between', \r\n                    alignItems: 'center'\r\n                }}\r\n            >\r\n                <Typography variant='h6'>Document Types</Typography>\r\n                <Button variant='contained' onClick={handleToggleDialog}>Add Type</Button>\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            <List \r\n                sx={{ \r\n                    width: '100%', \r\n                    maxHeight: 'calc(100vh - 170px)', \r\n                    overflowY: 'auto',\r\n                    \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                    },\r\n\r\n                    /* Track */\r\n                    \"::-webkit-scrollbar-track\": {\r\n                        background: theme.palette.grey[300] \r\n                    },\r\n                    \r\n                    /* Handle */\r\n                    \"::-webkit-scrollbar-thumb\": {\r\n                        background: theme.palette.secondary.dark\r\n                    },\r\n                    \r\n                    /* Handle on hover */\r\n                    \"::-webkit-scrollbar-thumb:hover\": {\r\n                        background: theme.palette.primary.dark\r\n                    }\r\n                }}>\r\n\r\n                {docTypes.getAllThreadTypes.length === 0 && (\r\n                     <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                        <BusinessIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n                        <Typography variant=\"subtitle1\">\r\n                            No Document Type Yet\r\n                        </Typography>\r\n                        <Typography variant=\"body1\">\r\n                            Create a Document Type\r\n                        </Typography>\r\n                    </Box>\r\n                )}\r\n\r\n                {docTypes.getAllThreadTypes.map(docType => (\r\n                    <React.Fragment key={docType.docId}>\r\n                        <ListItem secondaryAction={\r\n                            <IconButton onClick={() => handleConfirmDelete(docType)}>\r\n                                <DeleteOutlineOutlinedIcon color='error' fontSize='small' />\r\n                            </IconButton>\r\n                        }>\r\n                            <ListItemText\r\n                                primary={\r\n                                    <Typography variant='body1'>\r\n                                        {docType.docType}\r\n                                    </Typography>\r\n                                }\r\n                            />\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </React.Fragment>\r\n                ))}\r\n            </List>\r\n\r\n            <AddTypeDialog open={add} onClose={handleToggleDialog} onSubmit={handleRefresh} />\r\n\r\n            {selected && (\r\n                <DeleteTypeDialog open={selected !== null} docType={selected} onClose={() => setSelected(null)} onDelete={handleRefresh} />\r\n            )}\r\n        </Paper>\r\n    )\r\n}","import React from 'react';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport { DocumentStatus } from '../../api/threads/types';\r\nimport { CREATE_DOCUMENT_STATUS } from '../../api/settings';\r\n\r\ninterface AddStatusDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: () => void;\r\n}\r\n\r\nexport default function AddStatusDialog(props: AddStatusDialogProps) {\r\n    const [addDocumentStatus, { loading }] = useMutation<{ addThreadStatus: DocumentStatus }, { label: string }>(CREATE_DOCUMENT_STATUS);\r\n\r\n    const [label, setLabel] = React.useState<string>(\"\");\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setLabel(event.target.value);\r\n    \r\n    const handleSubmitType = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        await addDocumentStatus({\r\n            variables: {\r\n                label: label\r\n            }\r\n        })\r\n\r\n        setLabel(\"\");\r\n        props.onSubmit();\r\n        props.onClose();\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <LoadOverlay open={loading} />\r\n            <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n                <form onSubmit={handleSubmitType}>\r\n                    <DialogTitle>Add Document Status</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            name=\"label\"\r\n                            label=\"Label\"\r\n                            value={label}\r\n                            onChange={handleTextChange}\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            required\r\n                            sx={{ width: 400 }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={props.onClose}>Cancel</Button>\r\n                        <Button type=\"submit\">Add</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { DocumentStatus } from '../../api/threads/types';\r\n// project imports\r\nimport { useMutation } from '@apollo/client';\r\nimport { DELETE_DOCUMENT_STATUS } from '../../api/settings';\r\n\r\ninterface DeleteStatusDialogProps {\r\n    open: boolean;\r\n    status: DocumentStatus\r\n    onClose: () => void;\r\n    onDelete: () => void;\r\n}\r\n\r\nexport default function DeleteStatusDialog(props: DeleteStatusDialogProps) {\r\n    const [deleteStatus] = useMutation(DELETE_DOCUMENT_STATUS);\r\n\r\n    const handleDeleteStatus = async () => {\r\n        await deleteStatus({\r\n            variables: {\r\n                statusId: props.status.statusId\r\n            }\r\n        })\r\n\r\n        props.onDelete();\r\n        props.onClose();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.open}\r\n            onClose={props.onClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {props.status.threadCount !== undefined && props.status.threadCount > 0 ? \"Invalid Action\" : `Are you sure you want to delete ${props.status.statusLabel}?`}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {props.status.threadCount !== undefined && props.status.threadCount > 0 ? \"You cannot delete this status because it has active threads.\" : \"Please keep in mind that this action cannot be undone.\"}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            {props.status.threadCount !== undefined && props.status.threadCount === 0 ? (\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose}>Cancel</Button>\r\n                    <Button color=\"error\" onClick={handleDeleteStatus} autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            ) : (\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose}>Okay</Button>\r\n                </DialogActions>\r\n            )}\r\n        </Dialog>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Paper from '@mui/material/Paper';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport { DocumentStatus } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_STATUS } from '../../api/settings';\r\nimport AddStatusDialog from './AddStatusDialog';\r\nimport DeleteStatusDialog from './DeleteStatusDialog';\r\n\r\n\r\nexport default function DocumentStatusList() {\r\n    const theme = useTheme();\r\n    const { data: statusList, refetch } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS); \r\n    const [add, setAdd] = React.useState<boolean>(false);\r\n    const [selected, setSelected] = React.useState<DocumentStatus | null>(null);\r\n\r\n    const handleToggleDialog = () => setAdd(!add);\r\n\r\n    const handleRefresh = () => refetch();\r\n    \r\n    const handleConfirmDelete = (status: DocumentStatus) => setSelected(status); \r\n\r\n    if (!statusList) return <LoadOverlay open={true} /> \r\n\r\n    return (\r\n        <Paper sx={{ width: \"100%\", height: '100%' }}>\r\n            <Box \r\n                sx={{ \r\n                    p: 2, \r\n                    display: 'flex', \r\n                    flexDirection: 'row', \r\n                    justifyContent: 'space-between', \r\n                    alignItems: 'center'\r\n                }}\r\n            >\r\n                <Typography variant='h6'>Document Status</Typography>\r\n                <Button variant='contained' onClick={handleToggleDialog}>Add Status</Button>\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            <List \r\n                sx={{ \r\n                    width: '100%', \r\n                    maxHeight: 'calc(100vh - 170px)', \r\n                    overflowY: 'auto',\r\n                    \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                    },\r\n\r\n                    /* Track */\r\n                    \"::-webkit-scrollbar-track\": {\r\n                        background: theme.palette.grey[300] \r\n                    },\r\n                    \r\n                    /* Handle */\r\n                    \"::-webkit-scrollbar-thumb\": {\r\n                        background: theme.palette.secondary.dark\r\n                    },\r\n                    \r\n                    /* Handle on hover */\r\n                    \"::-webkit-scrollbar-thumb:hover\": {\r\n                        background: theme.palette.primary.dark\r\n                    }\r\n                }}>\r\n\r\n                {statusList.getAllThreadStatus.length === 0 && (\r\n                     <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                        <BusinessIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n                        <Typography variant=\"subtitle1\">\r\n                            No Document Type Yet\r\n                        </Typography>\r\n                        <Typography variant=\"body1\">\r\n                            Create a Document Type\r\n                        </Typography>\r\n                    </Box>\r\n                )}\r\n\r\n                {statusList.getAllThreadStatus.map(status => (\r\n                    <React.Fragment key={status.statusId}>\r\n                         <ListItem secondaryAction={\r\n                            <IconButton onClick={() => handleConfirmDelete(status)}>\r\n                                <DeleteOutlineOutlinedIcon color='error' fontSize='small' />\r\n                            </IconButton>\r\n                        }>\r\n                            <ListItemText\r\n                                primary={\r\n                                    <Typography variant='body1'>\r\n                                        {status.statusLabel}\r\n                                    </Typography>\r\n                                }\r\n                            />\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </React.Fragment>\r\n                ))}\r\n            </List>\r\n\r\n            <AddStatusDialog open={add} onClose={handleToggleDialog} onSubmit={handleRefresh} />\r\n\r\n            {selected && (\r\n                <DeleteStatusDialog open={selected !== null} status={selected} onClose={() => setSelected(null)} onDelete={handleRefresh} />\r\n            )}\r\n        </Paper>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Grid from '@mui/material/Grid';\r\n// project imports\r\nimport DocumentTypeList from './DocumentTypeList';\r\nimport DocumentStatusList from './DocumentStatusList';\r\n\r\nexport default function SettingsPage() {\r\n    return (\r\n        <Grid container spacing={3} alignItems=\"stretch\" sx={{ height: \"95%\" }}>\r\n            <Grid item md={4}>\r\n                <DocumentTypeList />\r\n            </Grid>\r\n            <Grid item md={4}>\r\n                <DocumentStatusList />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}"],"names":["GET_ALL_THREAD_TYPES","gql","_templateObject","_taggedTemplateLiteral","GET_ALL_THREAD_STATUS","_templateObject2","CREATE_DOCUMENT_TYPE","_templateObject3","DELETE_DOCUMENT_TYPE","_templateObject4","CREATE_DOCUMENT_STATUS","_templateObject5","DELETE_DOCUMENT_STATUS","_templateObject6","AddTypeDialog","props","_useMutation","useMutation","_useMutation2","_slicedToArray","addDocumentType","loading","_React$useState","React","_React$useState2","label","setLabel","handleSubmitType","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","variables","onSubmit","onClose","stop","_x","apply","arguments","_jsxs","children","_jsx","LoadOverlay","open","Dialog","maxWidth","DialogTitle","DialogContent","TextField","autoFocus","margin","name","value","onChange","target","fullWidth","variant","required","sx","width","DialogActions","Button","onClick","type","DeleteTypeDialog","deleteType","handleDeleteType","typeId","docType","docId","onDelete","id","threadCount","concat","DialogContentText","undefined","color","ThreadTypeList","theme","useTheme","_useQuery","useQuery","docTypes","data","refetch","add","setAdd","_React$useState3","_React$useState4","selected","setSelected","handleToggleDialog","handleRefresh","Paper","height","Box","p","display","flexDirection","justifyContent","alignItems","Typography","Divider","List","maxHeight","overflowY","background","palette","grey","secondary","dark","primary","getAllThreadTypes","length","BusinessIcon","fontSize","mb","map","ListItem","secondaryAction","IconButton","DeleteOutlineOutlinedIcon","ListItemText","AddStatusDialog","addDocumentStatus","DeleteStatusDialog","deleteStatus","handleDeleteStatus","statusId","status","statusLabel","DocumentStatusList","statusList","getAllThreadStatus","handleConfirmDelete","SettingsPage","Grid","container","spacing","item","md","DocumentTypeList"],"sourceRoot":""}