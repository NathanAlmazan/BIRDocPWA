{"version":3,"file":"static/js/670.c616e6fe.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","pages/threads/Signature.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/Directory.tsx","pages/threads/History.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentPurpose,\r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread,\r\n    ThreadTags,\r\n    UserAccounts\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_PURPOSE,\r\n    GET_ALL_THREAD_TAGS,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport { GET_USER_ACCOUNTS_BY_OFFICES } from '../../api/offices';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId: number[];\r\n    recipientUserId: string[];\r\n    docTypeId?: number;\r\n    purposeId?: number;\r\n    tagId: number | null;\r\n    attachments: boolean;\r\n    purposeNotes: string;\r\n    completed: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport function generateOfficeCode(officeCode?: string, sectionCode?: string) {\r\n    if (officeCode && sectionCode) return ` (${officeCode}-${sectionCode})`;\r\n    else if (officeCode) return ` (${officeCode})`\r\n    else return '';\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const theme = useTheme();\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n  const { data: threadTags } = useQuery<{ getAllThreadTags: ThreadTags[] }>(GET_ALL_THREAD_TAGS);\r\n  const { data: threadOfficers, refetch: refetchOfficers } = useQuery<{ getAccountsByOffice: UserAccounts[] }>(GET_USER_ACCOUNTS_BY_OFFICES, { variables: { officeIds: [] } });\r\n  const [createThread] = useMutation<{ createThread: Thread[] }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [purposes, setPurposes] = React.useState<Queue>();\r\n  const [officers, setOfficers] = React.useState<{ [key: string]: string }>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    completed: false,\r\n    dateDue: new Date().toISOString(),\r\n    tagId: null,\r\n    recipientId: [],\r\n    recipientUserId: [],\r\n    purposeNotes: ''\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string,\r\n    purpose?: string\r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes && threadPurposes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            if (office.sectionName === \"default\") {\r\n                officeObject[office.sectionOffice.officeName + \" — All\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = -(office.sectionOffice.officeId);\r\n                officeObject[office.sectionOffice.officeName + \" — Admin\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            } else {\r\n                officeObject[office.sectionOffice.officeName + \" — \" + office.sectionName + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            }\r\n        })\r\n        \r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n\r\n        let purposesObject: Queue = {};\r\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\r\n            purposesObject[purpose.purposeName] = purpose.purposeId;\r\n        })\r\n        setPurposes(purposesObject);\r\n\r\n    }\r\n  }, [officeSections, threadTypes, threadPurposes]);\r\n\r\n  React.useEffect(() => {\r\n    if (threadOfficers) {\r\n        let officersObject: { [key: string]: string } = {};\r\n        threadOfficers.getAccountsByOffice.forEach(officer => {\r\n            officersObject[officer.firstName + \" \" + officer.lastName] = officer.accountId\r\n        })\r\n\r\n        setOfficers(officersObject);\r\n    }\r\n  }, [threadOfficers])\r\n\r\n  if (!offices || !types || !purposes || !officers) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\r\n\r\n  const handlePurposeNotesChange = (_: any, newValue: string) => setFormData({ ...formData, purposeNotes: newValue });\r\n\r\n  const handleTegChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(event.target.value, 10);\r\n    if (value === 0) setFormData({ ...formData, tagId: null });\r\n    else setFormData({ ...formData, tagId: value });\r\n  }\r\n\r\n  const handleRecipientChange = (_: any, newValue: string[]) => {\r\n    setFormData({ ...formData, recipientId: newValue.map(value => offices[value]) });\r\n    refetchOfficers({ officeIds: newValue.map(value => offices[value]).filter(id => id > 0) })\r\n  }\r\n\r\n  const handleOfficersChange = (_: any, newValue: string[]) => {\r\n    setFormData({ ...formData, recipientUserId: newValue.map(value => officers[value]) });\r\n  }\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.purposeId) {\r\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n        console.log(threadResult);\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.name,\r\n                fileType: \"url\",\r\n                fileUrl: link.link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            for (let i = 0; i < threadResult.data.createThread.length; i++) {\r\n                const thread = threadResult.data.createThread[i]\r\n\r\n                await sendThreadMessage({ variables: { data: {\r\n                    message: messageData.message,\r\n                    files: messageFiles,\r\n                    senderId: props.userId,\r\n                    threadId: thread.refId\r\n                }}})\r\n            }\r\n\r\n            props.onCreateThread(threadResult.data.createThread[0].refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Stack spacing={3} sx={{ p: 2 }}>\r\n                <div>\r\n                    <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                        <Button \r\n                            variant='contained' \r\n                            endIcon={<SendIcon />}\r\n                            onClick={handleCreateThread}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                        <Tooltip title='Discard'>\r\n                            <IconButton onClick={props.onDiscardThread}>\r\n                                <DeleteOutlinedIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Stack>\r\n                    <Divider />\r\n                </div>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        multiple\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(offices)}\r\n                        onChange={handleRecipientChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.recipient !== undefined}\r\n                                helperText={formError && formError.recipient}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Officers' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        multiple\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(officers)}\r\n                        onChange={handleOfficersChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard'\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField \r\n                        name='subject'\r\n                        variant='standard'\r\n                        value={formData.subject}\r\n                        onChange={handleSubjectTextChange}\r\n                        fullWidth\r\n                        error={formError?.subject !== undefined}\r\n                        helperText={formError && formError.subject}\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onInputChange={handlePurposeNotesChange}\r\n                        onChange={handleThreadPurposeChange}\r\n                        options={Object.keys(purposes)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.purpose !== undefined}\r\n                                helperText={formError && formError.purpose}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n                \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadTypeChange}\r\n                        options={Object.keys(types)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.type !== undefined}\r\n                                helperText={formError && formError.type}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Tag' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField\r\n                        fullWidth\r\n                        name='tagId'\r\n                        variant='standard'\r\n                        select\r\n                        value={formData.tagId ? formData.tagId : 0}\r\n                        onChange={handleTegChange}\r\n                    >\r\n                        <MenuItem value={0}>None</MenuItem>\r\n                        {threadTags && threadTags.getAllThreadTags.map(tag => (\r\n                            <MenuItem key={tag.tagId} value={tag.tagId}>{tag.tagName}</MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </Stack>\r\n\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DatePicker \r\n                        label=\"Date Due\"\r\n                        views={[\"year\", \"month\", \"day\"]}\r\n                        value={dayjs(formData.dateDue)} \r\n                        onChange={handleDateDueChange} \r\n                        format=\"MMMM DD, YYYY\"\r\n                    />\r\n                </LocalizationProvider>\r\n\r\n                <FormControlLabel \r\n                    control={\r\n                        <Checkbox \r\n                            checked={formData.attachments} \r\n                            onChange={handleToggleAttachments} \r\n                        />\r\n                    } \r\n                    label=\"Attachments Required\" \r\n                />\r\n\r\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                        {formError && formError.general}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}","import React, { useState } from 'react';\r\n// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Popover from '@mui/material/Popover';\r\n// icons\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { DocumentTypes } from '../../api/threads/types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [open, setOpen] = useState<Element | null>(null);\r\n\r\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setOpen(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleOpen}\r\n        sx={{\r\n          p: 0,\r\n          mx: 2,\r\n          ...(open && {\r\n            '&:before': {\r\n              zIndex: 1,\r\n              content: \"''\",\r\n              width: '100%',\r\n              height: '100%',\r\n              borderRadius: '50%',\r\n              position: 'absolute',\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n            },\r\n          }),\r\n        }}\r\n      >\r\n        <FilterListIcon />\r\n      </IconButton>\r\n\r\n      <Popover\r\n        open={Boolean(open)}\r\n        anchorEl={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        PaperProps={{\r\n          sx: {\r\n            p: 0,\r\n            mt: 1.5,\r\n            ml: 0.75,\r\n            width: 360,\r\n            '& .MuiMenuItem-root': {\r\n              typography: 'body2',\r\n              borderRadius: 0.75,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            <List\r\n                disablePadding\r\n                subheader={\r\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\r\n                        Thread Types\r\n                    </ListSubheader>\r\n                }\r\n            >\r\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\r\n                  All\r\n                </ListItemButton>\r\n                <Divider sx={{ borderStyle: 'dashed' }} />\r\n\r\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\r\n                  <React.Fragment key={thread.docId}>\r\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\r\n                      {thread.docType}\r\n                    </ListItemButton>\r\n                    <Divider sx={{ borderStyle: 'dashed' }} />\r\n                  </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n      </Popover>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport Chip from '@mui/material/Chip';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport FilterPopover from './FilterPopover';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  mode: string;\r\n  compose: boolean;\r\n  mails?: Thread[];\r\n  onRefresh: () => void;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  }\r\n}\r\n\r\nconst getTagColor = (tagName: string) => {\r\n  if (tagName === \"Top Priority\") return \"error\";\r\n  else if (tagName === \"Confidential\") return \"warning\";\r\n  return \"primary\"\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={props.mails === undefined} />\r\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n        {props.mode !== \"completed\" && (\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n        )}\r\n        \r\n        <IconButton onClick={props.onRefresh}>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\r\n      </Stack>\r\n      \r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 170px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {props.mails && props.mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\r\n            <React.Fragment key={msg.refId}>\r\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ mb: 2 }}>\r\n                        <Typography variant='body1' gutterBottom>\r\n                            {msg.subject}\r\n                        </Typography>\r\n                        <div>\r\n                          <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"subtitle2\"\r\n                            color=\"text.primary\"\r\n                          >\r\n                            {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\r\n                          </Typography>\r\n                          {` — ${msg.docType.docType} request For ${msg.purpose.purposeName}.`}\r\n                        </div>\r\n                    </Box>\r\n                  } \r\n                  secondary={\r\n                    <Box sx={{\r\n                      display: 'flex',\r\n                      flexDirection: 'row',\r\n                      justifyContent: 'space-between'\r\n                    }}>\r\n                      <div>\r\n                        <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\r\n                        \r\n                        {msg.threadTag && (\r\n                          <Chip color={getTagColor(msg.threadTag.tagName)} label={msg.threadTag.tagName} size='small' sx={{ fontSize: 10 }} />\r\n                        )}\r\n                      </div>\r\n                      <Typography variant='caption'>\r\n                        {`Due at ${formatInboxDate(msg.dateDue)}`}\r\n                      </Typography>\r\n                    </Box>\r\n                  }\r\n                />\r\n              </ListItemButton>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (name: string, link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [name, setName] = React.useState<string>(\"\");\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(name, link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"name\"\r\n                    label=\"File Name\"\r\n                    fullWidth\r\n                    value={name}\r\n                    onChange={(event) => setName(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: {\r\n        name: string;\r\n        link: string;\r\n    }[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links.map(link => link.name)))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (name: string, link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, { name, link } ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l.name === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l.name !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.name,\r\n            fileType: \"url\",\r\n            fileUrl: link.link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={4}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\n// mui\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport SignatureCanvas from 'react-signature-canvas';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\n// api \r\nimport axios from 'axios';\r\n\r\ninterface SignatureDialogProps {\r\n    open: boolean;\r\n    imageUrl: string | null;\r\n    onClose: () => void;\r\n    onSubmit: (url: string) => void;\r\n}\r\n\r\nexport default function SignatureDialog({ open, imageUrl, onSubmit, onClose }: SignatureDialogProps) {\r\n    const sigPad = React.useRef<SignatureCanvas | null>(null);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n\r\n    const handleSubmitSignature = () => {\r\n        if (sigPad.current) {\r\n            onSubmit(sigPad.current.getTrimmedCanvas().toDataURL('image/png'));\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        if (sigPad.current) {\r\n            sigPad.current.clear();\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    const handleUploadSignature = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            const form = new FormData();\r\n            form.append(\"files\", event.target.files[0])\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                onSubmit(result.data.files[0].fileUrl);\r\n                onClose();\r\n            } catch (err) {\r\n                setError((err as Error).message);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth='md'>\r\n            <DialogTitle>Add Signature</DialogTitle>\r\n            <DialogContent>\r\n                {error && (\r\n                    <Alert severity='error'>{error}</Alert> \r\n                )}\r\n\r\n                <SignatureCanvas \r\n                    penColor='black'\r\n                    ref={sigPad}\r\n                    canvasProps={{width: 500, height: 200 }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button component='label'>\r\n                    Upload Signature\r\n\r\n                    <input type='file' onChange={handleUploadSignature} hidden />\r\n                </Button>\r\n                <Button onClick={handleSubmitSignature}>Submit Signature</Button>\r\n                <Button color='error' onClick={handleCancel}>Cancel</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet,\r\n    Image\r\n} from '@react-pdf/renderer';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { Form2309Data } from '../../pages/threads/Form2309';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page size={[330.60, 525.60]} style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.purposeNotes ? thread.purposeNotes : thread.purpose.purposeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            {details.signatureUrl ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src={details.signatureUrl} />\r\n                                </View>\r\n                            ) : thread.author.signImage ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src={thread.author.signImage} />\r\n                                </View>\r\n                            ) : (\r\n                                <Text style={styles.emptyCell}></Text>\r\n                            )}\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>{thread.author.officeSection.sectionOffice.refNum}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBoldSmall}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    );\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 15,\r\n      paddingBottom: 15,\r\n      paddingHorizontal: 15,\r\n\r\n    },\r\n    table: { \r\n      width: \"auto\", \r\n      borderStyle: \"solid\", \r\n      borderWidth: 1,\r\n      padding: 2\r\n    },\r\n    tableRow: { \r\n      margin: \"auto\", \r\n      marginTop: 2,\r\n      flexDirection: \"row\" \r\n    }, \r\n    tableCol: { \r\n      width: \"50%\"\r\n    },\r\n    recipientCol: { \r\n      width: \"70%\"\r\n    },\r\n    dateCol: { \r\n      width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n      width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n      height: 30\r\n    },\r\n    tableCellLeftBold: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n  \ttableCellLeftBoldSmall: { \r\n      margin: 2,\r\n      fontSize: 6,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n      margin: 2,\r\n      fontSize: 9,\r\n      textAlign: \"right\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n  \tsignatureContainer: {\r\n    \tdisplay: \"flex\",\r\n      \tflexDirection: \"row\",\r\n      \tjustifyContent: \"center\"\r\n    },\r\n  \tsignatureImage: {\r\n    \twidth: 60,\r\n      \theight: 30\r\n    }\r\n});\r\n  ","import React from 'react';\r\nimport { Thread, UserAccounts } from '../../api/threads/types';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\n// project imports\r\nimport SignatureDialog from './Signature';\r\n// renderer\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\nimport axios from 'axios';\r\nimport { useMutation } from '@apollo/client';\r\nimport { UPLOAD_SIGNATURE } from '../../api/offices';\r\n\r\n\r\nexport interface Form2309Data {\r\n    subject: string;\r\n    remarks: string;\r\n    signatureUrl: string | null;\r\n}\r\n\r\nexport default function EditForm2309({ userId, thread, onGenerate }: { userId: string, thread: Thread, onGenerate: () => void }) {\r\n    const [uploadSignature, { error }] = useMutation<{ updateSignature: UserAccounts }>(UPLOAD_SIGNATURE);\r\n    const [formData, setFormData] = React.useState<Form2309Data>({\r\n        subject: '',\r\n        remarks: '',\r\n        signatureUrl: null\r\n    });\r\n    const [upload, setUpload] = React.useState<File | null>(null);\r\n    const [open, setOpen] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        setFormData(state => ({\r\n            ...state,\r\n            subject: thread.subject,\r\n            remarks: thread.messages[0].message\r\n        }))\r\n    }, [thread])\r\n\r\n    React.useEffect(() => {\r\n        const uploadForm = async () => {\r\n            if (upload) {\r\n                const form = new FormData();\r\n                form.append(\"form\", upload);\r\n                form.append(\"requestId\", thread.refId);\r\n\r\n                try {\r\n                    const result = await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                    window.open(result.data.fileUrl, \"_blank\");\r\n\r\n                    onGenerate();\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    return\r\n                }\r\n\r\n                setUpload(null);\r\n            }\r\n        }\r\n\r\n        uploadForm();\r\n    }, [upload, onGenerate, thread.refId]);\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const handleUploadForm = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) setUpload(event.target.files[0]);\r\n    }\r\n\r\n    const handleGenerateForm = async (blob: Blob | null, url: string | null) => {\r\n        if (url && blob) {\r\n            window.open(url, \"_blank\");\r\n\r\n            const file = new File([blob], `${thread.refSlipNum}.pdf`, {\r\n                type: \"application/pdf\",\r\n            });\r\n\r\n            const form = new FormData();\r\n            form.append(\"form\", file);\r\n            form.append(\"requestId\", thread.refId);\r\n\r\n            try {\r\n                await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                onGenerate();\r\n            } catch (err) {\r\n                console.log(err);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleToggleSignature = () => setOpen(!open);\r\n\r\n    const handleSubmitESignature = async (url: string) => {\r\n        setFormData({ ...formData, signatureUrl: url });\r\n        await uploadSignature({\r\n            variables: {\r\n                userId: userId,\r\n                signImage: url\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleRemoveSignature = async () => {\r\n        setFormData({ ...formData, signatureUrl: null });\r\n        await uploadSignature({\r\n            variables: {\r\n                userId: userId,\r\n                signImage: null\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n\r\n            {error && (\r\n                <Alert severity='error'>{error.message}</Alert> \r\n            )}\r\n\r\n\r\n            <Stack direction='row' spacing={1} justifyContent='flex-end' alignItems='center'>\r\n                <Button variant='outlined' onClick={handleToggleSignature}>Add Signature</Button>\r\n                {thread.author.signImage && (\r\n                    <Button variant='outlined' color='error' onClick={handleRemoveSignature}>Remove Signature</Button>\r\n                )}\r\n            </Stack>\r\n\r\n            <TextField\r\n                multiline\r\n                rows={2}\r\n                name='subject'\r\n                label='Subject'\r\n                value={formData.subject}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <TextField\r\n                multiline\r\n                rows={3}\r\n                name='remarks'\r\n                label='Remarks'\r\n                value={formData.remarks}\r\n                onChange={handleTextChange}\r\n            />\r\n\r\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\r\n                {({ blob, url, loading, error }) => (\r\n                     <Button \r\n                        fullWidth \r\n                        onClick={() => handleGenerateForm(blob, url)}\r\n                        variant='contained'>\r\n                            Generate Form 2309\r\n                    </Button>\r\n                )}\r\n            </PDFDownloadLink>\r\n           \r\n            <Button \r\n                fullWidth \r\n                disabled={upload !== null}\r\n                component='label'\r\n                variant='outlined'>\r\n                    Upload Form 2309\r\n\r\n                    <input type='file' hidden onChange={handleUploadForm} />\r\n            </Button>\r\n\r\n            <SignatureDialog \r\n                open={open}\r\n                imageUrl={formData.signatureUrl}\r\n                onSubmit={handleSubmitESignature}\r\n                onClose={handleToggleSignature}\r\n            />\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\nimport Link from '@mui/material/Link';\r\n// types\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n\r\n\r\nexport default function ThreadDirectory(props: { messages: Messages[], reqForm?: string }) {\r\n    const [files, setFiles] = React.useState<MessageFiles[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        let msgFiles: MessageFiles[] = [];\r\n        props.messages.forEach(msg => {\r\n            msgFiles = msgFiles.concat(msg.files)\r\n        });\r\n        setFiles(msgFiles);\r\n\r\n    }, [props.messages])\r\n\r\n    console.log(files);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n             <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Shared Files\r\n            </Typography>\r\n            <List>\r\n              {props.reqForm && (\r\n                <>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={props.reqForm} target='_blank'>\r\n                                    Form 2309\r\n                                </Typography>\r\n                            }\r\n                            secondary='application/PDF'\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </>\r\n              )}\r\n\r\n              {files.map(file => (\r\n                <React.Fragment key={file.fileId}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={file.fileUrl} target='_blank'>\r\n                                    {file.fileName}\r\n                                </Typography>\r\n                            }\r\n                            secondary={file.fileType}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Stack from '@mui/material/Stack';\r\nimport Alert from '@mui/material/Alert';\r\nimport { ThreadHistory } from '../../api/threads/types';\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function History(props: { history: ThreadHistory[] }) {\r\n\r\n    const handleSeverity = (status: string | null) => {\r\n        if (status && status.includes(\"Closed\")) return \"success\";\r\n        else if (status && status.includes(\"Progress\")) return \"info\";\r\n        else if (status && status.includes(\"Approval\")) return \"warning\";\r\n        else return \"info\"\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n            <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Request History\r\n            </Typography>\r\n            <Stack spacing={2}>\r\n                {props.history.map((event, index) => (\r\n                    <Alert key={index} severity={handleSeverity(event.status ? event.status.statusLabel : null)}>\r\n                        {`${event.historyLabel} ${event.status ? `to ${event.status.statusLabel}`: ''} at ${formatInboxDate(event.dateCreated)}`}\r\n                    </Alert>\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport Form2309 from './Form2309';\r\nimport ReplyBox from './ReplyBox';\r\nimport ThreadDirectory from './Directory';\r\nimport ThreadHistory from './History';\r\nimport { DocumentStatus, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { \r\n    ARCHIVE_THREAD,\r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    RESTORE_THREAD, \r\n    SET_MESSAGE_AS_READ, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\n\r\ninterface TabPaneProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nexport function TabPanel(props: TabPaneProps) {\r\n    return (\r\n        <div>\r\n            {props.value === props.index && props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n  const [archiveThread] = useMutation(ARCHIVE_THREAD);\r\n  const [restoreThread] = useMutation(RESTORE_THREAD);\r\n\r\n  const [tabValue, setTableValue] = React.useState<number>(0);\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const handleArchiveThread = async () => {\r\n    await archiveThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleRestoreThread = async () => {\r\n    await restoreThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const reloadThread = () => refetch({ uid: threadId });\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, refSlipNum, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments, active, recipientUser } = threadData.getThreadById;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                        {`Ref # ${refSlipNum}`}\r\n                    </Typography>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {((userId === threadData.getThreadById.author.accountId && !threadData.getThreadById.purpose.purposeName.includes(\"Approval\")) || \r\n                           (userId !== threadData.getThreadById.author.accountId && threadData.getThreadById.purpose.purposeName.includes(\"Approval\"))) && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                \r\n                {active ? (\r\n                    <Alert \r\n                        severity={completed ? \"success\" : \"info\"}\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button color='error' onClick={handleArchiveThread}>\r\n                                Cancel\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                    </Alert>\r\n                ) : (\r\n                    <Alert \r\n                        severity='error'\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button onClick={handleRestoreThread}>\r\n                                Restore\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        Archived Request\r\n                    </Alert>\r\n                )}\r\n\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {recipientUser ? `${recipientUser.firstName} ${recipientUser.lastName} (${recipient.sectionOffice.refNum})` :\r\n                    `${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\r\n                <Tab label=\"Conversation\" />\r\n                <Tab label=\"Files\" />\r\n                <Tab label=\"History\" />\r\n                {threadData.getThreadById.author.accountId === userId && (\r\n                    <Tab label=\"Form 2309\" />\r\n                )}\r\n            </Tabs>\r\n           \r\n            <TabPanel index={0} value={tabValue}>\r\n                <Box sx={{ p: 2 }}>\r\n                    {messages.map(msg => (\r\n                        <Box \r\n                            key={msg.msgId} \r\n                            sx={{ \r\n                                my: 2, \r\n                                pl: msg.sender.accountId === userId ? 8 : 0,\r\n                                pr: msg.sender.accountId !== userId ? 8 : 0\r\n                            }}\r\n                        >\r\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ p: 2 }}>\r\n                    {!completed && (\r\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                    )}\r\n                </Box>\r\n            </TabPanel>\r\n\r\n            <TabPanel index={1} value={tabValue}>\r\n                <ThreadDirectory messages={threadData.getThreadById.messages} reqForm={threadData.getThreadById.reqForm} />\r\n            </TabPanel>\r\n\r\n            <TabPanel index={2} value={tabValue}>\r\n                <ThreadHistory history={threadData.getThreadById.history} />\r\n            </TabPanel>\r\n\r\n           {threadData.getThreadById.author.accountId === userId && (\r\n                <TabPanel index={3} value={tabValue}>\r\n                    <Form2309 userId={userId} thread={threadData.getThreadById} onGenerate={reloadThread} />\r\n                </TabPanel>\r\n           )}\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["generateOfficeCode","officeCode","sectionCode","concat","CreateThread","props","theme","useTheme","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","threadTags","GET_ALL_THREAD_TAGS","_useQuery5","GET_USER_ACCOUNTS_BY_OFFICES","variables","officeIds","threadOfficers","refetchOfficers","refetch","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","_React$useState8","officers","setOfficers","_React$useState9","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","tagId","recipientId","recipientUserId","purposeNotes","_React$useState10","formData","setFormData","_React$useState11","message","files","links","_React$useState12","messageData","setMessageData","_React$useState13","_React$useState14","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","refNum","officeId","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","officersObject","getAccountsByOffice","officer","firstName","lastName","accountId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","i","thread","wrap","_context","prev","next","recipient","abrupt","docTypeId","length","sent","console","log","FormData","file","append","axios","post","process","t0","map","link","fileName","name","fileType","fileUrl","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","Autocomplete","multiple","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","value","filter","id","renderInput","params","TextField","error","helperText","event","target","onInputChange","select","parseInt","MenuItem","getAllThreadTags","tag","tagName","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","emptyMessages","sub","getTagColor","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","charAt","ListItemText","gutterBottom","component","status","statusLabel","size","threadTag","LinkDialog","setName","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","SignatureDialog","imageUrl","sigPad","setError","handleUploadSignature","_x","SignatureCanvas","penColor","ref","canvasProps","current","getTrimmedCanvas","toDataURL","clear","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","refSlipNum","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","signatureUrl","signatureContainer","Image","signatureImage","src","signImage","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","tableCellLeftBoldSmall","Font","register","family","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","EditForm2309","onGenerate","UPLOAD_SIGNATURE","_useMutation2","uploadSignature","upload","setUpload","state","messages","uploadForm","window","handleTextChange","_defineProperty","handleGenerateForm","_ref3","_callee2","blob","url","_context2","File","_x2","handleToggleSignature","handleSubmitESignature","_ref4","_callee3","_context3","_x3","handleRemoveSignature","_ref5","_callee4","_context4","PDFDownloadLink","document","_ref6","loading","ThreadDirectory","setFiles","msgFiles","reqForm","ListItem","ListItemIcon","FolderIcon","Link","History","history","index","includes","historyLabel","TabPanel","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","_useMutation5","ARCHIVE_THREAD","archiveThread","_useMutation7","RESTORE_THREAD","restoreThread","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","user","handleStatusChange","handleAttachmentChange","handleArchiveThread","handleRestoreThread","reloadThread","_threadData$getThread","dateUpdated","active","recipientUser","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","getAllThreadStatus","Tabs","e","Tab","pl","pr","msgId","ThreadHistory"],"sourceRoot":""}