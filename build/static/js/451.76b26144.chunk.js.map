{"version":3,"file":"static/js/451.76b26144.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","components/Form2309/index.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId?: number;\r\n    docTypeId?: number;\r\n    attachments: boolean;\r\n    completed: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    completed: false,\r\n    dateDue: new Date().toISOString()\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string \r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            officeObject[office.sectionName === \"default\" ?\r\n            office.sectionOffice.officeName :\r\n            office.sectionOffice.officeName + \" — \" + office.sectionName] = office.sectionId;\r\n        })\r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n    }\r\n  }, [officeSections, threadTypes])\r\n\r\n  if (!offices || !types) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.split('/').pop() as string,\r\n                fileType: \"\",\r\n                fileUrl: link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            await sendThreadMessage({ variables: { data: {\r\n                message: messageData.message,\r\n                files: messageFiles,\r\n                senderId: props.userId,\r\n                threadId: threadResult.data.createThread.refId\r\n            }}})\r\n\r\n            props.onCreateThread(threadResult.data.createThread.refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n            <div>\r\n                <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                    <Button \r\n                        variant='contained' \r\n                        endIcon={<SendIcon />}\r\n                        onClick={handleCreateThread}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                    <Tooltip title='Discard'>\r\n                        <IconButton onClick={props.onDiscardThread}>\r\n                            <DeleteOutlinedIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Stack>\r\n                <Divider />\r\n            </div>\r\n        \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                <Autocomplete\r\n                    freeSolo\r\n                    fullWidth\r\n                    options={Object.keys(offices)}\r\n                    onChange={handleRecipientChange}\r\n                    renderInput={(params) => \r\n                        <TextField \r\n                            {...params} \r\n                            variant='standard' \r\n                            error={formError?.recipient !== undefined}\r\n                            helperText={formError && formError.recipient}\r\n                        />\r\n                    }\r\n                />\r\n            </Stack>\r\n        \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                <TextField \r\n                    name='subject'\r\n                    variant='standard'\r\n                    value={formData.subject}\r\n                    onChange={handleSubjectTextChange}\r\n                    fullWidth\r\n                    error={formError?.subject !== undefined}\r\n                    helperText={formError && formError.subject}\r\n                />\r\n            </Stack>\r\n            \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                <Autocomplete\r\n                    freeSolo\r\n                    fullWidth\r\n                    onChange={handleThreadTypeChange}\r\n                    options={Object.keys(types)}\r\n                    renderInput={(params) => \r\n                        <TextField \r\n                            {...params} \r\n                            variant='standard' \r\n                            error={formError?.type !== undefined}\r\n                            helperText={formError && formError.type}\r\n                        />\r\n                    }\r\n                />\r\n            </Stack>\r\n\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                <DatePicker \r\n                    label=\"Date Due\"\r\n                    views={[\"year\", \"month\", \"day\"]}\r\n                    value={dayjs(formData.dateDue)} \r\n                    onChange={handleDateDueChange} \r\n                    format=\"MMMM DD, YYYY\"\r\n                />\r\n            </LocalizationProvider>\r\n\r\n            <FormControlLabel \r\n                control={\r\n                    <Checkbox \r\n                        checked={formData.attachments} \r\n                        onChange={handleToggleAttachments} \r\n                    />\r\n                } \r\n                label=\"Attachments Required\" \r\n            />\r\n\r\n            <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n            <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {formError && formError.general}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    </Paper>\r\n  )\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_SENT_THREAD, GET_THREAD_INBOX } from '../../api/threads';\r\n// icons\r\n// import FilterListIcon from '@mui/icons-material/FilterList';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  userId: string;\r\n  mode: string;\r\n  compose: boolean;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  },\r\n  \"completed\": {\r\n    title: \"It's time to work!\",\r\n    sub: \"You have no finished threads\"\r\n  }\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadInbox, loading: inboxLoad, refetch: refetchInbox } = useQuery<{ getThreadInbox: Thread[] }>(GET_THREAD_INBOX, {\r\n    variables: {\r\n      userId: props.userId\r\n    }\r\n  });\r\n  const { data: threadCompleted, loading: completedLoad, refetch: refetchCompleted } = useQuery<{ getThreadInbox: Thread[] }>(GET_THREAD_INBOX, {\r\n    variables: {\r\n      userId: props.userId,\r\n      completed: true\r\n    }\r\n  });\r\n  const { data: sentThread, loading: sentLoad, refetch: refetchSent } = useQuery<{ getSentThread: Thread[] }>(GET_SENT_THREAD, {\r\n    variables: {\r\n      userId: props.userId\r\n    }\r\n  });\r\n  const [mails, setMails] = React.useState<Thread[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    if (threadInbox && sentThread && threadCompleted) {\r\n      if (props.mode === \"inbox\") setMails(threadInbox.getThreadInbox);\r\n      else if (props.mode === \"sent\") setMails(sentThread.getSentThread);\r\n      else if (props.mode === \"completed\") setMails(threadCompleted.getThreadInbox);\r\n    }\r\n  }, [threadInbox, sentThread, threadCompleted, props.mode])\r\n\r\n  const handleRefreshList = () => {\r\n    if (props.mode === \"inbox\") refetchInbox({ userId: props.userId });\r\n    else if (props.mode === \"sent\") refetchSent({ userId: props.userId });\r\n    else if (props.mode === \"completed\") refetchCompleted({ userId: props.userId, completed: true });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={inboxLoad || sentLoad || completedLoad} />\r\n      {props.mode !== \"completed\" && (\r\n        <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n          <div>\r\n            {/* <IconButton>\r\n              <FilterListIcon />\r\n            </IconButton> */}\r\n            <IconButton onClick={handleRefreshList}>\r\n              <RefreshIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Stack>\r\n      )}\r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 170px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {mails.map(msg => (\r\n            <React.Fragment key={msg.refId}>\r\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box>\r\n                        <Typography variant='body1'>\r\n                            {msg.subject}\r\n                        </Typography>\r\n                        <Typography variant='caption' gutterBottom>\r\n                          {`Due at ${formatInboxDate(msg.dateDue)}  (${msg.status.statusLabel})`}\r\n                        </Typography>\r\n                    </Box>\r\n                  } \r\n                  secondary={\r\n                    <React.Fragment>\r\n                      <Typography\r\n                        sx={{ display: 'inline' }}\r\n                        component=\"span\"\r\n                        variant=\"subtitle2\"\r\n                        color=\"text.primary\"\r\n                      >\r\n                        {`${msg.author.firstName} ${msg.author.lastName}`}\r\n                      </Typography>\r\n                      {\" — \" + msg.docType.docType}\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              </ListItemButton>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 500 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: string[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, link ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.split('/').pop() as string,\r\n            fileType: \"\",\r\n            fileUrl: link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={6}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.position}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.position}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet\r\n} from '@react-pdf/renderer';\r\nimport { Thread } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread }: { thread: Thread }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>REFERENCE SLIP # 03-2020</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{thread.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.docType.docType}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBold}>OTHERS:</Text>\r\n                            <Text style={styles.tableCellLeft}>---</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{thread.messages[0].message}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            <Text style={styles.emptyCell}></Text>\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.position}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>Office Code: RR-6</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBold}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n);\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n      paddingTop: 35,\r\n      paddingBottom: 65,\r\n      paddingHorizontal: 35,\r\n    },\r\n    table: { \r\n      width: \"auto\", \r\n      borderStyle: \"solid\", \r\n      borderWidth: 1,\r\n      padding: 8\r\n    },\r\n    tableRow: { \r\n      margin: \"auto\", \r\n      marginTop: 2,\r\n      flexDirection: \"row\" \r\n    }, \r\n    tableCol: { \r\n      width: \"50%\"\r\n    },\r\n    recipientCol: { \r\n      width: \"70%\"\r\n    },\r\n    dateCol: { \r\n      width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n      width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n      margin: 2,\r\n      fontSize: 14,\r\n      textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n      height: 30\r\n    },\r\n    tableCellLeftBold: { \r\n      margin: 2,\r\n      fontSize: 14,\r\n      textAlign: \"left\",\r\n      fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n      margin: 2,\r\n      fontSize: 14,\r\n      textAlign: \"right\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 2,\r\n        fontSize: 14,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 2,\r\n        fontSize: 12,\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n  ","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Link from '@mui/material/Link';\r\nimport Alert from '@mui/material/Alert';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport ReplyBox from './ReplyBox';\r\nimport { DocumentStatus, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { \r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    SET_MESSAGE_AS_READ, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n  }\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    refetch({ uid: threadId });\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const reloadThread = () => refetch({ uid: threadId });\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, docType, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments } = threadData.getThreadById;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <PDFDownloadLink document={<Form2309 thread={threadData.getThreadById} />} fileName={`${threadData.getThreadById.subject}.pdf`}>\r\n                        {({ blob, url, loading, error }) => (\r\n                            <Link variant='subtitle2' href={url as string} target='_blank' sx={{ textDecoration: 'none', color: 'black' }}>\r\n                                {`${docType.docType} ${!loading && '(Download Form 2309)'}`}\r\n                            </Link>\r\n                        )}\r\n                    </PDFDownloadLink>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {userId === threadData.getThreadById.author.accountId && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                <Alert severity={completed ? \"success\" : \"info\"}>\r\n                    {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                </Alert>\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n           \r\n            <Box sx={{ p: 2 }}>\r\n                {messages.map(msg => (\r\n                    <Box \r\n                        key={msg.msgId} \r\n                        sx={{ \r\n                            my: 2, \r\n                            pl: msg.sender.accountId === userId ? 8 : 0,\r\n                            pr: msg.sender.accountId !== userId ? 8 : 0\r\n                        }}\r\n                    >\r\n                        <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                    </Box>\r\n                ))}\r\n            </Box>\r\n\r\n            <Box sx={{ p: 2 }}>\r\n                {!completed && (\r\n                    <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                )}\r\n            </Box>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["CreateThread","props","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState6","formData","setFormData","_React$useState7","message","files","links","_React$useState8","messageData","setMessageData","_React$useState9","_React$useState10","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","sectionId","typesObject","getAllThreadTypes","type","docType","docId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","split","pop","fileType","fileUrl","concat","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","children","_jsxs","Stack","spacing","sx","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","width","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","name","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","theme","useTheme","_useQuery","GET_THREAD_INBOX","threadInbox","inboxLoad","loading","refetchInbox","refetch","_useQuery2","threadCompleted","completedLoad","refetchCompleted","_useQuery3","GET_SENT_THREAD","sentThread","sentLoad","refetchSent","mails","setMails","mode","getThreadInbox","getSentThread","mb","AddIcon","disabled","compose","onComposeThread","RefreshIcon","List","maxHeight","overflowY","height","background","palette","grey","secondary","main","primary","dark","Box","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","msg","ListItemButton","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","status","statusLabel","component","LinkDialog","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setOpen","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","position","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","overflowX","mx","onDelete","find","l","f","filter","handleDelete","size","ReplyIcon","MessageCard","content","sender","Card","CardHeader","avatar","subheader","action","dateSent","CardContent","mt","href","clickable","fileId","border","borderRadius","Form2309","thread","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","messages","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","Font","register","family","src","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderStyle","borderWidth","padding","marginTop","textAlign","fontWeight","ThreadList","GET_THREAD_BY_ID","uid","threadData","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","includes","_x","handleAttachmentChange","_ref3","_callee2","_context2","_x2","reloadThread","_threadData$getThread","dateUpdated","PDFDownloadLink","document","_ref4","blob","url","Link","textDecoration","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","px","pl","pr","msgId"],"sourceRoot":""}