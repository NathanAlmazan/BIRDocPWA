{"version":3,"file":"static/js/670.5bd03033.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","pages/threads/Signature.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/Directory.tsx","pages/threads/History.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\n// mui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport Chip from '@mui/material/Chip';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n// icons\nimport SendIcon from '@mui/icons-material/Send';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n// api\nimport { useQuery, useMutation } from '@apollo/client';\nimport axios from 'axios';\nimport { \n    DocumentPurpose,\n    DocumentTypes, \n    MessageFiles, \n    Messages, \n    OfficeSections, \n    Thread\n} from '../../api/threads/types';\nimport { \n    CREATE_THREAD,\n    GET_ALL_THREAD_PURPOSE,\n    GET_ALL_THREAD_TYPES, \n    GET_BIR_OFFICES,\n    SEND_THREAD_MESSAGE\n} from '../../api/threads';\n// project imports\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\nimport { LoadOverlay } from '../../components/Loaders';\n\n\ninterface ThreadInput {\n    subject: string;\n    authorId: string;\n    statusId: number;\n    recipientId?: number;\n    docTypeId?: number;\n    purposeId?: number;\n    attachments: boolean;\n    completed: boolean;\n    dateDue: string;\n}\n\ninterface Queue {\n    [key: string]: number\n}\n\ninterface CreateThreadProps {\n    userId: string;\n    onDiscardThread: () => void;\n    onCreateThread: (threadId: string) => void;\n}\n\nexport function generateOfficeCode(officeCode?: string, sectionCode?: string) {\n    if (officeCode && sectionCode) return ` (${officeCode}-${sectionCode})`;\n    else if (officeCode) return ` (${officeCode})`\n    else return '';\n}\n\nexport default function CreateThread(props: CreateThreadProps) {\n  const theme = useTheme();\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\n  const [offices, setOffices] = React.useState<Queue>();\n  const [types, setTypes] = React.useState<Queue>();\n  const [purposes, setPurposes] = React.useState<Queue>();\n  const [formData, setFormData] = React.useState<ThreadInput>({\n    subject: \"\",\n    authorId: props.userId,\n    statusId: 2,\n    attachments: true,\n    completed: false,\n    dateDue: new Date().toISOString()\n  })\n  const [messageData, setMessageData] = React.useState<MessageInput>({\n    message: \"\",\n    files: [],\n    links: []\n  })\n  const [formError, setFormError] = React.useState<{ \n    recipient?: string, \n    subject?: string, \n    type?: string, \n    general?: string,\n    purpose?: string\n  }>();\n\n  React.useEffect(() => {\n    if (officeSections && threadTypes && threadPurposes) {\n        let officeObject: Queue = {};\n        officeSections.getAllOfficeSections.forEach(office => {\n            if (office.sectionName === \"default\") {\n                officeObject[office.sectionOffice.officeName + \" — All\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = -(office.sectionOffice.officeId);\n                officeObject[office.sectionOffice.officeName + \" — Admin\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\n            } else {\n                officeObject[office.sectionOffice.officeName + \" — \" + office.sectionName + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\n            }\n        })\n        \n        setOffices(officeObject);\n\n        let typesObject: Queue = {};\n        threadTypes.getAllThreadTypes.forEach(type => {\n            typesObject[type.docType] = type.docId;\n        })\n        setTypes(typesObject);\n\n        let purposesObject: Queue = {};\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\n            purposesObject[purpose.purposeName] = purpose.purposeId;\n        })\n        setPurposes(purposesObject);\n\n    }\n  }, [officeSections, threadTypes, threadPurposes])\n\n  if (!offices || !types || !purposes) return <LoadOverlay open={true} />\n\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\n\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\n\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\n\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\n\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\n\n  const handleDateDueChange = (date: Dayjs | null) => {\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\n  }\n\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\n\n  const handleCreateThread = async () => {\n    // validation\n    if (!formData.recipientId) {\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\n        return\n    }\n\n    if (!formData.purposeId) {\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\n        return\n    }\n\n    if (!formData.docTypeId) {\n        setFormError({ ...formError, type: \"Type is required.\" });\n        return\n    }\n\n    if (formData.subject.length === 0) {\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\n        return\n    }\n\n    // create thread\n    try {\n        const threadResult = await createThread({ variables: { data: formData }});\n\n        if (!threadResult.data) {\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\n            return\n        }\n\n         // create initial message\n        let uploadedFiles: MessageFiles[] = [];\n        let insertedLinks: MessageFiles[] = [];\n\n        // upload files if any\n        if (messageData.files.length > 0) {\n            const form = new FormData();\n            messageData.files.forEach((file) => {\n                form.append(\"files\", file);\n            })\n\n            try {\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n                uploadedFiles = result.data.files;\n            } catch (err) {\n                setFormError({ ...formError, general: (err as Error).message });\n                return\n            }\n        }\n\n        // arrange links if any\n        if (messageData.links.length > 0) {\n            insertedLinks = messageData.links.map(link => ({\n                fileName: link.name,\n                fileType: \"url\",\n                fileUrl: link.link\n            }))\n        }\n\n        // combine link array\n        const messageFiles = uploadedFiles.concat(insertedLinks);\n\n        // send first message\n        try {\n            await sendThreadMessage({ variables: { data: {\n                message: messageData.message,\n                files: messageFiles,\n                senderId: props.userId,\n                threadId: threadResult.data.createThread.refId\n            }}})\n\n            props.onCreateThread(threadResult.data.createThread.refId);\n        } catch (err) {\n            setFormError({ ...formError, general: (err as Error).message });\n            return\n        }\n\n    } catch (err) {\n        setFormError({ ...formError, general: (err as Error).message });\n        return\n    }\n  }\n\n  return (\n    <Paper sx={{ width: '100%' }}>\n        <Box \n            sx={{ \n                width: '100%', \n                maxHeight: 'calc(100vh - 105px)', \n                overflowY: 'auto',\n                overflowX: 'hidden',\n                \"::-webkit-scrollbar\": {\n                    height: \"8px\",\n                    width: \"8px\"\n                },\n\n                /* Track */\n                \"::-webkit-scrollbar-track\": {\n                    background: theme.palette.grey[300] \n                },\n                \n                /* Handle */\n                \"::-webkit-scrollbar-thumb\": {\n                    background: theme.palette.secondary.main\n                },\n                \n                /* Handle on hover */\n                \"::-webkit-scrollbar-thumb:hover\": {\n                    background: theme.palette.primary.dark\n                }\n            }}\n        >\n            <Stack spacing={3} sx={{ p: 2 }}>\n                <div>\n                    <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\n                        <Button \n                            variant='contained' \n                            endIcon={<SendIcon />}\n                            onClick={handleCreateThread}\n                        >\n                            Send\n                        </Button>\n                        <Tooltip title='Discard'>\n                            <IconButton onClick={props.onDiscardThread}>\n                                <DeleteOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Stack>\n                    <Divider />\n                </div>\n            \n                <Stack direction='row' spacing={2}>\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\n                    <Autocomplete\n                        freeSolo\n                        fullWidth\n                        options={Object.keys(offices)}\n                        onChange={handleRecipientChange}\n                        renderInput={(params) => \n                            <TextField \n                                {...params} \n                                variant='standard' \n                                error={formError?.recipient !== undefined}\n                                helperText={formError && formError.recipient}\n                            />\n                        }\n                    />\n                </Stack>\n            \n                <Stack direction='row' spacing={2}>\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\n                    <TextField \n                        name='subject'\n                        variant='standard'\n                        value={formData.subject}\n                        onChange={handleSubjectTextChange}\n                        fullWidth\n                        error={formError?.subject !== undefined}\n                        helperText={formError && formError.subject}\n                    />\n                </Stack>\n\n                <Stack direction='row' spacing={2}>\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\n                    <Autocomplete\n                        freeSolo\n                        fullWidth\n                        onChange={handleThreadPurposeChange}\n                        options={Object.keys(purposes)}\n                        renderInput={(params) => \n                            <TextField \n                                {...params} \n                                variant='standard' \n                                error={formError?.purpose !== undefined}\n                                helperText={formError && formError.purpose}\n                            />\n                        }\n                    />\n                </Stack>\n                \n                <Stack direction='row' spacing={2}>\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\n                    <Autocomplete\n                        freeSolo\n                        fullWidth\n                        onChange={handleThreadTypeChange}\n                        options={Object.keys(types)}\n                        renderInput={(params) => \n                            <TextField \n                                {...params} \n                                variant='standard' \n                                error={formError?.type !== undefined}\n                                helperText={formError && formError.type}\n                            />\n                        }\n                    />\n                </Stack>\n\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                    <DatePicker \n                        label=\"Date Due\"\n                        views={[\"year\", \"month\", \"day\"]}\n                        value={dayjs(formData.dateDue)} \n                        onChange={handleDateDueChange} \n                        format=\"MMMM DD, YYYY\"\n                    />\n                </LocalizationProvider>\n\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            checked={formData.attachments} \n                            onChange={handleToggleAttachments} \n                        />\n                    } \n                    label=\"Attachments Required\" \n                />\n\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\n\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                        {formError && formError.general}\n                    </Alert>\n                </Snackbar>\n            </Stack>\n        </Box>\n    </Paper>\n  )\n}","import React, { useState } from 'react';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Popover from '@mui/material/Popover';\n// icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { DocumentTypes } from '../../api/threads/types';\n\n// ----------------------------------------------------------------------\n\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const [open, setOpen] = useState<Element | null>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setOpen(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setOpen(null);\n  };\n\n  return (\n    <>\n      <IconButton\n        onClick={handleOpen}\n        sx={{\n          p: 0,\n          mx: 2,\n          ...(open && {\n            '&:before': {\n              zIndex: 1,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              borderRadius: '50%',\n              position: 'absolute',\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\n            },\n          }),\n        }}\n      >\n        <FilterListIcon />\n      </IconButton>\n\n      <Popover\n        open={Boolean(open)}\n        anchorEl={open}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        PaperProps={{\n          sx: {\n            p: 0,\n            mt: 1.5,\n            ml: 0.75,\n            width: 360,\n            '& .MuiMenuItem-root': {\n              typography: 'body2',\n              borderRadius: 0.75,\n            },\n          },\n        }}\n      >\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\n            <List\n                disablePadding\n                subheader={\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\n                        Thread Types\n                    </ListSubheader>\n                }\n            >\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\n                  All\n                </ListItemButton>\n                <Divider sx={{ borderStyle: 'dashed' }} />\n\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\n                  <React.Fragment key={thread.docId}>\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\n                      {thread.docType}\n                    </ListItemButton>\n                    <Divider sx={{ borderStyle: 'dashed' }} />\n                  </React.Fragment>\n                ))}\n            </List>\n        </Box>\n      </Popover>\n    </>\n  );\n}","import React from 'react';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Divider from '@mui/material/Divider';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\n// icons\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddIcon from '@mui/icons-material/Add';\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\n// project imports\nimport FilterPopover from './FilterPopover';\nimport { Thread } from '../../api/threads/types';\nimport { LoadOverlay } from '../../components/Loaders';\n\n\ninterface EmailListProps {\n  mode: string;\n  compose: boolean;\n  mails?: Thread[];\n  onRefresh: () => void;\n  onComposeThread: () => void;\n  onThreadClick: (threadId: string) => void;\n}\n\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\n  \"inbox\": {\n    title: \"Job Well Done!\",\n    sub: \"You have no active threads\"\n  },\n  \"sent\": {\n    title: \"Compose a thread\",\n    sub: \"You have no created threads\"\n  }\n}\n\nconst formatInboxDate = (date: string | Date) => {\n  const target = new Date(date);\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function EmailList(props: EmailListProps) {\n  const theme = useTheme();\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\n\n  return (\n    <React.Fragment>\n      <LoadOverlay open={props.mails === undefined} />\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\n        {props.mode !== \"completed\" && (\n          <Button \n            variant='contained' \n            endIcon={<AddIcon />} \n            disabled={props.compose}\n            onClick={props.onComposeThread}\n          >\n              Compose\n          </Button>\n        )}\n        \n        <IconButton onClick={props.onRefresh}>\n          <RefreshIcon />\n        </IconButton>\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\n      </Stack>\n      \n      <Paper sx={{ width: '100%' }}>\n        <List \n          sx={{ \n            width: '100%', \n            maxHeight: 'calc(100vh - 170px)', \n            overflowY: 'auto',\n            \"::-webkit-scrollbar\": {\n              height: \"8px\",\n              width: \"8px\"\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n                background: theme.palette.grey[300] \n            },\n            \n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n                background: theme.palette.secondary.main\n            },\n            \n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n                background: theme.palette.primary.dark\n            }\n          }}>\n\n          {props.mails && props.mails.length === 0 && (\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\n              <Typography variant=\"subtitle1\">\n                  {emptyMessages[props.mode].title}\n              </Typography>\n              <Typography variant=\"body1\">\n                {emptyMessages[props.mode].sub}\n              </Typography>\n            </Box>\n          )}\n          \n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\n            <React.Fragment key={msg.refId}>\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\n\n                <ListItemAvatar>\n                  <Avatar>\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={\n                    <Box sx={{ mb: 2 }}>\n                        <Typography variant='body1' gutterBottom>\n                            {msg.subject}\n                        </Typography>\n                        <div>\n                          <Typography\n                            sx={{ display: 'inline' }}\n                            component=\"span\"\n                            variant=\"subtitle2\"\n                            color=\"text.primary\"\n                          >\n                            {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\n                          </Typography>\n                          {` — ${msg.docType.docType} request For ${msg.purpose.purposeName}.`}\n                        </div>\n                    </Box>\n                  } \n                  secondary={\n                    <Box sx={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      justifyContent: 'space-between'\n                    }}>\n                      <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\n                      <Typography variant='caption'>\n                        {`Due at ${formatInboxDate(msg.dateDue)}`}\n                      </Typography>\n                    </Box>\n                  }\n                />\n              </ListItemButton>\n              <Divider variant=\"inset\" component=\"li\" />\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n\ninterface LinkDialogProps {\n    open: boolean;\n    onClose: () => void;\n    onSubmit: (name: string, link: string) => void;\n}\n\nexport default function LinkDialog(props: LinkDialogProps) {\n  const [name, setName] = React.useState<string>(\"\");\n  const [link, setLink] = React.useState<string>(\"\");\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    props.onSubmit(name, link);\n    setLink(\"\");\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\n        <form onSubmit={handleSubmit} >\n            <DialogTitle>Add Link</DialogTitle>\n            <DialogContent>\n              <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    name=\"name\"\n                    label=\"File Name\"\n                    fullWidth\n                    value={name}\n                    onChange={(event) => setName(event.target.value)}\n                    variant=\"standard\"\n                    sx={{ minWidth: 300 }}\n                    required\n                />\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    name=\"link\"\n                    label=\"File Link\"\n                    type=\"url\"\n                    fullWidth\n                    value={link}\n                    onChange={(event) => setLink(event.target.value)}\n                    variant=\"standard\"\n                    sx={{ minWidth: 300 }}\n                    required\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button type='submit'>Add Link</Button>\n            </DialogActions>\n        </form>\n    </Dialog>\n  );\n}\n","import React from 'react'\n// mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport Chip from '@mui/material/Chip';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n// icons\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport ReplyIcon from '@mui/icons-material/Reply';\n// project imports\nimport LinkDialog from './AddLinkDialog';\nimport { MessageFiles, Messages } from '../../api/threads/types';\n// api\nimport { useMutation } from '@apollo/client';\nimport axios from 'axios';\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\n\n\nexport interface MessageInput {\n    message: string;\n    files: File[];\n    links: {\n        name: string;\n        link: string;\n    }[];\n}\n\nexport interface MessageCreateInput {\n    message: string;\n    senderId: string;\n    threadId: string;\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\n}\n\ninterface ReplyBoxProps {\n    userId: string;\n    threadId?: string;\n    attached?: boolean;\n    onChange?: (data: MessageInput) => void;\n    onSubmit?: () => void;\n}\n\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [attachments, setAttachments] = React.useState<string[]>([]);\n  const [formData, setFormData] = React.useState<MessageInput>({\n    message: \"\",\n    files: [],\n    links: []\n  })\n  const [formError, setFormError] = React.useState<string>();\n\n  React.useEffect(() => {\n    const fileNames = formData.files.map(file => file.name);\n    setAttachments(fileNames.concat(formData.links.map(link => link.name)))\n  }, [formData, onChange]);\n\n  React.useEffect(() => {\n    if (onChange) onChange(formData);\n  }, [formData, onChange])\n\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\n\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) \n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\n  }\n\n  const handleAddLink = (name: string, link: string) => {\n    setFormData({ ...formData, links: [ ...formData.links, { name, link } ] });\n    setOpen(false);\n  }\n\n  const handleDelete = (name: string) => {\n    const link = formData.links.find(l => l.name === name);\n    const file = formData.files.find(f => f.name === name);\n\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l.name !== name) });\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\n  }\n\n  const handleCloseSnackbar = () => setFormError(undefined);\n\n  const handleSendThreadMessage = async () => {\n    // validation\n    if (!threadId) return\n\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\n        setFormError(\"Attached file is required.\");\n        return\n    }\n\n    // create initial message\n    let uploadedFiles: MessageFiles[] = [];\n    let insertedLinks: MessageFiles[] = [];\n\n    // upload files if any\n    if (formData.files.length > 0) {\n        const form = new FormData();\n        formData.files.forEach((file) => {\n            form.append(\"files\", file);\n        })\n\n        try {\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n            uploadedFiles = result.data.files;\n        } catch (err) {\n            setFormError((err as Error).message);\n            return\n        }\n    }\n\n    // arrange links if any\n    if (formData.links.length > 0) {\n        insertedLinks = formData.links.map(link => ({\n            fileName: link.name,\n            fileType: \"url\",\n            fileUrl: link.link\n        }))\n    }\n\n    // combine link array\n    const messageFiles = uploadedFiles.concat(insertedLinks);\n\n    // send first message\n    try {\n        await sendThreadMessage({ variables: { data: {\n            message: formData.message,\n            files: messageFiles,\n            senderId: userId,\n            threadId: threadId\n        }}})\n\n        // reset form\n        setFormData({\n            message: \"\",\n            files: [],\n            links: []\n        })\n\n        if (onSubmit) onSubmit();\n    } catch (err) {\n        setFormError((err as Error).message);\n        return\n    }\n  }\n\n\n  return (\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\n        <TextField \n            name='message'\n            value={formData.message}\n            onChange={handleMessageTextChange}\n            multiline\n            rows={4}\n            fullWidth\n        />\n        <Stack \n            direction='row' \n            justifyContent='space-between' \n            alignItems='center' \n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\n        >\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n                <Tooltip title='Upload File'>\n                    <IconButton component=\"label\">\n                        <FileUploadIcon />\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title='Insert Link'>\n                    <IconButton onClick={() => setOpen(true)}>\n                        <InsertLinkIcon />\n                    </IconButton>\n                </Tooltip>\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\n                    {attachments.map(name => (\n                        <Chip\n                            key={name}\n                            label={name}\n                            sx={{ mx: 1 }}\n                            onDelete={() => handleDelete(name)}\n                        />\n                    ))}\n                </Box>\n            </Box>\n\n            {threadId && (\n                <Button \n                    variant='contained' \n                    size='large' \n                    endIcon={<ReplyIcon />}\n                    onClick={handleSendThreadMessage}\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\n                >\n                    Reply\n                </Button>\n            )}\n        </Stack>\n\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\n\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                {formError && formError}\n            </Alert>\n        </Snackbar>\n    </Box>\n  )\n}","import React from 'react';\nimport Card from '@mui/material/Card';\nimport Box from '@mui/material/Box';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n// types\nimport { Messages } from '../../api/threads/types';\n\n\nconst formatInboxDate = (date: string | Date) => {\n  const target = new Date(date);\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\n  if (sender) return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ backgroundColor: 'red' }}>\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\n          </Avatar>\n        }\n        title={content.sender.firstName + ' ' + content.sender.lastName}\n        subheader={content.sender.role.roleName}\n        action={\n          <Typography variant='body2'>\n            {formatInboxDate(content.dateSent)}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {content.message}\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\n          {content.files.map(file => (\n            <Chip \n              key={file.fileId} \n              label={file.fileName} \n              variant=\"outlined\" \n              component=\"a\" \n              href={file.fileUrl} \n              target='_blank' \n              clickable \n            />\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\n          </Avatar>\n        }\n        title={content.sender.firstName + ' ' + content.sender.lastName}\n        subheader={content.sender.role.roleName}\n        action={\n          <Typography variant='body2'>\n            {formatInboxDate(content.dateSent)}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {content.message}\n        </Typography>\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\n            {content.files.map(file => (\n              <Chip \n                key={file.fileId} \n                label={file.fileName} \n                variant=\"outlined\" \n                component=\"a\" \n                href={file.fileUrl} \n                target='_blank' \n                clickable \n              />\n            ))}\n        </Stack>\n      </CardContent>\n    </Box>\n  );\n}\n","import React from 'react';\n// mui\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport SignatureCanvas from 'react-signature-canvas';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\n// api \nimport axios from 'axios';\n\ninterface SignatureDialogProps {\n    open: boolean;\n    imageUrl: string | null;\n    onClose: () => void;\n    onSubmit: (url: string) => void;\n}\n\nexport default function SignatureDialog({ open, imageUrl, onSubmit, onClose }: SignatureDialogProps) {\n    const sigPad = React.useRef<SignatureCanvas | null>(null);\n    const [error, setError] = React.useState<string | null>(null);\n\n    const handleSubmitSignature = () => {\n        if (sigPad.current) {\n            onSubmit(sigPad.current.getTrimmedCanvas().toDataURL('image/png'));\n            onClose();\n        }\n    }\n\n    const handleCancel = () => {\n        if (sigPad.current) {\n            sigPad.current.clear();\n            onClose();\n        }\n    }\n\n    const handleUploadSignature = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files) {\n            const form = new FormData();\n            form.append(\"files\", event.target.files[0])\n\n            try {\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n                onSubmit(result.data.files[0].fileUrl);\n                onClose();\n            } catch (err) {\n                setError((err as Error).message);\n                return\n            }\n        }\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth='md'>\n            <DialogTitle>Add Signature</DialogTitle>\n            <DialogContent>\n                {error && (\n                    <Alert severity='error'>{error}</Alert> \n                )}\n\n                <SignatureCanvas \n                    penColor='black'\n                    ref={sigPad}\n                    canvasProps={{width: 500, height: 200 }}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button component='label'>\n                    Upload Signature\n\n                    <input type='file' onChange={handleUploadSignature} hidden />\n                </Button>\n                <Button onClick={handleSubmitSignature}>Submit Signature</Button>\n                <Button color='error' onClick={handleCancel}>Cancel</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","import {\n    Document,\n    Page,\n    View,\n    Text,\n    Font,\n    StyleSheet,\n    Image\n} from '@react-pdf/renderer';\nimport { Thread } from '../../api/threads/types';\nimport { Form2309Data } from '../../pages/threads/Form2309';\n\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nFont.register({\n    family: 'Oswald',\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\n});\n\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \n    \n    return (\n        <Document>\n            <Page size={[345.60, 525.60]} style={styles.body}>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.tableCol}>\n                            <Text style={styles.tableCellLeft}>BIR</Text>\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\n                        </View>\n                        <View style={styles.tableCol}>\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\n                            <Text style={styles.tableCellLeft}>{thread.recipient.sectionOffice.officeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\n                        </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                    <View style={styles.purposeCol}>\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\n                    </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\n                            <Text style={styles.tableCellLeft}>{thread.purpose.purposeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                    <View style={styles.purposeCol}>\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\n                    </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\n                            {details.signatureUrl ? (\n                                <View style={styles.signatureContainer}>\n                                    <Image style={styles.signatureImage} src={details.signatureUrl} />\n                                </View>\n                            ) : thread.author.signImage ? (\n                                <View style={styles.signatureContainer}>\n                                    <Image style={styles.signatureImage} src={thread.author.signImage} />\n                                </View>\n                            ) : (\n                                <Text style={styles.emptyCell}></Text>\n                            )}\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>{thread.author.officeSection.sectionOffice.refNum}</Text>\n                        </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.purposeCol}>\n                            <Text style={styles.tableCellLeftBoldSmall}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\n                        </View>\n                    </View>\n                </View>\n            </Page>\n        </Document>\n    );\n}\n  \nconst styles = StyleSheet.create({\n    body: {\n      paddingTop: 15,\n      paddingBottom: 15,\n      paddingHorizontal: 15,\n\n    },\n    table: { \n      width: \"auto\", \n      borderStyle: \"solid\", \n      borderWidth: 1,\n      padding: 2\n    },\n    tableRow: { \n      margin: \"auto\", \n      marginTop: 2,\n      flexDirection: \"row\" \n    }, \n    tableCol: { \n      width: \"50%\"\n    },\n    recipientCol: { \n      width: \"70%\"\n    },\n    dateCol: { \n      width: \"30%\"\n    },\n    purposeCol: { \n      width: \"100%\"\n    },\n    tableCellLeft: { \n      margin: 2,\n      fontSize: 9,\n      textAlign: \"left\"\n    },\n    emptyCell: { \n      height: 30\n    },\n    tableCellLeftBold: { \n      margin: 2,\n      fontSize: 9,\n      textAlign: \"left\",\n      fontWeight: \"bold\"\n    },\n  \ttableCellLeftBoldSmall: { \n      margin: 2,\n      fontSize: 6,\n      textAlign: \"left\",\n      fontWeight: \"bold\"\n    },\n    tableCellRight: { \n      margin: 2,\n      fontSize: 9,\n      textAlign: \"right\"\n    },\n    tableCellCenter: { \n        margin: 2,\n        fontSize: 8,\n        textAlign: \"center\"\n    },\n    tableCellCenterSmall: { \n        margin: 2,\n        fontSize: 8,\n        textAlign: \"center\"\n    },\n  \tsignatureContainer: {\n    \tdisplay: \"flex\",\n      \tflexDirection: \"row\",\n      \tjustifyContent: \"center\"\n    },\n  \tsignatureImage: {\n    \twidth: 60,\n      \theight: 30\n    }\n});\n  ","import React from 'react';\nimport { Thread, UserAccounts } from '../../api/threads/types';\n// mui\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\n// project imports\nimport SignatureDialog from './Signature';\n// renderer\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport Form2309 from '../../components/Form2309';\nimport axios from 'axios';\nimport { useMutation } from '@apollo/client';\nimport { UPLOAD_SIGNATURE } from '../../api/offices';\n\n\nexport interface Form2309Data {\n    subject: string;\n    remarks: string;\n    signatureUrl: string | null;\n}\n\nexport default function EditForm2309({ userId, thread, onGenerate }: { userId: string, thread: Thread, onGenerate: () => void }) {\n    const [uploadSignature, { error }] = useMutation<{ updateSignature: UserAccounts }>(UPLOAD_SIGNATURE);\n    const [formData, setFormData] = React.useState<Form2309Data>({\n        subject: '',\n        remarks: '',\n        signatureUrl: null\n    });\n    const [upload, setUpload] = React.useState<File | null>(null);\n    const [open, setOpen] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        setFormData(state => ({\n            ...state,\n            subject: thread.subject,\n            remarks: thread.messages[0].message\n        }))\n    }, [thread])\n\n    React.useEffect(() => {\n        const uploadForm = async () => {\n            if (upload) {\n                const form = new FormData();\n                form.append(\"form\", upload);\n                form.append(\"requestId\", thread.refId);\n\n                try {\n                    const result = await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\n                    window.open(result.data.fileUrl, \"_blank\");\n\n                    onGenerate();\n                } catch (err) {\n                    console.log(err);\n                    return\n                }\n\n                setUpload(null);\n            }\n        }\n\n        uploadForm();\n    }, [upload, onGenerate, thread.refId]);\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({ ...formData, [event.target.name]: event.target.value })\n    }\n\n    const handleUploadForm = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files) setUpload(event.target.files[0]);\n    }\n\n    const handleGenerateForm = async (blob: Blob | null, url: string | null) => {\n        if (url && blob) {\n            window.open(url, \"_blank\");\n\n            const file = new File([blob], `${thread.refSlipNum}.pdf`, {\n                type: \"application/pdf\",\n            });\n\n            const form = new FormData();\n            form.append(\"form\", file);\n            form.append(\"requestId\", thread.refId);\n\n            try {\n                await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\n                onGenerate();\n            } catch (err) {\n                console.log(err);\n                return\n            }\n        }\n    }\n\n    const handleToggleSignature = () => setOpen(!open);\n\n    const handleSubmitESignature = async (url: string) => {\n        setFormData({ ...formData, signatureUrl: url });\n        await uploadSignature({\n            variables: {\n                userId: userId,\n                signImage: url\n            }\n        })\n    }\n\n    const handleRemoveSignature = async () => {\n        setFormData({ ...formData, signatureUrl: null });\n        await uploadSignature({\n            variables: {\n                userId: userId,\n                signImage: null\n            }\n        })\n    }\n\n    return (\n        <Stack spacing={3} sx={{ p: 2 }}>\n\n            {error && (\n                <Alert severity='error'>{error.message}</Alert> \n            )}\n\n\n            <Stack direction='row' spacing={1} justifyContent='flex-end' alignItems='center'>\n                <Button variant='outlined' onClick={handleToggleSignature}>Add Signature</Button>\n                {thread.author.signImage && (\n                    <Button variant='outlined' color='error' onClick={handleRemoveSignature}>Remove Signature</Button>\n                )}\n            </Stack>\n\n            <TextField\n                multiline\n                rows={2}\n                name='subject'\n                label='Subject'\n                value={formData.subject}\n                onChange={handleTextChange}\n            />\n\n            <TextField\n                multiline\n                rows={3}\n                name='remarks'\n                label='Remarks'\n                value={formData.remarks}\n                onChange={handleTextChange}\n            />\n\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\n                {({ blob, url, loading, error }) => (\n                     <Button \n                        fullWidth \n                        onClick={() => handleGenerateForm(blob, url)}\n                        variant='contained'>\n                            Generate Form 2309\n                    </Button>\n                )}\n            </PDFDownloadLink>\n           \n            <Button \n                fullWidth \n                disabled={upload !== null}\n                component='label'\n                variant='outlined'>\n                    Upload Form 2309\n\n                    <input type='file' hidden onChange={handleUploadForm} />\n            </Button>\n\n            <SignatureDialog \n                open={open}\n                imageUrl={formData.signatureUrl}\n                onSubmit={handleSubmitESignature}\n                onClose={handleToggleSignature}\n            />\n        </Stack>\n    );\n}","import React from 'react';\n// mui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport Link from '@mui/material/Link';\n// types\nimport { MessageFiles, Messages } from '../../api/threads/types';\n\n\nexport default function ThreadDirectory(props: { messages: Messages[], reqForm?: string }) {\n    const [files, setFiles] = React.useState<MessageFiles[]>([]);\n\n    React.useEffect(() => {\n        let msgFiles: MessageFiles[] = [];\n        props.messages.forEach(msg => {\n            msgFiles = msgFiles.concat(msg.files)\n        });\n        setFiles(msgFiles);\n\n    }, [props.messages])\n\n    console.log(files);\n\n    return (\n        <Box sx={{ width: '100%', p: 2 }}>\n             <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n                Shared Files\n            </Typography>\n            <List>\n              {props.reqForm && (\n                <>\n                    <ListItem>\n                        <ListItemIcon>\n                            <FolderIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={\n                                <Typography component={Link} variant='body1' href={props.reqForm} target='_blank'>\n                                    Form 2309\n                                </Typography>\n                            }\n                            secondary='application/PDF'\n                        />\n                    </ListItem>\n                    <Divider />\n                </>\n              )}\n\n              {files.map(file => (\n                <React.Fragment key={file.fileId}>\n                    <ListItem>\n                        <ListItemIcon>\n                            <FolderIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={\n                                <Typography component={Link} variant='body1' href={file.fileUrl} target='_blank'>\n                                    {file.fileName}\n                                </Typography>\n                            }\n                            secondary={file.fileType}\n                        />\n                    </ListItem>\n                    <Divider />\n                </React.Fragment>\n              ))}\n            </List>\n        </Box>\n    )\n}","import React from 'react';\n// mui\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport Alert from '@mui/material/Alert';\nimport { ThreadHistory } from '../../api/threads/types';\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function History(props: { history: ThreadHistory[] }) {\n\n    const handleSeverity = (status: string | null) => {\n        if (status && status.includes(\"Closed\")) return \"success\";\n        else if (status && status.includes(\"Progress\")) return \"info\";\n        else if (status && status.includes(\"Approval\")) return \"warning\";\n        else return \"info\"\n    }\n\n    return (\n        <Box sx={{ width: '100%', p: 2 }}>\n            <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n                Request History\n            </Typography>\n            <Stack spacing={2}>\n                {props.history.map((event, index) => (\n                    <Alert key={index} severity={handleSeverity(event.status ? event.status.statusLabel : null)}>\n                        {`${event.historyLabel} ${event.status ? `to ${event.status.statusLabel}`: ''} at ${formatInboxDate(event.dateCreated)}`}\n                    </Alert>\n                ))}\n            </Stack>\n        </Box>\n    )\n}","import React from 'react';\n// mui\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport { useTheme } from '@mui/material/styles';\n// icons\nimport TuneIcon from '@mui/icons-material/Tune';\nimport CloseIcon from '@mui/icons-material/Close';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n// project imports\nimport { LoadOverlay } from '../../components/Loaders';\nimport MessageCard from './MessageCard';\nimport Form2309 from './Form2309';\nimport ReplyBox from './ReplyBox';\nimport ThreadDirectory from './Directory';\nimport ThreadHistory from './History';\nimport { DocumentStatus, Thread } from '../../api/threads/types';\n// api\nimport { useQuery, useMutation } from '@apollo/client';\nimport { \n    ARCHIVE_THREAD,\n    GET_ALL_THREAD_STATUS, \n    GET_THREAD_BY_ID, \n    RESTORE_THREAD, \n    SET_MESSAGE_AS_READ, \n    UPDATE_THREAD_STATUS\n} from '../../api/threads';\n\ninterface TabPaneProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nexport function TabPanel(props: TabPaneProps) {\n    return (\n        <div>\n            {props.value === props.index && props.children}\n        </div>\n    )\n}\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\ninterface ThreadListProps {\n    userId: string;\n    threadId: string;\n}\n\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\n  const theme = useTheme();\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\n    variables: { uid: threadId }\n  });\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\n  const [archiveThread] = useMutation(ARCHIVE_THREAD);\n  const [restoreThread] = useMutation(RESTORE_THREAD);\n\n  const [tabValue, setTableValue] = React.useState<number>(0);\n  const [expanded, setExpanded] = React.useState<boolean>(false);\n  const [statusId, setStatusId] = React.useState<number>(2);\n  const [attach, setAttach] = React.useState<string>('true');\n  const [completed, setCompleted] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (threadData) {\n        setStatusId(threadData.getThreadById.status.statusId);\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\n        setCompleted(threadData.getThreadById.completed);\n    }\n  }, [threadData])\n\n  React.useEffect(() => {\n    if (threadData) {\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\n            setMessageAsRead({\n                variables: {\n                    threadId: threadData.getThreadById.refId,\n                    userId: user.sender.accountId\n                }\n            })\n        })\n    }\n  }, [threadData, userId, setMessageAsRead])\n\n  React.useEffect(() => {\n    refetch({ uid: threadId });\n  }, [threadId, refetch])\n\n  const handleExpand = () => setExpanded(!expanded);\n\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    await updateThreadStatus({ variables: {\n        uid: threadId,\n        attachments: attach === 'true' ? true : false,\n        statusId: parseInt(event.target.value)\n    }})\n\n    // check if completed\n    const completedId = [1, 3];\n    setCompleted(completedId.includes(parseInt(event.target.value)));\n\n    setStatusId(parseInt(event.target.value));\n    refetch({ uid: threadId });\n  }\n\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    await updateThreadStatus({ variables: {\n        uid: threadId,\n        attachments: event.target.value === 'true' ? true : false,\n        statusId\n    }})\n\n    setAttach(event.target.value);\n  }\n\n  const handleArchiveThread = async () => {\n    await archiveThread({\n        variables: {\n            threadId: threadId\n        }\n    })\n\n    refetch({ uid: threadId });\n  }\n\n  const handleRestoreThread = async () => {\n    await restoreThread({\n        variables: {\n            threadId: threadId\n        }\n    })\n\n    refetch({ uid: threadId });\n  }\n\n  const reloadThread = () => refetch({ uid: threadId });\n\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\n\n  const { subject, author, refSlipNum, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments, active } = threadData.getThreadById;\n\n  return (\n    <Paper sx={{ width: '100%' }}>\n        <Box \n            sx={{ \n                width: '100%', \n                maxHeight: 'calc(100vh - 105px)', \n                overflowY: 'auto',\n                overflowX: 'hidden',\n                \"::-webkit-scrollbar\": {\n                    height: \"8px\",\n                    width: \"8px\"\n                },\n\n                /* Track */\n                \"::-webkit-scrollbar-track\": {\n                    background: theme.palette.grey[300] \n                },\n                \n                /* Handle */\n                \"::-webkit-scrollbar-thumb\": {\n                    background: theme.palette.secondary.main\n                },\n                \n                /* Handle on hover */\n                \"::-webkit-scrollbar-thumb:hover\": {\n                    background: theme.palette.primary.dark\n                }\n            }}\n        >\n            <Box sx={{ width: '100%', p: 2 }}>\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\n                        {`Ref # ${refSlipNum}`}\n                    </Typography>\n        \n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\n                        {((userId === threadData.getThreadById.author.accountId && !threadData.getThreadById.purpose.purposeName.includes(\"Approval\")) || \n                           (userId !== threadData.getThreadById.author.accountId && threadData.getThreadById.purpose.purposeName.includes(\"Approval\"))) && (\n                            <IconButton onClick={handleExpand}>\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\n                            </IconButton>\n                        )}\n                         <IconButton onClick={reloadThread}>\n                            <RefreshIcon />\n                        </IconButton>\n                    </Box>\n                </Stack>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\n                        <TextField\n                            name='status'\n                            label='Status'\n                            select\n                            sx={{ width: 200 }}\n                            value={statusId}\n                            onChange={handleStatusChange}\n                        >\n                            {threadStatus.getAllThreadStatus.map(status => (\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\n                            ))}\n                        \n                        </TextField>\n                        <TextField\n                            name='attachments'\n                            label='Attachments'\n                            select\n                            sx={{ width: 200 }}\n                            value={attach}\n                            onChange={handleAttachmentChange}\n                        >\n                            <MenuItem value='true'>Required</MenuItem>\n                            <MenuItem value='false'>Not Required</MenuItem> \n                        </TextField>\n                    </Stack>\n                </Collapse>\n                <Divider sx={{ mb: 1 }} />\n                \n                {active ? (\n                    <Alert \n                        severity={completed ? \"success\" : \"info\"}\n                        action={userId === threadData.getThreadById.author.accountId && (\n                            <Button color='error' onClick={handleArchiveThread}>\n                                Cancel\n                            </Button>\n                        )}\n                    >\n                        {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\n                    </Alert>\n                ) : (\n                    <Alert \n                        severity='error'\n                        action={userId === threadData.getThreadById.author.accountId && (\n                            <Button onClick={handleRestoreThread}>\n                                Restore\n                            </Button>\n                        )}\n                    >\n                        Archived Request\n                    </Alert>\n                )}\n\n            </Box>\n\n            <Box sx={{ px: 2 }}>\n                <Typography variant='body1' color='secondary'>\n                    {author.firstName + ' ' + author.lastName} \n                    <span style={{ color: 'black' }}>{' to '}</span> \n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\n                </Typography>\n                <Typography variant='h4'>\n                    {subject}\n                </Typography>\n            </Box>\n\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\n                <Tab label=\"Conversation\" />\n                <Tab label=\"Files\" />\n                <Tab label=\"History\" />\n                {threadData.getThreadById.author.accountId === userId && (\n                    <Tab label=\"Form 2309\" />\n                )}\n            </Tabs>\n           \n            <TabPanel index={0} value={tabValue}>\n                <Box sx={{ p: 2 }}>\n                    {messages.map(msg => (\n                        <Box \n                            key={msg.msgId} \n                            sx={{ \n                                my: 2, \n                                pl: msg.sender.accountId === userId ? 8 : 0,\n                                pr: msg.sender.accountId !== userId ? 8 : 0\n                            }}\n                        >\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\n                        </Box>\n                    ))}\n                </Box>\n\n                <Box sx={{ p: 2 }}>\n                    {!completed && (\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\n                    )}\n                </Box>\n            </TabPanel>\n\n            <TabPanel index={1} value={tabValue}>\n                <ThreadDirectory messages={threadData.getThreadById.messages} reqForm={threadData.getThreadById.reqForm} />\n            </TabPanel>\n\n            <TabPanel index={2} value={tabValue}>\n                <ThreadHistory history={threadData.getThreadById.history} />\n            </TabPanel>\n\n           {threadData.getThreadById.author.accountId === userId && (\n                <TabPanel index={3} value={tabValue}>\n                    <Form2309 userId={userId} thread={threadData.getThreadById} onGenerate={reloadThread} />\n                </TabPanel>\n           )}\n        </Box>\n    </Paper>\n  )\n}"],"names":["generateOfficeCode","officeCode","sectionCode","concat","CreateThread","props","theme","useTheme","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState8","formData","setFormData","_React$useState9","message","files","links","_React$useState10","messageData","setMessageData","_React$useState11","_React$useState12","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","refNum","officeId","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","name","fileType","fileUrl","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","thread","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","id","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","filter","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","component","status","statusLabel","size","LinkDialog","setName","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","SignatureDialog","imageUrl","sigPad","setError","handleUploadSignature","_x","SignatureCanvas","penColor","ref","canvasProps","current","getTrimmedCanvas","toDataURL","clear","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","refSlipNum","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","signatureUrl","signatureContainer","Image","signatureImage","src","signImage","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","tableCellLeftBoldSmall","Font","register","family","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","EditForm2309","onGenerate","UPLOAD_SIGNATURE","_useMutation2","uploadSignature","upload","setUpload","state","messages","uploadForm","window","console","log","handleTextChange","_defineProperty","handleGenerateForm","_ref3","_callee2","blob","url","_context2","File","_x2","handleToggleSignature","handleSubmitESignature","_ref4","_callee3","_context3","_x3","handleRemoveSignature","_ref5","_callee4","_context4","PDFDownloadLink","document","_ref6","loading","ThreadDirectory","setFiles","msgFiles","reqForm","ListItem","ListItemIcon","FolderIcon","Link","History","history","index","includes","historyLabel","TabPanel","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","refetch","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","_useMutation5","ARCHIVE_THREAD","archiveThread","_useMutation7","RESTORE_THREAD","restoreThread","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","handleAttachmentChange","handleArchiveThread","handleRestoreThread","reloadThread","_threadData$getThread","dateUpdated","active","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","Tabs","e","Tab","pl","pr","msgId","ThreadHistory"],"sourceRoot":""}