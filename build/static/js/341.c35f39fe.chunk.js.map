{"version":3,"file":"static/js/341.c35f39fe.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","components/Form2309/index.tsx","pages/threads/Form2309.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\n// mui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport Chip from '@mui/material/Chip';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport Paper from '@mui/material/Paper';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n// icons\nimport SendIcon from '@mui/icons-material/Send';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\n// api\nimport { useQuery, useMutation } from '@apollo/client';\nimport axios from 'axios';\nimport { \n    DocumentTypes, \n    MessageFiles, \n    Messages, \n    OfficeSections, \n    Thread\n} from '../../api/threads/types';\nimport { \n    CREATE_THREAD,\n    GET_ALL_THREAD_TYPES, \n    GET_BIR_OFFICES,\n    SEND_THREAD_MESSAGE\n} from '../../api/threads';\n// project imports\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\nimport { LoadOverlay } from '../../components/Loaders';\n\n\ninterface ThreadInput {\n    subject: string;\n    authorId: string;\n    statusId: number;\n    recipientId?: number;\n    docTypeId?: number;\n    attachments: boolean;\n    completed: boolean;\n    dateDue: string;\n}\n\ninterface Queue {\n    [key: string]: number\n}\n\ninterface CreateThreadProps {\n    userId: string;\n    onDiscardThread: () => void;\n    onCreateThread: (threadId: string) => void;\n}\n\nexport default function CreateThread(props: CreateThreadProps) {\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const [createThread] = useMutation<{ createThread: Thread }, { data: ThreadInput }>(CREATE_THREAD);\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\n  const [offices, setOffices] = React.useState<Queue>();\n  const [types, setTypes] = React.useState<Queue>();\n  const [formData, setFormData] = React.useState<ThreadInput>({\n    subject: \"\",\n    authorId: props.userId,\n    statusId: 2,\n    attachments: true,\n    completed: false,\n    dateDue: new Date().toISOString()\n  })\n  const [messageData, setMessageData] = React.useState<MessageInput>({\n    message: \"\",\n    files: [],\n    links: []\n  })\n  const [formError, setFormError] = React.useState<{ \n    recipient?: string, \n    subject?: string, \n    type?: string, \n    general?: string \n  }>();\n\n  React.useEffect(() => {\n    if (officeSections && threadTypes) {\n        let officeObject: Queue = {};\n        officeSections.getAllOfficeSections.forEach(office => {\n            officeObject[office.sectionName === \"default\" ?\n            office.sectionOffice.officeName :\n            office.sectionOffice.officeName + \" — \" + office.sectionName] = office.sectionId;\n        })\n        setOffices(officeObject);\n\n        let typesObject: Queue = {};\n        threadTypes.getAllThreadTypes.forEach(type => {\n            typesObject[type.docType] = type.docId;\n        })\n        setTypes(typesObject);\n    }\n  }, [officeSections, threadTypes])\n\n  if (!offices || !types) return <LoadOverlay open={true} />\n\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\n\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\n\n  const handleRecipientChange = (_: any, newValue: string | null) => setFormData({ ...formData, recipientId: offices[newValue as string] });\n\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\n\n  const handleDateDueChange = (date: Dayjs | null) => {\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\n  }\n\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\n\n  const handleCreateThread = async () => {\n    // validation\n    if (!formData.recipientId) {\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\n        return\n    }\n\n    if (!formData.docTypeId) {\n        setFormError({ ...formError, type: \"Type is required.\" });\n        return\n    }\n\n    if (formData.subject.length === 0) {\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\n        return\n    }\n\n    // create thread\n    try {\n        const threadResult = await createThread({ variables: { data: formData }});\n\n        if (!threadResult.data) {\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\n            return\n        }\n\n         // create initial message\n        let uploadedFiles: MessageFiles[] = [];\n        let insertedLinks: MessageFiles[] = [];\n\n        // upload files if any\n        if (messageData.files.length > 0) {\n            const form = new FormData();\n            messageData.files.forEach((file) => {\n                form.append(\"files\", file);\n            })\n\n            try {\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n                uploadedFiles = result.data.files;\n            } catch (err) {\n                setFormError({ ...formError, general: (err as Error).message });\n                return\n            }\n        }\n\n        // arrange links if any\n        if (messageData.links.length > 0) {\n            insertedLinks = messageData.links.map(link => ({\n                fileName: link.split('/').pop() as string,\n                fileType: \"\",\n                fileUrl: link\n            }))\n        }\n\n        // combine link array\n        const messageFiles = uploadedFiles.concat(insertedLinks);\n\n        // send first message\n        try {\n            await sendThreadMessage({ variables: { data: {\n                message: messageData.message,\n                files: messageFiles,\n                senderId: props.userId,\n                threadId: threadResult.data.createThread.refId\n            }}})\n\n            props.onCreateThread(threadResult.data.createThread.refId);\n        } catch (err) {\n            setFormError({ ...formError, general: (err as Error).message });\n            return\n        }\n\n    } catch (err) {\n        setFormError({ ...formError, general: (err as Error).message });\n        return\n    }\n  }\n\n  return (\n    <Paper>\n        <Stack spacing={3} sx={{ p: 2 }}>\n            <div>\n                <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\n                    <Button \n                        variant='contained' \n                        endIcon={<SendIcon />}\n                        onClick={handleCreateThread}\n                    >\n                        Send\n                    </Button>\n                    <Tooltip title='Discard'>\n                        <IconButton onClick={props.onDiscardThread}>\n                            <DeleteOutlinedIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Stack>\n                <Divider />\n            </div>\n        \n            <Stack direction='row' spacing={2}>\n                <Chip label='To' variant='outlined' sx={{ width: 80 }} />\n                <Autocomplete\n                    freeSolo\n                    fullWidth\n                    options={Object.keys(offices)}\n                    onChange={handleRecipientChange}\n                    renderInput={(params) => \n                        <TextField \n                            {...params} \n                            variant='standard' \n                            error={formError?.recipient !== undefined}\n                            helperText={formError && formError.recipient}\n                        />\n                    }\n                />\n            </Stack>\n        \n            <Stack direction='row' spacing={2}>\n                <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\n                <TextField \n                    name='subject'\n                    variant='standard'\n                    value={formData.subject}\n                    onChange={handleSubjectTextChange}\n                    fullWidth\n                    error={formError?.subject !== undefined}\n                    helperText={formError && formError.subject}\n                />\n            </Stack>\n            \n            <Stack direction='row' spacing={2}>\n                <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\n                <Autocomplete\n                    freeSolo\n                    fullWidth\n                    onChange={handleThreadTypeChange}\n                    options={Object.keys(types)}\n                    renderInput={(params) => \n                        <TextField \n                            {...params} \n                            variant='standard' \n                            error={formError?.type !== undefined}\n                            helperText={formError && formError.type}\n                        />\n                    }\n                />\n            </Stack>\n\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                <DatePicker \n                    label=\"Date Due\"\n                    views={[\"year\", \"month\", \"day\"]}\n                    value={dayjs(formData.dateDue)} \n                    onChange={handleDateDueChange} \n                    format=\"MMMM DD, YYYY\"\n                />\n            </LocalizationProvider>\n\n            <FormControlLabel \n                control={\n                    <Checkbox \n                        checked={formData.attachments} \n                        onChange={handleToggleAttachments} \n                    />\n                } \n                label=\"Attachments Required\" \n            />\n\n            <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\n\n            <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                    {formError && formError.general}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    </Paper>\n  )\n}","import React, { useState } from 'react';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Popover from '@mui/material/Popover';\n// icons\nimport FilterListIcon from '@mui/icons-material/FilterList';\n// api\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\nimport { DocumentTypes } from '../../api/threads/types';\n\n// ----------------------------------------------------------------------\n\nexport default function FilterPopover({ selected, onClick }: { selected: number, onClick: (id: number) => void }) {\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\n  const [open, setOpen] = useState<Element | null>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setOpen(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setOpen(null);\n  };\n\n  return (\n    <>\n      <IconButton\n        onClick={handleOpen}\n        sx={{\n          p: 0,\n          mx: 2,\n          ...(open && {\n            '&:before': {\n              zIndex: 1,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              borderRadius: '50%',\n              position: 'absolute',\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\n            },\n          }),\n        }}\n      >\n        <FilterListIcon />\n      </IconButton>\n\n      <Popover\n        open={Boolean(open)}\n        anchorEl={open}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        PaperProps={{\n          sx: {\n            p: 0,\n            mt: 1.5,\n            ml: 0.75,\n            width: 360,\n            '& .MuiMenuItem-root': {\n              typography: 'body2',\n              borderRadius: 0.75,\n            },\n          },\n        }}\n      >\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\n            <List\n                disablePadding\n                subheader={\n                    <ListSubheader disableSticky sx={{ py: 1, px: 2.5, typography: 'overline' }}>\n                        Thread Types\n                    </ListSubheader>\n                }\n            >\n                <ListItemButton onClick={() => onClick(-1)} selected={selected === -1}>\n                  All\n                </ListItemButton>\n                <Divider sx={{ borderStyle: 'dashed' }} />\n\n                {threadTypes && threadTypes.getAllThreadTypes.map(thread => (\n                  <React.Fragment key={thread.docId}>\n                    <ListItemButton onClick={() => onClick(thread.docId)} selected={selected === thread.docId}>\n                      {thread.docType}\n                    </ListItemButton>\n                    <Divider sx={{ borderStyle: 'dashed' }} />\n                  </React.Fragment>\n                ))}\n            </List>\n        </Box>\n      </Popover>\n    </>\n  );\n}","import React from 'react';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Divider from '@mui/material/Divider';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { useTheme } from '@mui/material/styles';\n// icons\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddIcon from '@mui/icons-material/Add';\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\n// project imports\nimport FilterPopover from './FilterPopover';\nimport { Thread } from '../../api/threads/types';\nimport { LoadOverlay } from '../../components/Loaders';\n\n\ninterface EmailListProps {\n  mode: string;\n  compose: boolean;\n  mails?: Thread[];\n  onRefresh: () => void;\n  onComposeThread: () => void;\n  onThreadClick: (threadId: string) => void;\n}\n\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\n  \"inbox\": {\n    title: \"Job Well Done!\",\n    sub: \"You have no active threads\"\n  },\n  \"sent\": {\n    title: \"Compose a thread\",\n    sub: \"You have no created threads\"\n  },\n  \"completed\": {\n    title: \"It's time to work!\",\n    sub: \"You have no finished threads\"\n  },\n  \"regionInbox\": {\n    title: \"Compose a thread\",\n    sub: \"No threads are created yet\"\n  }\n}\n\nconst formatInboxDate = (date: string | Date) => {\n  const target = new Date(date);\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function EmailList(props: EmailListProps) {\n  const theme = useTheme();\n  const [selectedType, setSelectedType] = React.useState<number>(-1);\n\n  return (\n    <React.Fragment>\n      <LoadOverlay open={props.mails === undefined} />\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\n        {props.mode !== \"completed\" && (\n          <Button \n            variant='contained' \n            endIcon={<AddIcon />} \n            disabled={props.compose}\n            onClick={props.onComposeThread}\n          >\n              Compose\n          </Button>\n        )}\n        \n        <IconButton onClick={props.onRefresh}>\n          <RefreshIcon />\n        </IconButton>\n        <FilterPopover selected={selectedType} onClick={id => setSelectedType(id)} />\n      </Stack>\n      \n      <Paper sx={{ width: '100%' }}>\n        <List \n          sx={{ \n            width: '100%', \n            maxHeight: 'calc(100vh - 170px)', \n            overflowY: 'auto',\n            \"::-webkit-scrollbar\": {\n              height: \"8px\",\n              width: \"8px\"\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n                background: theme.palette.grey[300] \n            },\n            \n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n                background: theme.palette.secondary.main\n            },\n            \n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n                background: theme.palette.primary.dark\n            }\n          }}>\n\n          {props.mails && props.mails.length === 0 && (\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\n              <Typography variant=\"subtitle1\">\n                  {emptyMessages[props.mode].title}\n              </Typography>\n              <Typography variant=\"body1\">\n                {emptyMessages[props.mode].sub}\n              </Typography>\n            </Box>\n          )}\n          \n          {props.mails && props.mails.filter(mail => mail.docType.docId === selectedType || selectedType === -1).map(msg => (\n            <React.Fragment key={msg.refId}>\n              <ListItemButton alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\n\n                <ListItemAvatar>\n                  <Avatar>\n                    {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={\n                    <Box>\n                        <Typography variant='body1' gutterBottom>\n                            {msg.subject}\n                        </Typography>\n                        <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\n                        <Typography variant='caption'>\n                          {` Due at ${formatInboxDate(msg.dateDue)}`}\n                        </Typography>\n                    </Box>\n                  } \n                  secondary={\n                    <React.Fragment>\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component=\"span\"\n                        variant=\"subtitle2\"\n                        color=\"text.primary\"\n                      >\n                        {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\n                      </Typography>\n                      {\" — \" + msg.docType.docType}\n                    </React.Fragment>\n                  }\n                />\n              </ListItemButton>\n              <Divider variant=\"inset\" component=\"li\" />\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n\ninterface LinkDialogProps {\n    open: boolean;\n    onClose: () => void;\n    onSubmit: (link: string) => void;\n}\n\nexport default function LinkDialog(props: LinkDialogProps) {\n  const [link, setLink] = React.useState<string>(\"\");\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    props.onSubmit(link);\n    setLink(\"\");\n  }\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\n        <form onSubmit={handleSubmit} >\n            <DialogTitle>Add Link</DialogTitle>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    name=\"link\"\n                    label=\"File Link\"\n                    type=\"url\"\n                    fullWidth\n                    value={link}\n                    onChange={(event) => setLink(event.target.value)}\n                    variant=\"standard\"\n                    sx={{ minWidth: 500 }}\n                    required\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button type='submit'>Add Link</Button>\n            </DialogActions>\n        </form>\n    </Dialog>\n  );\n}\n","import React from 'react'\n// mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport Chip from '@mui/material/Chip';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n// icons\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\nimport ReplyIcon from '@mui/icons-material/Reply';\n// project imports\nimport LinkDialog from './AddLinkDialog';\nimport { MessageFiles, Messages } from '../../api/threads/types';\n// api\nimport { useMutation } from '@apollo/client';\nimport axios from 'axios';\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\n\n\nexport interface MessageInput {\n    message: string;\n    files: File[];\n    links: string[];\n}\n\nexport interface MessageCreateInput {\n    message: string;\n    senderId: string;\n    threadId: string;\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\n}\n\ninterface ReplyBoxProps {\n    userId: string;\n    threadId?: string;\n    attached?: boolean;\n    onChange?: (data: MessageInput) => void;\n    onSubmit?: () => void;\n}\n\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [attachments, setAttachments] = React.useState<string[]>([]);\n  const [formData, setFormData] = React.useState<MessageInput>({\n    message: \"\",\n    files: [],\n    links: []\n  })\n  const [formError, setFormError] = React.useState<string>();\n\n  React.useEffect(() => {\n    const fileNames = formData.files.map(file => file.name);\n    setAttachments(fileNames.concat(formData.links))\n  }, [formData, onChange]);\n\n  React.useEffect(() => {\n    if (onChange) onChange(formData);\n  }, [formData, onChange])\n\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\n\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) \n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\n  }\n\n  const handleAddLink = (link: string) => {\n    setFormData({ ...formData, links: [ ...formData.links, link ] });\n    setOpen(false);\n  }\n\n  const handleDelete = (name: string) => {\n    const link = formData.links.find(l => l === name);\n    const file = formData.files.find(f => f.name === name);\n\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l !== name) });\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\n  }\n\n  const handleCloseSnackbar = () => setFormError(undefined);\n\n  const handleSendThreadMessage = async () => {\n    // validation\n    if (!threadId) return\n\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\n        setFormError(\"Attached file is required.\");\n        return\n    }\n\n    // create initial message\n    let uploadedFiles: MessageFiles[] = [];\n    let insertedLinks: MessageFiles[] = [];\n\n    // upload files if any\n    if (formData.files.length > 0) {\n        const form = new FormData();\n        formData.files.forEach((file) => {\n            form.append(\"files\", file);\n        })\n\n        try {\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\n            uploadedFiles = result.data.files;\n        } catch (err) {\n            setFormError((err as Error).message);\n            return\n        }\n    }\n\n    // arrange links if any\n    if (formData.links.length > 0) {\n        insertedLinks = formData.links.map(link => ({\n            fileName: link.split('/').pop() as string,\n            fileType: \"\",\n            fileUrl: link\n        }))\n    }\n\n    // combine link array\n    const messageFiles = uploadedFiles.concat(insertedLinks);\n\n    // send first message\n    try {\n        await sendThreadMessage({ variables: { data: {\n            message: formData.message,\n            files: messageFiles,\n            senderId: userId,\n            threadId: threadId\n        }}})\n\n        // reset form\n        setFormData({\n            message: \"\",\n            files: [],\n            links: []\n        })\n\n        if (onSubmit) onSubmit();\n    } catch (err) {\n        setFormError((err as Error).message);\n        return\n    }\n  }\n\n\n  return (\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\n        <TextField \n            name='message'\n            value={formData.message}\n            onChange={handleMessageTextChange}\n            multiline\n            rows={6}\n            fullWidth\n        />\n        <Stack \n            direction='row' \n            justifyContent='space-between' \n            alignItems='center' \n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\n        >\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n                <Tooltip title='Upload File'>\n                    <IconButton component=\"label\">\n                        <FileUploadIcon />\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title='Insert Link'>\n                    <IconButton onClick={() => setOpen(true)}>\n                        <InsertLinkIcon />\n                    </IconButton>\n                </Tooltip>\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\n                    {attachments.map(name => (\n                        <Chip\n                            key={name}\n                            label={name}\n                            sx={{ mx: 1 }}\n                            onDelete={() => handleDelete(name)}\n                        />\n                    ))}\n                </Box>\n            </Box>\n\n            {threadId && (\n                <Button \n                    variant='contained' \n                    size='large' \n                    endIcon={<ReplyIcon />}\n                    onClick={handleSendThreadMessage}\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\n                >\n                    Reply\n                </Button>\n            )}\n        </Stack>\n\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\n\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                {formError && formError}\n            </Alert>\n        </Snackbar>\n    </Box>\n  )\n}","import React from 'react';\nimport Card from '@mui/material/Card';\nimport Box from '@mui/material/Box';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n// types\nimport { Messages } from '../../api/threads/types';\n\n\nconst formatInboxDate = (date: string | Date) => {\n  const target = new Date(date);\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n}\n\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\n  if (sender) return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ backgroundColor: 'red' }}>\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\n          </Avatar>\n        }\n        title={content.sender.firstName + ' ' + content.sender.lastName}\n        subheader={content.sender.role.roleName}\n        action={\n          <Typography variant='body2'>\n            {formatInboxDate(content.dateSent)}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {content.message}\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\n          {content.files.map(file => (\n            <Chip \n              key={file.fileId} \n              label={file.fileName} \n              variant=\"outlined\" \n              component=\"a\" \n              href={file.fileUrl} \n              target='_blank' \n              clickable \n            />\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\n          </Avatar>\n        }\n        title={content.sender.firstName + ' ' + content.sender.lastName}\n        subheader={content.sender.role.roleName}\n        action={\n          <Typography variant='body2'>\n            {formatInboxDate(content.dateSent)}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          {content.message}\n        </Typography>\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\n            {content.files.map(file => (\n              <Chip \n                key={file.fileId} \n                label={file.fileName} \n                variant=\"outlined\" \n                component=\"a\" \n                href={file.fileUrl} \n                target='_blank' \n                clickable \n              />\n            ))}\n        </Stack>\n      </CardContent>\n    </Box>\n  );\n}\n","import {\n    Document,\n    Page,\n    View,\n    Text,\n    Font,\n    StyleSheet\n} from '@react-pdf/renderer';\nimport { Thread } from '../../api/threads/types';\nimport { Form2309Data } from '../../pages/threads/Form2309';\n\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n}\n\nFont.register({\n    family: 'Oswald',\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\n});\n\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \n    \n    return (\n        <Document>\n            <Page style={styles.body}>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.tableCol}>\n                            <Text style={styles.tableCellLeft}>BIR</Text>\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\n                        </View>\n                        <View style={styles.tableCol}>\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\n                            <Text style={styles.tableCellRight}>REFERENCE SLIP # 03-2020</Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\n                            <Text style={styles.tableCellLeft}>{details.recipient}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\n                        </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                    <View style={styles.purposeCol}>\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\n                    </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\n                            <Text style={styles.tableCellLeft}>{details.type}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\n                        </View>\n                    </View>\n                    <View style={styles.tableRow}>\n                        <View style={styles.purposeCol}>\n                            <Text style={styles.tableCellLeftBold}>OTHERS:</Text>\n                            <Text style={styles.tableCellLeft}>---</Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                    <View style={styles.purposeCol}>\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\n                    </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.recipientCol}>\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\n                            <Text style={styles.emptyCell}></Text>\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\n                        </View>\n                        <View style={styles.dateCol}>\n                            <Text style={styles.tableCellLeftBold}>Office Code: RR-6</Text>\n                        </View>\n                </View>\n                </View>\n                <View style={styles.table}>\n                    <View style={styles.tableRow}>\n                        <View style={styles.purposeCol}>\n                            <Text style={styles.tableCellLeftBold}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\n                        </View>\n                    </View>\n                </View>\n            </Page>\n        </Document>\n);\n}\n  \nconst styles = StyleSheet.create({\n    body: {\n      paddingTop: 35,\n      paddingBottom: 65,\n      paddingHorizontal: 35,\n    },\n    table: { \n      width: \"auto\", \n      borderStyle: \"solid\", \n      borderWidth: 1,\n      padding: 8\n    },\n    tableRow: { \n      margin: \"auto\", \n      marginTop: 2,\n      flexDirection: \"row\" \n    }, \n    tableCol: { \n      width: \"50%\"\n    },\n    recipientCol: { \n      width: \"70%\"\n    },\n    dateCol: { \n      width: \"30%\"\n    },\n    purposeCol: { \n      width: \"100%\"\n    },\n    tableCellLeft: { \n      margin: 2,\n      fontSize: 14,\n      textAlign: \"left\"\n    },\n    emptyCell: { \n      height: 30\n    },\n    tableCellLeftBold: { \n      margin: 2,\n      fontSize: 14,\n      textAlign: \"left\",\n      fontWeight: \"bold\"\n    },\n    tableCellRight: { \n      margin: 2,\n      fontSize: 14,\n      textAlign: \"right\"\n    },\n    tableCellCenter: { \n        margin: 2,\n        fontSize: 14,\n        textAlign: \"center\"\n    },\n    tableCellCenterSmall: { \n        margin: 2,\n        fontSize: 12,\n        textAlign: \"center\"\n    }\n});\n  ","import React from 'react';\nimport { Thread } from '../../api/threads/types';\n// mui\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n// renderer\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport Form2309 from '../../components/Form2309';\n\n\nexport interface Form2309Data {\n    recipient: string;\n    dateCreated: string;\n    subject: string;\n    type: string;\n    deadline: string;\n    remarks: string;\n}\n\nexport default function EditForm2309({ thread }: { thread: Thread }) {\n    const [formData, setFormData] = React.useState<Form2309Data>({\n        recipient: '',\n        dateCreated: '',\n        subject: '',\n        deadline: '',\n        remarks: '',\n        type: ''\n    })\n\n    React.useEffect(() => {\n        setFormData(state => ({\n            ...state,\n            recipient: thread.recipient.sectionOffice.officeName,\n            subject: thread.subject,\n            type: thread.docType.docType,\n            remarks: thread.messages[0].message\n        }))\n    }, [thread])\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({ ...formData, [event.target.name]: event.target.value })\n    }\n\n    return (\n        <Stack spacing={3} sx={{ p: 2 }}>\n            <TextField\n                name='recipient'\n                label='Recipient'\n                value={formData.recipient}\n                onChange={handleTextChange}\n            />\n\n            <TextField\n                name='subject'\n                label='Subject'\n                value={formData.subject}\n                onChange={handleTextChange}\n            />\n\n            <TextField\n                name='type'\n                label='Type'\n                value={formData.type}\n                onChange={handleTextChange}\n            />\n\n            <TextField\n                name='remarks'\n                label='Remarks'\n                value={formData.remarks}\n                onChange={handleTextChange}\n            />\n\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\n                {({ blob, url, loading, error }) => (\n                     <Button \n                        fullWidth \n                        component='a'\n                        href={url as string}\n                        target='_blank'\n                        variant='contained'>\n                            Generate Form 2309\n                    </Button>\n                )}\n            </PDFDownloadLink>\n        </Stack>\n    );\n}","import React from 'react';\n// mui\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Alert from '@mui/material/Alert';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport { useTheme } from '@mui/material/styles';\n// icons\nimport TuneIcon from '@mui/icons-material/Tune';\nimport CloseIcon from '@mui/icons-material/Close';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n// project imports\nimport { LoadOverlay } from '../../components/Loaders';\nimport MessageCard from './MessageCard';\nimport Form2309 from './Form2309';\nimport ReplyBox from './ReplyBox';\nimport { DocumentStatus, Thread } from '../../api/threads/types';\n// api\nimport { useQuery, useMutation } from '@apollo/client';\nimport { \n    GET_ALL_THREAD_STATUS, \n    GET_THREAD_BY_ID, \n    SET_MESSAGE_AS_READ, \n    UPDATE_THREAD_STATUS\n} from '../../api/threads';\n\ninterface TabPaneProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nexport function TabPanel(props: TabPaneProps) {\n    return (\n        <div>\n            {props.value === props.index && props.children}\n        </div>\n    )\n}\n\nconst formatInboxDate = (date: string | Date) => {\n    const target = new Date(date);\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\n  }\n\ninterface ThreadListProps {\n    userId: string;\n    threadId: string;\n}\n\nexport default function ThreadList({ userId, threadId }: ThreadListProps) {\n  const theme = useTheme();\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\n    variables: { uid: threadId }\n  });\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\n\n  const [tabValue, setTableValue] = React.useState<number>(0);\n  const [expanded, setExpanded] = React.useState<boolean>(false);\n  const [statusId, setStatusId] = React.useState<number>(2);\n  const [attach, setAttach] = React.useState<string>('true');\n  const [completed, setCompleted] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (threadData) {\n        setStatusId(threadData.getThreadById.status.statusId);\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\n        setCompleted(threadData.getThreadById.completed);\n    }\n  }, [threadData])\n\n  React.useEffect(() => {\n    if (threadData) {\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\n            setMessageAsRead({\n                variables: {\n                    threadId: threadData.getThreadById.refId,\n                    userId: user.sender.accountId\n                }\n            })\n        })\n    }\n  }, [threadData, userId, setMessageAsRead])\n\n  React.useEffect(() => {\n    refetch({ uid: threadId });\n  }, [threadId, refetch])\n\n  const handleExpand = () => setExpanded(!expanded);\n\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    await updateThreadStatus({ variables: {\n        uid: threadId,\n        attachments: attach === 'true' ? true : false,\n        statusId: parseInt(event.target.value)\n    }})\n\n    // check if completed\n    const completedId = [1, 3];\n    setCompleted(completedId.includes(parseInt(event.target.value)));\n\n    setStatusId(parseInt(event.target.value));\n    refetch({ uid: threadId });\n  }\n\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    await updateThreadStatus({ variables: {\n        uid: threadId,\n        attachments: event.target.value === 'true' ? true : false,\n        statusId\n    }})\n\n    setAttach(event.target.value);\n  }\n\n  const reloadThread = () => refetch({ uid: threadId });\n\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\n\n  const { subject, author, docType, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments } = threadData.getThreadById;\n\n  return (\n    <Paper sx={{ width: '100%' }}>\n        <Box \n            sx={{ \n                width: '100%', \n                maxHeight: 'calc(100vh - 105px)', \n                overflowY: 'auto',\n                overflowX: 'hidden',\n                \"::-webkit-scrollbar\": {\n                    height: \"8px\",\n                    width: \"8px\"\n                },\n\n                /* Track */\n                \"::-webkit-scrollbar-track\": {\n                    background: theme.palette.grey[300] \n                },\n                \n                /* Handle */\n                \"::-webkit-scrollbar-thumb\": {\n                    background: theme.palette.secondary.main\n                },\n                \n                /* Handle on hover */\n                \"::-webkit-scrollbar-thumb:hover\": {\n                    background: theme.palette.primary.dark\n                }\n            }}\n        >\n            <Box sx={{ width: '100%', p: 2 }}>\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\n                        {docType.docType}\n                    </Typography>\n        \n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\n                        {userId === threadData.getThreadById.author.accountId && (\n                            <IconButton onClick={handleExpand}>\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\n                            </IconButton>\n                        )}\n                         <IconButton onClick={reloadThread}>\n                            <RefreshIcon />\n                        </IconButton>\n                    </Box>\n                </Stack>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\n                        <TextField\n                            name='status'\n                            label='Status'\n                            select\n                            sx={{ width: 200 }}\n                            value={statusId}\n                            onChange={handleStatusChange}\n                        >\n                            {threadStatus.getAllThreadStatus.map(status => (\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\n                            ))}\n                        \n                        </TextField>\n                        <TextField\n                            name='attachments'\n                            label='Attachments'\n                            select\n                            sx={{ width: 200 }}\n                            value={attach}\n                            onChange={handleAttachmentChange}\n                        >\n                            <MenuItem value='true'>Required</MenuItem>\n                            <MenuItem value='false'>Not Required</MenuItem> \n                        </TextField>\n                    </Stack>\n                </Collapse>\n                <Divider sx={{ mb: 1 }} />\n                <Alert severity={completed ? \"success\" : \"info\"}>\n                    {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\n                </Alert>\n            </Box>\n\n            <Box sx={{ px: 2 }}>\n                <Typography variant='body1' color='secondary'>\n                    {author.firstName + ' ' + author.lastName} \n                    <span style={{ color: 'black' }}>{' to '}</span> \n                    {`${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\n                </Typography>\n                <Typography variant='h4'>\n                    {subject}\n                </Typography>\n            </Box>\n\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\n                <Tab label=\"Conversation\" />\n                <Tab label=\"History\" />\n                <Tab label=\"Files\" />\n                <Tab label=\"Form 2309\" />\n            </Tabs>\n           \n            <TabPanel index={0} value={tabValue}>\n                <Box sx={{ p: 2 }}>\n                    {messages.map(msg => (\n                        <Box \n                            key={msg.msgId} \n                            sx={{ \n                                my: 2, \n                                pl: msg.sender.accountId === userId ? 8 : 0,\n                                pr: msg.sender.accountId !== userId ? 8 : 0\n                            }}\n                        >\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\n                        </Box>\n                    ))}\n                </Box>\n\n                <Box sx={{ p: 2 }}>\n                    {!completed && (\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\n                    )}\n                </Box>\n            </TabPanel>\n\n            <TabPanel index={1} value={tabValue}>\n                History\n            </TabPanel>\n\n            <TabPanel index={2} value={tabValue}>\n                Files\n            </TabPanel>\n\n            <TabPanel index={3} value={tabValue}>\n                <Form2309 thread={threadData.getThreadById} />\n            </TabPanel>\n        </Box>\n    </Paper>\n  )\n}"],"names":["CreateThread","props","officeSections","useQuery","GET_BIR_OFFICES","data","threadTypes","GET_ALL_THREAD_TYPES","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","subject","authorId","userId","statusId","attachments","completed","dateDue","Date","toISOString","_React$useState6","formData","setFormData","_React$useState7","message","files","links","_React$useState8","messageData","setMessageData","_React$useState9","_React$useState10","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","sectionId","typesObject","getAllThreadTypes","type","docType","docId","_jsx","LoadOverlay","open","handleCloseSnackbar","_objectSpread","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","wrap","_context","prev","next","recipientId","recipient","abrupt","docTypeId","length","variables","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","split","pop","fileType","fileUrl","concat","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","children","_jsxs","Stack","spacing","sx","p","direction","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Divider","Chip","label","width","Autocomplete","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","renderInput","params","TextField","error","helperText","name","value","event","target","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","selected","_useState","useState","_useState2","setOpen","_Fragment","currentTarget","mx","zIndex","content","height","borderRadius","position","bgcolor","theme","alpha","palette","grey","FilterListIcon","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","mt","ml","typography","Box","maxHeight","overflowY","List","disablePadding","subheader","ListSubheader","disableSticky","px","ListItemButton","borderStyle","thread","emptyMessages","sub","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","useTheme","selectedType","setSelectedType","mails","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","id","background","secondary","main","primary","dark","display","justifyContent","flexDirection","FolderCopyIcon","color","fontSize","Typography","filter","mail","msg","onThreadClick","ListItemAvatar","Avatar","author","firstName","charAt","lastName","ListItemText","gutterBottom","status","statusLabel","size","component","LinkDialog","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","minWidth","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","overflowX","onDelete","find","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","role","roleName","action","dateSent","CardContent","href","clickable","fileId","border","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableCol","Text","tableCellLeft","tableCellRight","recipientCol","tableCellLeftBold","dateCol","dateCreated","purposeCol","remarks","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","Font","register","family","src","StyleSheet","create","paddingTop","paddingBottom","paddingHorizontal","borderWidth","padding","marginTop","textAlign","fontWeight","EditForm2309","deadline","state","messages","handleTextChange","_defineProperty","PDFDownloadLink","document","blob","url","loading","TabPanel","index","ThreadList","_useQuery","GET_THREAD_BY_ID","uid","threadData","refetch","threadStatus","GET_ALL_THREAD_STATUS","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","getThreadById","accountId","user","handleStatusChange","parseInt","includes","_x","handleAttachmentChange","_ref3","_callee2","_context2","_x2","reloadThread","_threadData$getThread","dateUpdated","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","select","getAllThreadStatus","MenuItem","Tabs","e","Tab","pl","pr","msgId"],"sourceRoot":""}