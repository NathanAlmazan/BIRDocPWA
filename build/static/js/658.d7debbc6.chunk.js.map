{"version":3,"file":"static/js/658.d7debbc6.chunk.js","mappings":"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","sources":["pages/dashboard/StatusReportBar.tsx","pages/dashboard/PurposeReportBar.tsx","pages/dashboard/TypesReportDonut.tsx","pages/dashboard/UserTasks.tsx","pages/dashboard/index.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Stack from '@mui/material/Stack';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport Chart from 'react-apexcharts';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_DOCUMENT_TYPE_ANALYTICS } from '../../api/offices';\r\nimport { DocumentStatus, DocumentTypes, Analytics } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { chartColors } from '.';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nfunction getWeekBeforeDate() {\r\n    const current = new Date();\r\n    current.setDate(current.getDate() - 30);\r\n\r\n    return current;\r\n}\r\n\r\nexport default function StatusReportBar({ officeId }: { officeId: number }) {\r\n    const theme = useTheme();\r\n    const { role } = useAppSelector((state) => state.auth);\r\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\r\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\r\n    const { data: analytics, refetch } = useQuery<{ getThreadTypeAnalytics: Analytics[] }>(GET_DOCUMENT_TYPE_ANALYTICS, {\r\n        variables: {\r\n            officeId: officeId,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            superuser: role ? role.superuser : null\r\n        }\r\n    });\r\n    const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<any>();\r\n    const [chartSeries, setChartSeries] = React.useState<{\r\n        name: string;\r\n        data: number[];\r\n    }[]>([])\r\n\r\n    React.useEffect(() => {\r\n        if (analytics && threadTypes && threadStatus) {\r\n            const { primary } = theme.palette.text;\r\n            const grey200 = theme.palette.grey[200];\r\n            const grey500 = theme.palette.grey[500];\r\n\r\n            setChartOptions({\r\n                chart: {\r\n                    id: 'bar-chart',\r\n                    stacked: true,\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                colors: chartColors,\r\n                responsive: [\r\n                    {\r\n                        breakpoint: 500,\r\n                        options: {\r\n                            legend: {\r\n                                position: 'bottom',\r\n                                offsetX: -10,\r\n                                offsetY: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                xaxis: {\r\n                    type: 'category',\r\n                    categories: threadTypes.getAllThreadTypes.map(type => type.docType),\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\r\n                            fontSize: '8px'\r\n                        }\r\n                    }\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: grey200,\r\n                    show: true\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '50%'\r\n                    }\r\n                },\r\n                legend: {\r\n                    show: true,\r\n                    position: 'top',\r\n                    fontSize: '14px',\r\n                    fontFamily: `'Roboto', sans-serif`,\r\n                    offsetX: 20,\r\n                    labels: {\r\n                        useSeriesColors: false,\r\n                        colors: grey500\r\n                    },\r\n                    markers: {\r\n                        width: 16,\r\n                        height: 16,\r\n                        radius: 5\r\n                    },\r\n                    itemMargin: {\r\n                        horizontal: 15,\r\n                        vertical: 8\r\n                    },\r\n                },\r\n                fill: {\r\n                    type: 'solid'\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                }\r\n            })\r\n\r\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n            //     name: status.statusLabel,\r\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\r\n            // })))\r\n\r\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n                name: status.statusLabel,\r\n                data: threadTypes.getAllThreadTypes.map(type => {\r\n                    const data = analytics.getThreadTypeAnalytics.filter(s => s.status.statusId === status.statusId && s.docType.docId === type.docId);\r\n\r\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\r\n                    return 0;\r\n                })\r\n            })))\r\n        }\r\n    }, [analytics, threadTypes, threadStatus, theme]);\r\n\r\n    const handleStartDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setStartDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: date.toISOString(),\r\n                endDate: endDate\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleEndDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setEndDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: startDate,\r\n                endDate: date.toISOString()\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader \r\n                title={\r\n                    <Box>\r\n                        <Typography variant='h6'>\r\n                            Document Types Tracker\r\n                        </Typography>\r\n                    </Box>\r\n                }\r\n                action={\r\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <Stack direction='row' spacing={1}>\r\n                                <DatePicker \r\n                                    label=\"Report Start Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(startDate)} \r\n                                    onChange={handleStartDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                                <DatePicker \r\n                                    label=\"Report End Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(endDate)} \r\n                                    onChange={handleEndDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                        </Stack>\r\n                    </LocalizationProvider>\r\n                }\r\n            />\r\n            <CardContent>\r\n                {chartOptions && (\r\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n// mui\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Stack from '@mui/material/Stack';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport Chart from 'react-apexcharts';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_DOCUMENT_PURPOSE_ANALYTICS } from '../../api/offices';\r\nimport { DocumentStatus, Analytics, DocumentPurpose } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_PURPOSE } from '../../api/threads';\r\nimport { chartColors } from '.';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nfunction getWeekBeforeDate() {\r\n    const current = new Date();\r\n    current.setDate(current.getDate() - 30);\r\n\r\n    return current;\r\n}\r\n\r\nexport default function PurposeReportBar({ officeId }: { officeId: number }) {\r\n    const theme = useTheme();\r\n    const { role } = useAppSelector((state) => state.auth);\r\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\r\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\r\n    const { data: analytics, refetch } = useQuery<{ getThreadPurposeAnalytics: Analytics[] }>(GET_DOCUMENT_PURPOSE_ANALYTICS, {\r\n        variables: {\r\n            officeId: officeId,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            superuser: role ? role.superuser : null\r\n        }\r\n    });\r\n    const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<any>();\r\n    const [chartSeries, setChartSeries] = React.useState<{\r\n        name: string;\r\n        data: number[];\r\n    }[]>([])\r\n\r\n    console.log(analytics);\r\n\r\n    React.useEffect(() => {\r\n        if (analytics && threadPurposes && threadStatus) {\r\n            const { primary } = theme.palette.text;\r\n            const grey200 = theme.palette.grey[200];\r\n            const grey500 = theme.palette.grey[500];\r\n\r\n            setChartOptions({\r\n                chart: {\r\n                    id: 'bar-chart',\r\n                    stacked: true,\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                colors: chartColors,\r\n                responsive: [\r\n                    {\r\n                        breakpoint: 500,\r\n                        options: {\r\n                            legend: {\r\n                                position: 'bottom',\r\n                                offsetX: -10,\r\n                                offsetY: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                xaxis: {\r\n                    type: 'category',\r\n                    categories: threadPurposes.getAllThreadPurpose.map(purpose => purpose.purposeName),\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\r\n                            fontSize: '8px'\r\n                        }\r\n                    }\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: grey200,\r\n                    show: true\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '50%'\r\n                    }\r\n                },\r\n                legend: {\r\n                    show: true,\r\n                    position: 'top',\r\n                    fontSize: '14px',\r\n                    fontFamily: `'Roboto', sans-serif`,\r\n                    offsetX: 20,\r\n                    labels: {\r\n                        useSeriesColors: false,\r\n                        colors: grey500\r\n                    },\r\n                    markers: {\r\n                        width: 16,\r\n                        height: 16,\r\n                        radius: 5\r\n                    },\r\n                    itemMargin: {\r\n                        horizontal: 15,\r\n                        vertical: 8\r\n                    },\r\n                },\r\n                fill: {\r\n                    type: 'solid'\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                }\r\n            })\r\n\r\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n            //     name: status.statusLabel,\r\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\r\n            // })))\r\n\r\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n                name: status.statusLabel,\r\n                data: threadPurposes.getAllThreadPurpose.map(purpose => {\r\n                    const data = analytics.getThreadPurposeAnalytics.filter(s => s.status.statusId === status.statusId && s.purpose.purposeId === purpose.purposeId);\r\n\r\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\r\n                    return 0;\r\n                })\r\n            })))\r\n        }\r\n    }, [analytics, threadPurposes, threadStatus, theme]);\r\n\r\n    const handleStartDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setStartDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: date.toISOString(),\r\n                endDate: endDate\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleEndDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setEndDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: startDate,\r\n                endDate: date.toISOString()\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader \r\n                title={\r\n                    <Box>\r\n                        <Typography variant='h6'>\r\n                            Document Purpose Tracker\r\n                        </Typography>\r\n                    </Box>\r\n                }\r\n                action={\r\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <Stack direction='row' spacing={1}>\r\n                                <DatePicker \r\n                                    label=\"Report Start Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(startDate)} \r\n                                    onChange={handleStartDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                                <DatePicker \r\n                                    label=\"Report End Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(endDate)} \r\n                                    onChange={handleEndDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                        </Stack>\r\n                    </LocalizationProvider>\r\n                }\r\n            />\r\n            <CardContent>\r\n                {chartOptions && (\r\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport merge from 'lodash/merge';\r\n// @mui\r\nimport { useTheme, styled, alpha } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Card, CardHeader } from '@mui/material';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { Analytics, DocumentTypes } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { GET_DOCUMENT_STATUS_ANALYTICS } from '../../api/offices';\r\nimport { chartColors } from '.';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst CHART_HEIGHT = 350;\r\nconst LEGEND_HEIGHT = 72;\r\n\r\nconst StyledChartWrapper = styled('div')(({ theme }) => ({\r\n  height: CHART_HEIGHT,\r\n  marginTop: theme.spacing(5),\r\n  '& .apexcharts-canvas svg': { height: CHART_HEIGHT },\r\n  '& .apexcharts-canvas svg,.apexcharts-canvas foreignObject': {\r\n    overflow: 'visible',\r\n  },\r\n  '& .apexcharts-legend': {\r\n    height: LEGEND_HEIGHT,\r\n    alignContent: 'center',\r\n    position: 'relative !important',\r\n    borderTop: `solid 1px ${theme.palette.divider}`,\r\n    top: `calc(${CHART_HEIGHT - LEGEND_HEIGHT}px) !important`,\r\n  },\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface TypesReportDonutProps {\r\n    officeId: number;\r\n    completed: boolean;\r\n}\r\n\r\nexport default function TypesReportDonut({ officeId, completed }: TypesReportDonutProps) {\r\n  const theme = useTheme();\r\n  const { role } = useAppSelector((state) => state.auth);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: analytics } = useQuery<{ getStatusAnalytics: Analytics[] }>(GET_DOCUMENT_STATUS_ANALYTICS, {\r\n    variables: {\r\n      officeId: officeId,\r\n      completed: completed,\r\n      superuser: role ? role.superuser : null\r\n    }\r\n  });\r\n  const [chartValues, setChartValues] = React.useState<number[]>([]);\r\n\r\n  const chartOptions = useChart({\r\n    colors: chartColors,\r\n    labels: threadTypes ? threadTypes.getAllThreadTypes.map(type => type.docType) : [],\r\n    stroke: { colors: [theme.palette.background.paper] },\r\n    legend: { floating: true, horizontalAlign: 'center' },\r\n    dataLabels: { enabled: false, dropShadow: { enabled: false } },\r\n    tooltip: {\r\n      fillSeriesColor: false,\r\n      y: {\r\n        formatter: (seriesName: number) => seriesName.toFixed(2),\r\n        title: {\r\n          formatter: (seriesName: string) => `${seriesName}`,\r\n        },\r\n      },\r\n    }\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (analytics && threadTypes) {\r\n      // setChartValues([35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]);\r\n      setChartValues(threadTypes.getAllThreadTypes.map(type => {\r\n        const data = analytics.getStatusAnalytics.filter(d => d.docType.docId === type.docId);\r\n\r\n        if (data.length > 0) return data.reduce((sum, a) => sum + a.count, 0);\r\n        return 0;\r\n      }))\r\n    }\r\n  }, [analytics, threadTypes])\r\n\r\n  return (\r\n    <Card sx={{ height: '100%' }}>\r\n      <CardHeader title={\r\n          <Typography variant='h6'>\r\n            {completed ? \"Completed Documents\" : \"Pending Documents\"}\r\n          </Typography>\r\n        } \r\n      />\r\n\r\n      <StyledChartWrapper dir=\"ltr\">\r\n        <ReactApexChart type=\"donut\" series={chartValues} options={chartOptions} height={380} />\r\n      </StyledChartWrapper>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function useChart(options: any) {\r\n  const theme = useTheme();\r\n\r\n  const LABEL_TOTAL = {\r\n    show: true,\r\n    label: 'Total',\r\n    color: theme.palette.text.secondary,\r\n    fontSize: theme.typography.subtitle2.fontSize,\r\n    fontWeight: theme.typography.subtitle2.fontWeight,\r\n    lineHeight: theme.typography.subtitle2.lineHeight,\r\n  };\r\n\r\n  const LABEL_VALUE = {\r\n    offsetY: 8,\r\n    color: theme.palette.text.primary,\r\n    fontSize: theme.typography.h3.fontSize,\r\n    fontWeight: theme.typography.h3.fontWeight,\r\n    lineHeight: theme.typography.h3.lineHeight,\r\n  };\r\n\r\n  const baseOptions = {\r\n    // Colors\r\n    colors: [\r\n      theme.palette.primary.main,\r\n      theme.palette.warning.main,\r\n      theme.palette.info.main,\r\n      theme.palette.error.main,\r\n      theme.palette.success.main,\r\n      theme.palette.warning.dark,\r\n      theme.palette.success.main,\r\n      theme.palette.info.dark,\r\n      theme.palette.info.light,\r\n    ],\r\n\r\n    // Chart\r\n    chart: {\r\n      toolbar: { show: false },\r\n      zoom: { enabled: false },\r\n      // animations: { enabled: false },\r\n      foreColor: theme.palette.text.disabled,\r\n      fontFamily: theme.typography.fontFamily,\r\n    },\r\n\r\n    // States\r\n    states: {\r\n      hover: {\r\n        filter: {\r\n          type: 'lighten',\r\n          value: 0.04,\r\n        },\r\n      },\r\n      active: {\r\n        filter: {\r\n          type: 'darken',\r\n          value: 0.88,\r\n        },\r\n      },\r\n    },\r\n\r\n    // Fill\r\n    fill: {\r\n      opacity: 1,\r\n      gradient: {\r\n        type: 'vertical',\r\n        shadeIntensity: 0,\r\n        opacityFrom: 0.4,\r\n        opacityTo: 0,\r\n        stops: [0, 100],\r\n      },\r\n    },\r\n\r\n    // Datalabels\r\n    dataLabels: { enabled: false },\r\n\r\n    // Stroke\r\n    stroke: {\r\n      width: 3,\r\n      curve: 'smooth',\r\n      lineCap: 'round',\r\n    },\r\n\r\n    // Grid\r\n    grid: {\r\n      strokeDashArray: 3,\r\n      borderColor: theme.palette.divider,\r\n      xaxis: {\r\n        lines: {\r\n          show: false,\r\n        },\r\n      },\r\n    },\r\n\r\n    // Xaxis\r\n    xaxis: {\r\n      axisBorder: { show: false },\r\n      axisTicks: { show: false },\r\n    },\r\n\r\n    // Markers\r\n    markers: {\r\n      size: 0,\r\n      strokeColors: theme.palette.background.paper,\r\n    },\r\n\r\n    // Tooltip\r\n    tooltip: {\r\n      x: {\r\n        show: false,\r\n      },\r\n    },\r\n\r\n    // Legend\r\n    legend: {\r\n      show: false\r\n    },\r\n\r\n    // plotOptions\r\n    plotOptions: {\r\n      // Bar\r\n      bar: {\r\n        borderRadius: 4,\r\n        columnWidth: '28%',\r\n        borderRadiusApplication: 'end',\r\n        borderRadiusWhenStacked: 'last',\r\n      },\r\n\r\n      // Pie + Donut\r\n      pie: {\r\n        donut: {\r\n          labels: {\r\n            show: true,\r\n            value: LABEL_VALUE,\r\n            total: LABEL_TOTAL,\r\n          },\r\n        },\r\n      },\r\n\r\n      // Radialbar\r\n      radialBar: {\r\n        track: {\r\n          strokeWidth: '100%',\r\n          background: alpha(theme.palette.grey[500], 0.16),\r\n        },\r\n        dataLabels: {\r\n          value: LABEL_VALUE,\r\n          total: LABEL_TOTAL,\r\n        },\r\n      },\r\n\r\n      // Radar\r\n      radar: {\r\n        polygons: {\r\n          fill: { colors: ['transparent'] },\r\n          strokeColors: theme.palette.divider,\r\n          connectorColors: theme.palette.divider,\r\n        },\r\n      },\r\n\r\n      // polarArea\r\n      polarArea: {\r\n        rings: {\r\n          strokeColor: theme.palette.divider,\r\n        },\r\n        spokes: {\r\n          connectorColors: theme.palette.divider,\r\n        },\r\n      },\r\n    },\r\n\r\n    // Responsive\r\n    responsive: [\r\n      {\r\n        // sm\r\n        breakpoint: theme.breakpoints.values.sm,\r\n        options: {\r\n          plotOptions: { bar: { columnWidth: '40%' } },\r\n        },\r\n      },\r\n      {\r\n        // md\r\n        breakpoint: theme.breakpoints.values.md,\r\n        options: {\r\n          plotOptions: { bar: { columnWidth: '32%' } },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return merge(baseOptions, options);\r\n}","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport Card from '@mui/material/Card';\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from '@mui/material/Typography';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { Thread } from '../../api/threads/types';\r\n// icons\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport TaskAltIcon from '@mui/icons-material/TaskAlt';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_THREAD_INBOX } from '../../api/threads';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface UserTasksProps {\r\n    userId: string;\r\n}\r\n\r\nexport default function UserTasks({ userId }: UserTasksProps) {\r\n    const navigate = useNavigate();\r\n    const { data: tasks } = useQuery<{ getThreadInbox: Thread[] }>(GET_THREAD_INBOX, {\r\n        variables: {\r\n          userId: userId,\r\n          type: \"pending\"\r\n        }\r\n    });\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title='To-Do-List' />\r\n\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            {tasks?.getThreadInbox.length === 0 && (\r\n                 <Box sx={{ display: 'flex', height: 280, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                    <TaskAltIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n                    <Typography variant=\"subtitle1\">\r\n                        Job Well Done!\r\n                    </Typography>\r\n                    <Typography variant=\"body1\">\r\n                        You have no recurring tasks\r\n                    </Typography>\r\n                </Box>\r\n            )}\r\n            <Stack spacing={3} sx={{ p: 3, pr: 0 }}>\r\n                {tasks?.getThreadInbox.map((task) => (\r\n                    <TaskItem key={task.refId} task={task} />\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n\r\n        <Divider />\r\n\r\n        <Box sx={{ p: 2, textAlign: 'right' }}>\r\n            <Button size=\"small\" color=\"inherit\" endIcon={<ArrowForwardIosIcon />} onClick={() => navigate('/app/inbox')}>\r\n                View all\r\n            </Button>\r\n        </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface NewsItemProps {\r\n    task: Thread\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nfunction TaskItem({ task }: NewsItemProps) {\r\n  const { subject, author, docType, dateUpdated } = task;\r\n\r\n  return (\r\n    <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Avatar sx={{ width: 48, height: 48 }}>\r\n            {`${author.firstName.charAt(0)}${author.lastName.charAt(0)}`}\r\n        </Avatar>\r\n\r\n        <Box sx={{ minWidth: 240, flexGrow: 1 }}>\r\n            <Typography color=\"inherit\" variant=\"subtitle2\" noWrap>\r\n                {subject}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\r\n                {`${author.firstName} ${author.lastName} — ${docType.docType}`}\r\n            </Typography>\r\n        </Box>\r\n\r\n            <Typography variant=\"caption\" sx={{ pr: 3, flexShrink: 0, color: 'text.secondary' }}>\r\n                {`Updated at ${formatInboxDate(dateUpdated)}`}\r\n            </Typography>\r\n    </Stack>\r\n  );\r\n}","import React from 'react';\r\n// mui\r\nimport Grid from '@mui/material/Grid';\r\n// project imports\r\nimport StatusReportBar from './StatusReportBar';\r\nimport PurposeReportBar from './PurposeReportBar';\r\nimport TypesReportDonut from './TypesReportDonut';\r\nimport UserTasks from './UserTasks';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nexport default function DashboardPage() {\r\n    const { uid, office } = useAppSelector((state) => state.auth);\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ maxHeight: 'calc(100vh - 80px)', overflowY: 'auto', pb: 2, px: 2 }}>\r\n            <Grid item md={12} lg={8}>\r\n                <StatusReportBar officeId={office?.sectionId as number} />\r\n            </Grid>\r\n            <Grid item md={6} lg={4}>\r\n                <TypesReportDonut\r\n                    officeId={office?.sectionId as number}\r\n                    completed={true}\r\n                />\r\n            </Grid>\r\n            <Grid item md={12} lg={8}>\r\n                <PurposeReportBar officeId={office?.sectionId as number} />\r\n            </Grid>\r\n            <Grid item md={6} lg={4}>\r\n                <TypesReportDonut\r\n                    officeId={office?.sectionId as number}\r\n                    completed={false}\r\n                />\r\n            </Grid>\r\n            <Grid item md={12} lg={8}>\r\n                <UserTasks userId={uid as string} />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport const chartColors = ['#9288F8', '#FFD2D7', '#461959', '#7A316F', '#CD6688', '#AED8CC', '#9A208C', '#E11299', '#35155D', '#512B81', '#4477CE', '#8CABFF', '#6F61C0', '#A084E8', '#8BE8E5', '#D5FFE4', '#4682A9', '#749BC2', '#91C8E4', '#F6F4EB', '#FFE7A0', '#322653', '#8062D6', '#FFEAEA', '#F5C6EC'];"],"names":["StatusReportBar","_ref","officeId","theme","useTheme","role","useAppSelector","state","auth","_React$useState","React","current","Date","setDate","getDate","getWeekBeforeDate","toISOString","_React$useState2","_slicedToArray","startDate","setStartDate","_React$useState3","_React$useState4","endDate","setEndDate","_useQuery","useQuery","GET_DOCUMENT_TYPE_ANALYTICS","variables","superuser","analytics","data","refetch","threadTypes","GET_ALL_THREAD_TYPES","threadStatus","GET_ALL_THREAD_STATUS","_React$useState5","_React$useState6","chartOptions","setChartOptions","_React$useState7","_React$useState8","chartSeries","setChartSeries","primary","palette","text","grey200","grey","grey500","chart","id","stacked","toolbar","show","zoom","enabled","colors","chartColors","responsive","breakpoint","options","legend","position","offsetX","offsetY","xaxis","type","categories","getAllThreadTypes","map","docType","labels","style","fontSize","yaxis","grid","borderColor","tooltip","plotOptions","bar","horizontal","columnWidth","fontFamily","useSeriesColors","markers","width","height","radius","itemMargin","vertical","fill","dataLabels","getAllThreadStatus","status","name","statusLabel","getThreadTypeAnalytics","filter","s","statusId","docId","length","reduce","sum","d","count","_jsxs","Card","children","_jsx","CardHeader","title","Box","Typography","variant","action","LocalizationProvider","dateAdapter","AdapterDayjs","Stack","direction","spacing","DatePicker","label","views","value","dayjs","onChange","date","format","CardContent","Chart","series","PurposeReportBar","GET_DOCUMENT_PURPOSE_ANALYTICS","threadPurposes","GET_ALL_THREAD_PURPOSE","console","log","getAllThreadPurpose","purpose","purposeName","getThreadPurposeAnalytics","purposeId","StyledChartWrapper","styled","marginTop","overflow","alignContent","borderTop","concat","divider","top","CHART_HEIGHT","TypesReportDonut","_ref2","completed","GET_DOCUMENT_STATUS_ANALYTICS","chartValues","setChartValues","LABEL_TOTAL","color","secondary","typography","subtitle2","fontWeight","lineHeight","LABEL_VALUE","h3","baseOptions","main","warning","info","error","success","dark","light","foreColor","disabled","states","hover","active","opacity","gradient","shadeIntensity","opacityFrom","opacityTo","stops","stroke","curve","lineCap","strokeDashArray","lines","axisBorder","axisTicks","size","strokeColors","background","paper","x","borderRadius","borderRadiusApplication","borderRadiusWhenStacked","pie","donut","total","radialBar","track","strokeWidth","alpha","radar","polygons","connectorColors","polarArea","rings","strokeColor","spokes","breakpoints","values","sm","md","merge","useChart","floating","horizontalAlign","dropShadow","fillSeriesColor","y","formatter","seriesName","toFixed","getStatusAnalytics","a","sx","dir","ReactApexChart","UserTasks","userId","navigate","useNavigate","tasks","GET_THREAD_INBOX","maxHeight","overflowY","getThreadInbox","display","justifyContent","alignItems","flexDirection","TaskAltIcon","mb","p","pr","task","TaskItem","refId","Divider","textAlign","Button","endIcon","ArrowForwardIosIcon","onClick","formatInboxDate","toLocaleDateString","undefined","weekday","year","month","day","subject","author","dateUpdated","Avatar","firstName","charAt","lastName","minWidth","flexGrow","noWrap","flexShrink","DashboardPage","_useAppSelector","uid","office","Grid","container","pb","px","item","lg","sectionId"],"sourceRoot":""}